resimulate.exp(theta=2, n=10, R=10000)
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
#set.seed(2463)
sampleExp = rexp(n=n, rate=1/theta) # simulate data
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
sampleExpStar = sample(sampleExp, size=n, replace=TRUE)
T.star[i] = mean(sampleExpStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(sampleExp)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
set.seed(2463)
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
set.seed(2463)
sampleExp = rexp(n=n, rate=1/theta) # simulate data
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
sampleExpStar = sample(sampleExp, size=n, replace=TRUE)
T.star[i] = mean(sampleExpStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(sampleExp)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
#set.seed(2463)
sampleExp = rexp(n=n, rate=1/theta) # simulate data
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
sampleExpStar = sample(sampleExp, size=n, replace=TRUE)
T.star[i] = mean(sampleExpStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(sampleExp)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp(theta=2, n=10, R=10000)
data = c(8,6,5,10,8,12,9,9,8,11,7,3,6,7,5, 8,10,7,8,8,10,8,5,10,8,6,10,6,8,14)
mean(data)
length(data)
n = length(data)
R = 9999
H.star = rep(NA, R)
n = length(data)
R = 9999
H.star = rep(NA, R)
for(i in 1:R){
sample.data <- sample(data, size=n, replace=TRUE)
H.star[i] = mean(sample.data)
}
mean(H.star)
quantile(H.star, c(0.025, 0.5, 0.975))
x.bar = mean(data); x.bar
mean.h.star = mean(H.star)
bias.est = mean.h.star - x.bar; bias.est
mean.h.star = mean(H.star); mean.h.star
bias.est = mean.h.star - x.bar; bias.est
bias.corrected.est = x.bar - bias.est
bias.corrected.est = x.bar - bias.est;   bias.corrected.est
var(H.star)
var(H.star)
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
data = rexp(n=n, rate=1/theta) # observed data, original data.
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
# resample from original data with replacement.
dataStar = sample(data, size=n, replace=TRUE)
T.star[i] = mean(dataStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("xbar (mean of data) = ", mean(data), "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
cat("bias = mean(tstar) - xbar = ", mean(T.star) - mean(data), "\n", sep="")
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(data)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
bootstrapMean.exp(theta=2, n=10, R=10000)
bias.est = mean.h.star - x.bar; bias.est
bias.corrected.est = x.bar - bias.est;   bias.corrected.est
2*x.bar - mean.h.star
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
data = rexp(n=n, rate=1/theta) # observed data, original data.
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
# resample from original data with replacement.
dataStar = sample(data, size=n, replace=TRUE)
T.star[i] = mean(dataStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("xbar (mean of data) = ", mean(data), "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
bias = mean(T.star) - mean(data)
cat("bias = mean(tstar) - xbar = ", bias, "\n", sep="")
bias.corrected.est.mu = mean(data) - bias
cat("bias.correct.est.mu = xbar - bias = ", bias.corrected.est.mu)
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(data)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
data = rexp(n=n, rate=1/theta) # observed data, original data.
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
# resample from original data with replacement.
dataStar = sample(data, size=n, replace=TRUE)
T.star[i] = mean(dataStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("xbar (mean of data) = ", mean(data), "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
bias = mean(T.star) - mean(data)
cat("bias = mean(tstar) - xbar = ", bias, "\n", sep="")
bias.corrected.est.mu = mean(data) - bias
cat("bias.correct.est.mu = xbar - bias = ", bias.corrected.est.mu, "\n",sep="")
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(data)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
e
bootstrapMean.exp(theta=2, n=10, R=10000)
bootstrapMean.exp <- function(theta, n, R){
# Get n samples from the known population distribution.
data = rexp(n=n, rate=1/theta) # observed data, original data.
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
T.star = rep(NA, R)
for(i in 1:R){
# resample from original data with replacement.
dataStar = sample(data, size=n, replace=TRUE)
T.star[i] = mean(dataStar)
}
# MEAN(T*) should be close to MU_XBAR should be close to MU
# SD(T*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (tstar) = ", mean(T.star), "\n", sep="")
cat("mu_xbar = ", theta, "\n", sep="")
cat("xbar (mean of data) = ", mean(data), "\n", sep="")
cat("mu = ", theta, "\n\n", sep="")
bias = mean(T.star) - mean(data)
cat("bias = mean(tstar) - xbar = ", bias, "\n", sep="")
bias.corrected.est.mu = mean(data) - bias
cat("bias.correct.est.mu = xbar - bias = ", bias.corrected.est.mu, "\n\n",sep="")
cat("boot.sigma_xbar (tstar) = ", sd(T.star), "\n", sep="")
cat("sigma_xbar = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("sigma_xbar = s / sqrt(n) = ", sd(data)/sqrt(n), "\n\n", sep="")
print(quantile(T.star, c(0.025, 0.50, 0.975))) # 95% CI interval (0.96, 3.4)
return(invisible(T.star))
}
bootstrapMean.exp(theta=2, n=10, R=10000)
miceData <- c(94, 197, 16, 38, 99, 141, 23, 52, 104, 146, 10, 51, 30, 40, 27, 46)
xbar = mean(miceData)
xbar = mean(miceData); xbar
s = sd(miceData) ; s
length(miceData)
n = length(miceData); n
CI = c(xbar - 1.96 * s / sqrt(n), xbar + 1.96 * s / sqrt(n));CI
CI = c(xbar - 1.96 * s / sqrt(n), xbar + 1.96 * s / sqrt(n)); CI
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
bootstrapMean.exp(theta=2, n=10, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
bootstrapMean.exp(theta=2, n=10, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/Bootstrap PDF.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=FALSE)
typhoonData <- c(13,7,14,20,13,12,12,15,20,17,11,14,16,12,17,7,14,15,16,20,17,20,15,22,26,25,27,18,23,26)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
typhoonData <- c(13,7,14,20,13,12,12,15,20,17,11,14,16,12,17,7,14,
15,16,20,17,20,15,22,26,25,27,18,23,26)
bootstrapMean(typhoonData, R=9999)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
bootstrapMean(typhoonData, R=9999)
bootstrapMean(data=data, R=9999)
bootstrapMean(data=miceData, R=9999)
CI = c(xbar - 1.96 * s / sqrt(n), xbar + 1.96 * s / sqrt(n)); CI
bootstrapMean(typhoonData, R=9999)
lower = abs((1-0.95)/2)
upper = lower + 0.95
lower; upper
qnorm(lower)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/Week 1, 2 - Simulations, Bootstrap, CLT/bootstrap mini examples.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=FALSE)
typhoonData <- c(13,7,14,20,13,12,12,15,20,17,11,14,16,12,17,7,14,
15,16,20,17,20,15,22,26,25,27,18,23,26)
bootstrapMean(typhoonData, R=9999)
bootstrapMean(typhoonData, R=9999, level=0.90)
sampleNormData <- rnorm(n=9, mean=5, sd=sqrt(6))
mean(sampleNormData)
xbar = mean(sampleNormData); xbar
n = 9
s = sd(sampleNormData)
se.mean = s / sqrt(n); se.mean
CI = c(xbar - 1.96*se.mean, x.bar + 1.96*se.mean); CI
countIntervalsContainTrueMean = 0
n = 9
mu = 5; sigma = sqrt(6)
for(i in 1:R){
sampleNormData <- rnorm(n=n, mean=mu, sd=sigma)
xbar = mean(sampleNormData)
se.mean = sd(sampleNormData) / sqrt(n)
lower.CI = xbar - 1.96*se.mean #
upper.CI = x.bar + 1.96*se.mean #
if(lower.CI <= mu && mu <= upper.CI){
countIntervalsContainTrueMean = countIntervalsContainTrueMean + 1
}
}
countIntervalsContainTrueMean
countIntervalsContainTrueMean / R
theta.hat = rep(NA, R)
CIs.covered = 0
L = rep(NA, R)
U = rep(NA, R)
for(i in 1:R){
sampleNormData <- rnorm(n=n, mean=mu, sd=sigma)
xbar = mean(sampleNormData)
se.mean = sd(sampleNormData) / sqrt(n)
L[i] = xbar - 1.96*se.mean #
U[i] = x.bar + 1.96*se.mean #
if((L[i] <=mu) & (U[i] >=mu) ){
CIs.covered = CIs.covered + 1
}
}
theta.hat[1:5]
R = 10000
theta.hat = rep(NA, R)
CIs.covered = 0
n = 9
mu = 5; sigma = sqrt(6)
L = rep(NA, R)
U = rep(NA, R)
for(i in 1:R){
sampleNormData <- rnorm(n=n, mean=mu, sd=sigma)
xbar = mean(sampleNormData)
se.mean = sd(sampleNormData) / sqrt(n)
L[i] = xbar - 1.96*se.mean #
U[i] = x.bar + 1.96*se.mean #
if((L[i] <=mu) & (U[i] >=mu) ){
CIs.covered = CIs.covered + 1
}
}
theta.hat[1:5]
for(i in 1:R){
sampleNormData <- rnorm(n=n, mean=mu, sd=sigma)
xbar = mean(sampleNormData)
se.mean = sd(sampleNormData) / sqrt(n)
theta.hat[i] = xbar
L[i] = xbar - 1.96*se.mean #
U[i] = x.bar + 1.96*se.mean #
if((L[i] <=mu) & (U[i] >=mu) ){
CIs.covered = CIs.covered + 1
}
}
theta.hat[1:5]
L[1:5]
U[1:5]
library(plotrix)
plotCI(x=1:R, rep(mu, R), ui=U, li=L)
R = 1000
theta.hat = rep(NA, R)
CIs.covered = 0
n = 9
mu = 5; sigma = sqrt(6)
L = rep(NA, R)
U = rep(NA, R)
for(i in 1:R){
sampleNormData <- rnorm(n=n, mean=mu, sd=sigma)
xbar = mean(sampleNormData)
se.mean = sd(sampleNormData) / sqrt(n)
theta.hat[i] = xbar
L[i] = xbar - 1.96*se.mean #
U[i] = x.bar + 1.96*se.mean #
if((L[i] <=mu) & (U[i] >=mu) ){
CIs.covered = CIs.covered + 1
}
}
theta.hat[1:5]
L[1:5]
U[1:5]
# Plot the CI's
plotCI(x=1:R, rep(mu, R), ui=U, li=L)
bootstrapMean(typhoonData, R=9999, level=0.90)
plotCI(x=1:R, rep(mu, R), ui=L, li=U)
?plotCI
plotCI(x=1:R, rep(mu, R), ui=U, li=L)
simulate.norm = function(n, R, mu, sigma) {
x_bar = rep(NA, R) # create empty vector first with length R = num replicates.
for(i in 1:R) {
# data vector holds the n iid random samples so this would be
# equivalent to the data A1, A2, .. A9 above when drawing from
# the Normal distribution of School A gpa's.
data = rnorm(n=n, mean=mu, sd=sigma)
x_bar[i] = mean(data)
}
hist(x_bar)
# Comparing the simulated mean and standard deviation with
# the theoretical ones.
cat("sim.mean = ", mean(x_bar), "\ttheoretical.mean =", mu,"\n")
cat("sim.sd = ", sd(x_bar), "\ttheoretical.sd =", sigma/sqrt(n),"\n")
return(invisible(x_bar))
}
N = 10000
X_bar_A = simulate.norm(n=9, R=N, mu=5, sigma=0.25)
hist(X_bar_A, main="Sample means of GPA for School A")
X_bar_B = simulate.norm(n=9, R=N, mu=4.8, sigma=0.25)
hist(X_bar_B, main="Sample means of GPA for School B")
sum(X_bar_A - X_bar_B >= 0.5)
sum(X_bar_A - X_bar_B >= 0.5) / N
pnorm((0.5-(5-4.8))/sqrt(2*0.25^2/9), lower.tail = F)
pnorm((0-(5 - 4.8))/sqrt(2*0.25^2/9))
sum(X_bar_B > X_bar_A) / N
movieData = scan("movies.txt")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS")
movieData = scan("movies.txt")
movieData
n = length(movieData); n # length
xbar = mean(movieData); xbar # the mean running time
s = sd(movieData); s; # the standard deviation
z.crit = abs(qnorm((1-0.95)/2))
z.crit
CI = c(xbar - z.crit* s / sqrt(n), xbar + z.crit*s/sqrt(n))
CI
bootstrapMean <- function(data, R, level=0.95){
# Get n samples from the known population distribution. (this is the data given)
n = length(data) # observed data, original data
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
H.star = rep(NA, R)
for(i in 1:R){
# resample from original data with replacement.
dataStar = sample(data, size=n, replace=TRUE) #this is the bootstrap sample
H.star[i] = mean(dataStar)
}
# MEAN(H*) should be close to MU_XBAR should be close to MU
# SD(H*) should be close to SD_XBAR should be close to  S/SQRT(N)
cat("boot.mu_xbar (hstar) = ", mean(H.star), "\n", sep="")
cat("xbar (mean of data) = ", mean(data), "\n\n", sep="")
B.hat = mean(H.star) - mean(data) # estimated bias
cat("B.hat = mean(hstar) - mean(data) = ", B.hat, "\n", sep="")
mu.hat.B = mean(data) - B.hat  # bias-corrected version of mu
cat("theta.hat.B = mean(data) - bias = ", mu.hat.B, "\n\n",sep="")
se.mean = sd(H.star) # standard error of the mean
cat("boot.se.mean (hstar) = ", se.mean, "\n", sep="") # call this se.mean
#print(sqrt(var(H.star))) # same as sd(H.star)
cat("se.mean = sigma/sqrtn(n) = ", theta/sqrt(n), "\n", sep="")
cat("se.mean = s / sqrt(n) = ", sd(data)/sqrt(n), "\n\n", sep="")
# 95 % confidence interval methods.
# calculate critical value first
lower = abs( (1-level)/2)
upper = lower + level
z.crit = abs(qnorm(lower))
cat("CI by normal approximation: ")
cat("(",mu.hat.B - z.crit*se.mean,", ",mu.hat.B + z.crit*se.mean,")","\n",sep="")
cat("CI by percentile method: ")
qs = quantile(H.star, c(lower, upper))
cat("(", qs[1],", ", qs[2],")", "\n", sep="")
cat("CI by basic method:", "")
cat("(", 2*xbar - qs[2],", ", 2*xbar - qs[1],")", "\n", sep="")
return(invisible(H.star))
}
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
bootstrapMean(data=movieData, R = 10000)
bootstrapMean(data=movieData, R = 10000)
bootstrapMean(data=movieData, R = 10000)
set.seed(123)
bootstrapMean(data=movieData, R = 10000)
bootstrapStandardDeviation <- function(data, R, level=0.95){
# Get n samples from the known population distribution. (this is the data given)
n = length(data) # observed data, original data
# Sample from F-hat (instead of rexp) to sample with replacement from F-hat
H.star = rep(NA, R)
for(i in 1:R){
# resample from original data with replacement.
dataStar = sample(data, size=n, replace=TRUE) #this is the bootstrap sample
H.star[i] = sd(dataStar)
}
B.hat = mean(H.star) - sd(data) # estimated bias
cat("B.hat = mean(hstar) - ddata) = ", B.hat, "\n", sep="")
sd.hat.B = sd(data) - B.hat  # bias-corrected version of sample standard deviation
cat("sd.hat.B = sd(data) - B.hat = ", sd.hat.B, "\n\n",sep="")
# 95 % confidence interval methods.
# calculate critical value first
lower = abs( (1-level)/2)
upper = lower + level
z.crit = abs(qnorm(lower))
cat("CI by basic method:", "")
qs = quantile(H.star, c(lower, upper))
cat("(", 2*sd(data) - qs[2],", ", 2*sd(data) - qs[1],")", "\n", sep="")
return(invisible(H.star))
}
bootstrapStandardDeviation(data=movieData, R=10000)
bootstrapStandardDeviation(data=movieData, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
set.seed(123)
bootstrapStandardDeviation(data=movieData, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
bootstrapStandardDeviation(data=movieData, R=10000)
bootstrapStandardDeviation(data=movieData, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
set.seed(123)
bootstrapStandardDeviation(data=movieData, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
pnorm(c(-2*sqrt(50), 2*sqrt(50)))
diff(pnorm(c(-2*sqrt(50), 2*sqrt(50))))
diff(pnorm(c(-0.2*sqrt(50), 0.2*sqrt(50))))
1-qnorm(2.5455)
1-pnorm(2.5455)
pnorm(-1.697)
movieData
abs(qnorm((1-0.95)/2))
t.crit = abs(qt((1-0.95)/2))
t.crit = abs(qt((1-0.95)/2, df=n-1))
t.crit = abs(qt((1-0.95)/2, df=n-1)); t.crit
CI = c(xbar - t.crit* s / sqrt(n), xbar + t.crit*s/sqrt(n))
CI
set.seed(123)
bootstrapMean(data=movieData, R = 10000)
CI = c(xbar - 1.96* s / sqrt(n), xbar + 1.96*s/sqrt(n))
CI
2*104.45-110.3
2*104.45-98.8
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
2*13.60524-16.7518
2*13.60524-9.366215
set.seed(123)
set.seed(123)
bootstrapMean(data=movieData, R = 10000)
set.seed(123)
bootstrapStandardDeviation(data, R=10000)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment1_CLTAndBootstrap.R', echo=TRUE)
bootstrapStandardDeviation(movieData, R=10000)
set.seed(123)
bootstrapStandardDeviation(movieData, R=10000)
data
xs = bootstrapMean(data=movieData, R = 10000)
set.seed(123)
xs = bootstrapMean(data=movieData, R = 10000)
hist(xs)
hist(movieData)
