A4[i] = rnorm(n=1, mean=5, sd=0.25); B4[i] = rnorm(n=1, mean=4.8, sd=0.25)
A5[i] = rnorm(n=1, mean=5, sd=0.25); B5[i] = rnorm(n=1, mean=4.8, sd=0.25)
A6[i] = rnorm(n=1, mean=5, sd=0.25); B6[i] = rnorm(n=1, mean=4.8, sd=0.25)
A7[i] = rnorm(n=1, mean=5, sd=0.25); B7[i] = rnorm(n=1, mean=4.8, sd=0.25)
A8[i] = rnorm(n=1, mean=5, sd=0.25);  B8[i] = rnorm(n=1, mean=4.8, sd=0.25)
A9[i] = rnorm(n=1, mean=5, sd=0.25); B9[i] = rnorm(n=1, mean=4.8, sd=0.25)
X_bar_A[i] = mean(c(A1[i],A2[i],A3[i],A4[i],A5[i],A6[i],A7[i],A8[i],A9[i]))
X_bar_B[i] = mean(c(B1[i],B2[i],B3[i],B4[i],B5[i],B6[i],B7[i],B8[i],B9[i]))
}
hist(X_bar_A, ylab = "Frequency",xlab = "Mean of GPA from School A")
mean(X_bar_A)
sd(X_bar_A)
var(X_bar_A)
hist(X_bar_B, ylab = "Frequency",xlab = "Mean of GPA from School B")
mean(X_bar_B)
sd(X_bar_B)
var(X_bar_B)
simulate.norm = function(n, R, mu, sigma) {
x_bar = rep(NA, R)
for(i in 1:R) {
x = rnorm(n=n, mean=mu, sd=sigma)
x_bar[i] = mean(x)
}
hist(x_bar)
#return(x_bar)
cat("sim.mean = ", mean(x_bar), "\ttheoretical.mean =", mu,"\n")
cat("variance = ", var(x_bar), "\ttheoretical.var =", sigma^2/n,"\n")
return(invisible(x_bar))
}
X_bar_A_2 = simulate.norm(n=9, R=1000, mu=5, sigma=0.25)
simulate.norm = function(n, R, mu, sigma) {
x_bar = rep(NA, R)
for(i in 1:R) {
x = rnorm(n=n, mean=mu, sd=sigma)
x_bar[i] = mean(x)
}
hist(x_bar)
#return(x_bar)
cat("sim.mean = ", mean(x_bar), "\ttheoretical.mean =", mu,"\n")
cat("sd = ", sd(x_bar), "\ttheoretical.sd =", sigma/sqrt(n),"\n")
return(invisible(x_bar))
}
X_bar_A_2 = simulate.norm(n=9, R=1000, mu=5, sigma=0.25)
X_bar_A_2 = simulate.norm(n=9, R=1000, mu=5, sigma=0.25)
X_bar_B_2 = simulate.norm(n=9, R=1000, mu=4.8, sigma=0.25)
X_bar_B_2 = simulate.norm(n=9, R=1000, mu=4.8, sigma=0.25)
X_bar_B_2 = simulate.norm(n=9, R=1000, mu=4.8, sigma=0.25)
X_bar_A_2 = simulate.norm(n=9, R=10000, mu=5, sigma=0.25)
X_bar_B_2 = simulate.norm(n=9, R=10000, mu=4.8, sigma=0.25)
X_bar_A_2 = simulate.norm(n=9, R=10000, mu=5, sigma=0.25)
X_bar_A_2 = simulate.norm(n=9, R=10000, mu=5, sigma=0.25)
X_bar_B_2 = simulate.norm(n=9, R=10000, mu=4.8, sigma=0.25)
hist(X_bar_A, ylab = "Frequency",xlab = "Mean of GPA from School A")
simulate.norm = function(n, R, mu, sigma) {
x_bar = rep(NA, R) # create empty vector first with length R = num replicates.
for(i in 1:R) {
data = rnorm(n=n, mean=mu, sd=sigma)
x_bar[i] = mean(data)
}
hist(x_bar)
cat("sim.mean = ", mean(x_bar), "\ttheoretical.mean =", mu,"\n")
cat("sd = ", sd(x_bar), "\ttheoretical.sd =", sigma/sqrt(n),"\n")
return(invisible(x_bar))
}
simulate.norm(n=9, R=2, mu=3, sigma=4)
simulate.norm(n=9, R=2, mu=3, sigma=4)
sum(x_bar <= 5 & x_bar >= 1)/length(x_bar) # close to theoretical!
x_bar = simulate.norm(n=9, R=10000, mu=3, sigma=4)
x_bar = simulate.norm(n=9, R=10000, mu=3, sigma=4)
sum(x_bar <= 5 & x_bar >= 1)/length(x_bar) # close to theoretical!
diff(pnorm(c(1, 5), mean=3, sd=4/sqrt(9)))
y1 = sample(c(1,2,3,4,5,6), size=1, replace = T)
y1
y2 = sample(c(1,2,3,4,5,6), size=1, replace = T)
y2
y3 = sample(c(1,2,3,4,5,6), size=1, replace = T)
y3
y_bar = mean(c(y1,y2,y3))
y_bar
N=1000;
y1 = rep(0,N) ## create a vector size N with all values are 0 to store the results
y2 = rep(0,N)
y3 = rep(0,N)
y_bar=rep(0,N)
for (i in 1:N) {
y1[i] = sample(c(1,2,3,4,5,6), size=1, replace = T)
y2[i] = sample(c(1,2,3,4,5,6), size=1, replace = T)
y3[i] = sample(c(1,2,3,4,5,6), size=1, replace = T)
y_bar[i] = mean(c(y1[i],y2[i],y3[i]))
}
hist(y_bar,ylab = "Frequency",xlab = "Mean of 3 tosses")
summary(y_bar)
mean(y_bar)
sd(y_bar)
var(y_bar)
X_bar_A[1:20]
X_bar_A[1:10]
options(digits=5)
X_bar_A[1:10]
options(digits=7)
X_bar_A[1:10]
options(digits=6)
X_bar_A[1:10]
X_bar_A_2[1:10]
for (i in 1:N) {
A1[i] = rnorm(n=1, mean=5, sd=0.25); B1[i] = rnorm(n=1, mean=4.8, sd=0.25)
A2[i] = rnorm(n=1, mean=5, sd=0.25); B2[i] = rnorm(n=1, mean=4.8, sd=0.25)
A3[i] = rnorm(n=1, mean=5, sd=0.25); B3[i] = rnorm(n=1, mean=4.8, sd=0.25)
A4[i] = rnorm(n=1, mean=5, sd=0.25); B4[i] = rnorm(n=1, mean=4.8, sd=0.25)
A5[i] = rnorm(n=1, mean=5, sd=0.25); B5[i] = rnorm(n=1, mean=4.8, sd=0.25)
A6[i] = rnorm(n=1, mean=5, sd=0.25); B6[i] = rnorm(n=1, mean=4.8, sd=0.25)
A7[i] = rnorm(n=1, mean=5, sd=0.25); B7[i] = rnorm(n=1, mean=4.8, sd=0.25)
A8[i] = rnorm(n=1, mean=5, sd=0.25);  B8[i] = rnorm(n=1, mean=4.8, sd=0.25)
A9[i] = rnorm(n=1, mean=5, sd=0.25); B9[i] = rnorm(n=1, mean=4.8, sd=0.25)
X_bar_A[i] = mean(c(A1[i],A2[i],A3[i],A4[i],A5[i],A6[i],A7[i],A8[i],A9[i]))
X_bar_B[i] = mean(c(B1[i],B2[i],B3[i],B4[i],B5[i],B6[i],B7[i],B8[i],B9[i]))
}
cbind(X_bar_A[1:10, X_bar_A_2[1:10])
cbind(X_bar_A[1:10], X_bar_A_2[1:10])
X_bar_A_2 = simulate.norm(n=9, R=10000, mu=5, sigma=0.25)
cbind(X_bar_A[1:10], X_bar_A_2[1:10])
cbind(X_bar_A[1:10], X_bar_A_2[1:10])
cbind(X_bar_B[1:10], X_bar_B_2[1:10])
N = 10000
A1 = rep(0,N) ; B1 = rep(0,N)
A2 = rep(0,N) ; B2 = rep(0,N)
A3 = rep(0,N) ; B3 = rep(0,N)
A4 = rep(0,N) ; B4 = rep(0,N)
A5 = rep(0,N) ; B5 = rep(0,N)
A6 = rep(0,N) ; B6 = rep(0,N)
A7 = rep(0,N) ; B7 = rep(0,N)
A8 = rep(0,N) ; B8 = rep(0,N)
A9 = rep(0,N) ; B9 = rep(0,N)
length(X_bar_A)
length(X_bar_A_2)
X_bar_A = rep(0,N)
X_bar_B = rep(0, N)
for (i in 1:N) {
A1[i] = rnorm(n=1, mean=5, sd=0.25); B1[i] = rnorm(n=1, mean=4.8, sd=0.25)
A2[i] = rnorm(n=1, mean=5, sd=0.25); B2[i] = rnorm(n=1, mean=4.8, sd=0.25)
A3[i] = rnorm(n=1, mean=5, sd=0.25); B3[i] = rnorm(n=1, mean=4.8, sd=0.25)
A4[i] = rnorm(n=1, mean=5, sd=0.25); B4[i] = rnorm(n=1, mean=4.8, sd=0.25)
A5[i] = rnorm(n=1, mean=5, sd=0.25); B5[i] = rnorm(n=1, mean=4.8, sd=0.25)
A6[i] = rnorm(n=1, mean=5, sd=0.25); B6[i] = rnorm(n=1, mean=4.8, sd=0.25)
A7[i] = rnorm(n=1, mean=5, sd=0.25); B7[i] = rnorm(n=1, mean=4.8, sd=0.25)
A8[i] = rnorm(n=1, mean=5, sd=0.25);  B8[i] = rnorm(n=1, mean=4.8, sd=0.25)
A9[i] = rnorm(n=1, mean=5, sd=0.25); B9[i] = rnorm(n=1, mean=4.8, sd=0.25)
X_bar_A[i] = mean(c(A1[i],A2[i],A3[i],A4[i],A5[i],A6[i],A7[i],A8[i],A9[i]))
X_bar_B[i] = mean(c(B1[i],B2[i],B3[i],B4[i],B5[i],B6[i],B7[i],B8[i],B9[i]))
}
hist(X_bar_A, ylab = "Frequency",xlab = "Mean of GPA from School A")
mean(X_bar_A)
sd(X_bar_A)
hist(X_bar_B, ylab = "Frequency",xlab = "Mean of GPA from School B")
mean(X_bar_B)
sd(X_bar_B)
for (i in 1:N) {
A1[i] = rnorm(n=1, mean=5, sd=0.25); B1[i] = rnorm(n=1, mean=4.8, sd=0.25)
A2[i] = rnorm(n=1, mean=5, sd=0.25); B2[i] = rnorm(n=1, mean=4.8, sd=0.25)
A3[i] = rnorm(n=1, mean=5, sd=0.25); B3[i] = rnorm(n=1, mean=4.8, sd=0.25)
A4[i] = rnorm(n=1, mean=5, sd=0.25); B4[i] = rnorm(n=1, mean=4.8, sd=0.25)
A5[i] = rnorm(n=1, mean=5, sd=0.25); B5[i] = rnorm(n=1, mean=4.8, sd=0.25)
A6[i] = rnorm(n=1, mean=5, sd=0.25); B6[i] = rnorm(n=1, mean=4.8, sd=0.25)
A7[i] = rnorm(n=1, mean=5, sd=0.25); B7[i] = rnorm(n=1, mean=4.8, sd=0.25)
A8[i] = rnorm(n=1, mean=5, sd=0.25);  B8[i] = rnorm(n=1, mean=4.8, sd=0.25)
A9[i] = rnorm(n=1, mean=5, sd=0.25); B9[i] = rnorm(n=1, mean=4.8, sd=0.25)
X_bar_A[i] = mean(c(A1[i],A2[i],A3[i],A4[i],A5[i],A6[i],A7[i],A8[i],A9[i]))
X_bar_B[i] = mean(c(B1[i],B2[i],B3[i],B4[i],B5[i],B6[i],B7[i],B8[i],B9[i]))
}
mean(X_bar_A)
sd(X_bar_A)
mean(X_bar_B)
sd(X_bar_B)
simulate.norm = function(n, R, mu, sigma) {
x_bar = rep(NA, R) # create empty vector first with length R = num replicates.
for(i in 1:R) {
# data vector holds the n iid random samples so this would be
# equivalent to the data A1, A2, .. A9 above when drawing from
# the Normal distribution of School A gpa's.
data = rnorm(n=n, mean=mu, sd=sigma)
x_bar[i] = mean(data)
}
hist(x_bar)
# Comparing the simulated mean and standard deviation with
# the theoretical ones.
cat("sim.mean = ", mean(x_bar), "\ttheoretical.mean =", mu,"\n")
cat("sim.sd = ", sd(x_bar), "\ttheoretical.sd =", sigma/sqrt(n),"\n")
return(invisible(x_bar))
}
X_bar_A_2 = simulate.norm(n=9, R=10000, mu=5, sigma=0.25)
X_bar_A_second = simulate.norm(n=9, R=10000, mu=5, sigma=0.25)
X_bar_B_second = simulate.norm(n=9, R=10000, mu=4.8, sigma=0.25)
X_bar_A - X_bar_A_second
round(X_bar_A - X_bar_A_second, 5)
N
N = 10000
## create vectors with size N to store values. These vectors represent the random
# sample of size 9. A1 to A9 represent the sample of size 9 from school A, and
# B1 ... B9 are the iid random sample from school B. They carry observed or
# simulated values.
A1 = rep(0,N) ; B1 = rep(0,N)
A2 = rep(0,N) ; B2 = rep(0,N)
A3 = rep(0,N) ; B3 = rep(0,N)
A4 = rep(0,N) ; B4 = rep(0,N)
A5 = rep(0,N) ; B5 = rep(0,N)
A6 = rep(0,N) ; B6 = rep(0,N)
A7 = rep(0,N) ; B7 = rep(0,N)
A8 = rep(0,N) ; B8 = rep(0,N)
A9 = rep(0,N) ; B9 = rep(0,N)
# The mean of the random variables above, for each N.
X_bar_A = rep(0,N)
X_bar_B = rep(0, N)
for (i in 1:N) {
A1[i] = rnorm(n=1, mean=5, sd=0.25); B1[i] = rnorm(n=1, mean=4.8, sd=0.25)
A2[i] = rnorm(n=1, mean=5, sd=0.25); B2[i] = rnorm(n=1, mean=4.8, sd=0.25)
A3[i] = rnorm(n=1, mean=5, sd=0.25); B3[i] = rnorm(n=1, mean=4.8, sd=0.25)
A4[i] = rnorm(n=1, mean=5, sd=0.25); B4[i] = rnorm(n=1, mean=4.8, sd=0.25)
A5[i] = rnorm(n=1, mean=5, sd=0.25); B5[i] = rnorm(n=1, mean=4.8, sd=0.25)
A6[i] = rnorm(n=1, mean=5, sd=0.25); B6[i] = rnorm(n=1, mean=4.8, sd=0.25)
A7[i] = rnorm(n=1, mean=5, sd=0.25); B7[i] = rnorm(n=1, mean=4.8, sd=0.25)
A8[i] = rnorm(n=1, mean=5, sd=0.25);  B8[i] = rnorm(n=1, mean=4.8, sd=0.25)
A9[i] = rnorm(n=1, mean=5, sd=0.25); B9[i] = rnorm(n=1, mean=4.8, sd=0.25)
X_bar_A[i] = mean(c(A1[i],A2[i],A3[i],A4[i],A5[i],A6[i],A7[i],A8[i],A9[i]))
X_bar_B[i] = mean(c(B1[i],B2[i],B3[i],B4[i],B5[i],B6[i],B7[i],B8[i],B9[i]))
}
hist(X_bar_A, ylab = "Frequency",xlab = "Mean of GPA from School A")
mean(X_bar_A)
sd(X_bar_A)
hist(X_bar_B, ylab = "Frequency",xlab = "Mean of GPA from School B")
mean(X_bar_B)
sd(X_bar_B)
# METHOD 2 ------------------------
# General function: returns a vector of length R where each entry is the
# mean of n data points drawn from the Normal(mu, sigma^2) distribution.
# n = sample size to take (number of iid random variables)
# R = number of replications = number of times we draw the n samples.
simulate.norm = function(n, R, mu, sigma) {
x_bar = rep(NA, R) # create empty vector first with length R = num replicates.
for(i in 1:R) {
# data vector holds the n iid random samples so this would be
# equivalent to the data A1, A2, .. A9 above when drawing from
# the Normal distribution of School A gpa's.
data = rnorm(n=n, mean=mu, sd=sigma)
x_bar[i] = mean(data)
}
hist(x_bar)
# Comparing the simulated mean and standard deviation with
# the theoretical ones.
cat("sim.mean = ", mean(x_bar), "\ttheoretical.mean =", mu,"\n")
cat("sim.sd = ", sd(x_bar), "\ttheoretical.sd =", sigma/sqrt(n),"\n")
return(invisible(x_bar))
}
X_bar_A_second = simulate.norm(n=9, R=N, mu=5, sigma=0.25)
X_bar_B_second = simulate.norm(n=9, R=N, mu=4.8, sigma=0.25)
round(X_bar_A - X_bar_A_second, 5)
sum(X_bar_A - X_bar_A_second > 0.1)
sum(X_bar_A - X_bar_A_second > 0.1)/N
rb = rbinom(n=1000, size=18, p=0.5)
rb #
table(rb)
rb = rbinom(n=1000, size=18, p=0.5)
table(rb)
rb = rbinom(n=1000, size=18, p=0.5)
table(rb)
rb = rbinom(n=1000, size=18, p=0.5)
table(rb)
22+11+5
c(1,1,3,11,28,77,125,174,187,166,126,63,22,11,5)
tablerb = c(1,1,3,11,28,77,125,174,187,166,126,63,22,11,5)
38/sum(tablerb)
5/sum(tablerb)
16/sum(tablerb)
sum(tablerb)
16+28
44/1000
3164/9000
2/6
N.energy <- c(33,211,284,545,570,591,602,786,945,951,1161,1420,
1529,1642,1994,2329,2682,2766,3025,13537)
W.energy <- c(269,352,386,1048,1247,1276,1305,1538,2037,2241,2462,2780,
2890,4081,5358,6498,7542,13791,23862,34734)
Z <- c(N.energy, W.energy)
m <- length(N.energy)
n <- length(W.energy)
T.obs <- mean(W.energy) - mean(N.energy)) / (sd(Z) * sqrt(1 / n + 1/m))
T.obs
T.obs <- (mean(W.energy) - mean(N.energy)) / (sd(Z) * sqrt(1 / n + 1/m))
T.obs
nBS <- 999
T.star <- numeric(nBS)
for(j in 1:nBS){
z.star <- sample(Z, size=m+n)
w.star <- z.star[(m+1) : (m + n)]
n.star <- z.star[1:m]
T.star[j] <- (mean(w.star) - mean(n.star)) / ( sd(z.star) * sqrt(1 / m + 1/n))
}
p1 <- sum(T.star >= T.obs) / nBS
cat( "P(T > ", round(T.obs, 1), "| H0 = ", round(p1, 2), "\n", sep="")
cat( "P(T > ", round(T.obs, 1), "| H0 = true) = ", round(p1, 2), "\n", sep="")
low = c(23.37, 25.13, 23.78, 27.74, 25.3, 25.21, 22.12, 20.96, 23.11, 22.57, 24.59, 23.7)
medium = c(20.39, 20.87, 20.78, 20.19, 20.01, 20.23, 20.73, 19.53, 18.87, 18.17, 23.34, 22.45)
high = c(18.87, 19.69, 19.29, 18.10, 18.42, 19.33, 17.26, 18.09, 18.69, 18.82, 18.72, 18.75)
sd(low)
sd(medium); sd(high)
length(low)
11*(sd(low)^2+sd(medium)^2+sd(high)^2)
setwd("/development/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS")
invoiceData <- read.table("chargeData.csv", header=TRUE)
invoiceData <- read.table("chargeData.csv", header=TRUE)
invoiceData
class(invoiceData)
crate.lm <- lm(y ~ x, data=invoiceData)
crate.lm
summary(crate.lm)
options(show.signif.stars = FALSE)
crate.lm <- lm(y ~ x, data=invoiceData)
crate.lm
summary(crate.lm)
Y = matrix(invoiceData$y, ncol=1)
Y
rep(4, 10)
n <- nrow(invoiceData)
X = matrix(c(rep(1, n), invoiceData$x), ncol=2)
X
beta.hat = solve(t(X) %*% X) %*% (t(X) %*% Y); beta.hat
summary(crate.lm)
beta.hat = solve(t(X) %*% X) %*% (t(X) %*% Y); beta.hat
summary(crate.lm)
summary(crate.lm)
X^2
X
x = invoiceData$x
Sxx = sum(x ^ 2) - (1/n) * sum(x)^2; Sxx
Syy = sum(Y ^2) - (1/n) * sum(Y)^2; Syy
B1.hat = beta.hat[2]
B1.hat
SSE = Syy - B1.hat^2 * Sxx; SEE
SSE = Syy - B1.hat^2 * Sxx; SSE
s = sqrt(SSE / (n-2)); s
t.crit = abs(qt(0.025, df=n-2)); t.crit
t.crit = abs(qt((1-0.95)/2, df=n-2)); t.crit
CI.B0 = beta.hat[1] + c(-1,1) * t.crit * s * sqrt(sum(x^2)/(n * Sxx))
CI.B0
CI.B1 = beta.hat[2] + c(-1,1) * t.crit * s * 1/sqrt(Sxx)
CI.B1
library(ggplot2)
fit.data <- data.frame(fit = crate.lm$fitted.values, x=x, y=Y)
fit.data
fit.data <- data.frame(fit = crate.lm$fitted.values, x=x, y=Y)
ggplot(invoiceData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=crate.lm$fitted.values, aes(y=fit, colour="blue"),size=1)
ggplot(invoiceData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=fit.data, aes(y=fit, colour="blue"),size=1)
ggplot(invoiceData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=fit.data, aes(y=fit, colour="blue"),size=1)
source('/development/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment3_Chapters_10_11_LinearModels.R', echo=TRUE)
ggplot(invoiceData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=fit.data, aes(y=fit), colour="blue"),size=1)
ggplot(invoiceData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=fit.data, aes(y=fit), colour="blue",size=1)
ggplot(invoiceData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=fit.data, aes(y=fit), colour="dodgerblue",size=1)
source('/development/projects/statisticallyfit/github/R/RStatistics/STAT270 Inference/ASSIGNMENTS/Assignment3_Chapters_10_11_LinearModels.R', echo=TRUE)
ggplot(crateData, aes(x=x, y=y)) +
geom_point(shape=19, size=3) +
geom_line(data=fit.data, aes(y=fit), colour="dodgerblue",size=1) +
ggtitle("Predicted Values for Distance to Freight Charge") +
xlab("Distance (miles)") + ylab("Freight Charge ($)")
crate.lm
SSE
SSE = Y %*% t(Y) - t(beta.hat) %*% (t(X) %*% Y); SSE
beta.hat
SSE = t(Y) %*% Y - t(beta.hat) %*% (t(X) %*% Y); SSE
k = 1
s = sqrt(SSE / (n-k-1)); s
t.crit = abs(qt((1-0.95)/2, df=n-(k+1))); t.crit
a = c(1,0)
a = matrix(c(1,0), ncol=1)
a #
t(a) %*% beta.hat
t.crit
s
t.crit * s
t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
s #
CI.B)
CI.B0
beta.hat[1]
beta.hat[1] + c(-1,1) * t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
CI.B0
intercept.hat = t(a) %*% beta.hat; intercept.hat
CI.B0 = intercept.hat + c(-1,1) * t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
CI.B0
a = matrix(c(1,0), ncol=1); a
slope.hat = t(a) %*% beta.hat; slope.hat
a = matrix(c(0,1), ncol=1)
slope.hat = t(a) %*% beta.hat; slope.hat
CI.B1 = slope.hat + c(-1,1) * t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
CI.B1
SSE
x.star = 20
a = matrix(c(1, x.star), ncol=1)
a
predicted.value = t(a) %*% beta.hat; predicted.value
CI.mean = predicted.value + c(-1,1) * t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
CI.mean
t.crit = qt((1-0.90)/2, df=n-k-1); t.crit
CI.mean = predicted.value + c(-1,1) * t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
CI.mean
t.crit = abs(qt((1-0.90)/2, df=n-k-1)); t.crit
CI.mean = predicted.value + c(-1,1) * t.crit * s * sqrt(t(a) %*% solve(t(X) %*% X) %*% a)
CI.mean
options(show.signif.stars = FALSE)
x = c(65, 63, 67, 64, 68, 62, 70, 66, 68, 67, 69, 71)
y = c(68, 66, 68, 65, 69, 66, 68, 65, 71, 67, 68, 70)
n = length(x)
Sxx = sum(x^2) - (1/n) * sum(x)^2
Syy = sum(y^2) - (1/n) * sum(y)^2
Sxy = sum(x*y) - (1/n) * sum(x) * sum(y)
r = Sxy / sqrt(Sxx * Syy); r
cor(x, y)
t = r * sqrt(n-2) / sqrt(1 - r^2); t
t.crit = abs(qt(0.025, df=n-2)); t.crit
t.crit = abs(qt((1-0.95)/2, df=n-2)); t.crit
p.value = 2 * pt(t, df=n-2, lower.tail=F); p.value
t.crit = abs(qt(0.025, df=32-2)); t.crit
r.crit = t.crit / sqrt(t.crit^2 + 32 - 2); r.crit
x = c(-3,-2,-1,0,1,2,3)
y = c(1,0,0,-1,-1,0,0)
model.lm <- lm(y ~ x)
summary(model.lm)
model.lm <- lm(y ~ x + x^2)
summary(model.lm)
data = data.frame(x=x,y=y, x2=x^2)
model.lm <- lm(y ~ x + x2, data=data)
summary(model.lm)
n = length(x)
Syy = sum(y^2) - (1/n) * sum(y)^2
X = matrix(c(rep(1, n), x), ncol=2)
X
Y = matrix(y, ncol=1)
Y
beta.hat = solve(t(X) %*% X) %*% (t(X) %*% Y); beta.hat
X = matrix(c(rep(1, n), x, x^2), ncol=2)
X = matrix(c(rep(1, n), x, x^2), ncol=3)
X
beta.hat = solve(t(X) %*% X) %*% (t(X) %*% Y); beta.hat
SSE = t(Y) %*% Y - t(beta.hat) %*% (t(X) %*% Y); SSE
summary(model.lm)
k = 2
s = sqrt(SSE / (n-k-1));s
n
Fstat = ((Syy - SSE) / k) / (SSE / (n - k -1)); Fstat
p.value = pf(Fstat, df1=k, df2=n-k-1, lower.tail=F); p.value
summary(model.lm)
X
treeData <- data.frame(Y=c(4.3,10.8,8, 12.2,14.1,16.5, 8.7,11.4,14.3),
Treatment=c(rep("R",3),rep("T",3),rep("C",3)),
Block=c(rep(c("F1","F2","F3"),3)),stringsAsFactors = TRUE)
treeData
tree.lm <- lm(Y ~ Block + Treatment, data=treeData)
summary(tree.lm)
anova(tree.lm)
grassData = data.frame(Y=c(2.764, 2.568, 2.506, 2.612,2.238,
3.043,2.977,2.533,2.675,2.616,
2.6,2.183,2.334,2.164,2.127,
3.049,3.028,2.895,2.724,2.697),
Block=c(rep("1",5),rep("2",5),rep("3",5),rep("4",5)),
Treatment=c(rep(c("A","B","C","D","E"),4)),stringsAsFactors = TRUE)
grassData
anova(grassData)
grass.lm <- lm(Y ~ Block + Treatment, data=grassData)
anova(grass.lm)
anova(tree.lm)
table(treeData)
tapply(treeData, INDEX=list(Treatment))
data("ToothGrowth")
ToothGrowth
names(ToothGrowth)
tapply(len, list(dose, supp), mean)
with(ToothGrowth, tapply(len, list(dose, supp), mean))
with(grassData, tapply(Y, list(Treatment), mean))
with(grassData, tapply(Y, list(Treatment), sum))
with(treeData, tapply(Y, list(Treatment), mean))
with(treeData, tapply(Y, list(Treatment), sum))
with(treeData, tapply(Y, list(Treatment), mean))
tab = with(treeData, tapply(Y, list(Treatment), mean))
class(tab)
tab[1]
tab[[1]]
mean.clearcut = tab[[2]]; mean.clearcut
mean.thinned = tab[[3]]; mean.thinned
tbl = with(treeData, tapply(Y, list(Treatment), mean))
anv = anova(tree.lm)
anv$`Mean Sq`
anv
n
n = nrow(treeData)
n
b = 3 # number of blocks
t = 3 # number of treatments
k = 3 # number of treatments
t.crit = qt(0.025, df=n - b - k + 1); t.crit
t.crit = abs(qt(0.025, df=n - b - k + 1)); t.crit
CI.treeDiff = (mean.clearcut - mean.thinned) + c(-1,1) * t*s*sqrt(2/b)
CI.treeDiff
