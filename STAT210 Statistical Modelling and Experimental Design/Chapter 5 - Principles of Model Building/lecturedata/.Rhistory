p = pexp(10, rate=1/beta, lower.tail=FALSE)
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
p = pexp(90, rate=1/beta, lower.tail=FALSE)
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
z0 <- qnorm(0.20, mean=0, sd=1); z0
z1 <- qnorm(0.10, mean=0, sd=1, lower.tail=F); z1
qnorm(1 - 0.10, mean=0, sd=1) # another way
pgamma(30000,shape=20,scale=1000,lower.tail=F)
integrate(function(x){(1/(1000^20)*gamma(20)) * x^(20-1) *exp(-x/1000) }, lower=30000, upper=Inf)
pgamma(30,000, shape=20, scale=1000, lower.tail=F) #
pgamma(30000, shape=20, scale=1000, lower.tail=F) #
gamma(2)
gamma(4)
gamma(5)
integrate(function(x){(1/(1000^20 * gamma(20))) * x^(20-1) *exp(-x/1000) }, lower=30000, upper=Inf)
gamma.density <- function(x){(1/(1000^20 * gamma(20))) * x^(20-1) *exp(-x/1000) }
integrate(gamma.density, lower=30000, upper=Inf)
pgamma(30000, shape=20, scale=1000, lower.tail=FALSE)
gamma(20)
factorial(19)
qexp(p=0.25, rate=1/beta)
pexp(90, rate=1/beta, lower.tail=F)
pexp(10, rate=1/beta)
diff(pexp(c(10,20), rate=1/beta)) / pexp(10, rate=1/beta, lower.tail=F)
p2 = pexp(10, rate=1/beta, lower.tail=F) # P (T > 10)
p1 / p2
p1 = diff(pexp(c(10,20), rate=1/beta)) # P(10 < T < 20)
p1 / p2
pexp(10, rate=1/beta)
ppois(2, lambda=9/4, lower.tail=F)
1 - ppois(2, lambda=9/4) # another way to calculate
p = pexp(90, rate=1/beta, lower.tail=FALSE)
pbinom(0, size=5, p=p, lower.tail=FALSE)
p = pexp(90, rate=1/beta, lower.tail=FALSE); p
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
diff(pbinom(c(145, 163), size=600, p=0.25))
diff(pbinom(c(144, 163), size=600, p=0.25))
diff(pnorm(c(144.5, 163.5), mean=600*0.25, sd=sqrt(600*0.25*0.75)))
n=10^5
X = runif(n=n, min=0, max=1)
Y = runif(n=n, min=0, max=1)
head(X)
probBothBetweenHalf <- sum((X <= 0.5) & (Y <= 0.5))/n
probBothBetweenHalf
n = 500 # sample of size 500 from bivariate uniform.
u1 <- runif(n=n, min=0, max=1)
u2 <- runif(n=n, min=0, max=1)
# logical vec depending on whether conditions are met
logicBothBetweenHalf <- (u1 < 05.) & (u2 < 0.5)
logicBothBetweenHalf
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5))
probBothBetweenHalf
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5)) / n
probBothBetweenHalf
theSim <- 0
library(reshape2)
theSim <- 0
# repeat sampling 1000 times
for(i in 1:1000) {
n = 500 # sample of size 500 from bivariate uniform.
u1 <- runif(n=n, min=0, max=1)
u2 <- runif(n=n, min=0, max=1)
# logical vec depending on whether conditions are met
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5)) / n
#store result from each sample (i)
theSim[i] = probBothBetweenHalf
}
theSim
melt(data)
data <- melt(data.frame(theSim))
data
head(data)
ggplot(data, aes(y=value)) + geom_density()
library(ggpl2)
Library(ggplot2)
library(ggplot2)
ggplot(data, aes(y=value)) + geom_density()
data <- data.frame(theSim)
ggplot(data, aes(x=theSim)) + geom_density()
ggplot(data, aes(x=theSim)) + geom_density(size=2, colour="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram()
ggplot(data, aes(x=theSim)) + geom_histogram(colour="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram(fill="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram(fill="lightpink")
theSim <- 0
# repeat sampling 1000 times
for(i in 1:1000) {
n = 500 # sample of size 500 from bivariate uniform.
u1 <- runif(n=n, min=0, max=1)
u2 <- runif(n=n, min=0, max=1)
# logical vec depending on whether conditions are met
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5)) / n
#store result from each sample (i)
theSim[i] = probBothBetweenHalf
}
library(ggplot2)
data <- data.frame(theSim)
ggplot(data, aes(x=theSim)) + geom_density(size=2, colour="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram(fill="lightpink")
sampleSize <- 10^4
die1 <- sample(x=1:6, size=sampleSize, replace=TRUE) # each prob = 1/6
die2 <- sample(x=1:6, size=sampleSize, replace=TRUE) # each prob = 1/6
jointProb <- table(die1, die2)/sampleSize
jointProb
table(die1, die2)
jointProb[5:6]
jointProb[5:6]
fives <- (die1 == 5) + (die2==5)
sixes <- (die1 == 6) + (die2 == 6)
jointProb56 <- table(fives, sixes)/sampleSize
jointProb56
diag(table(die1, die2)[5:6]/sampleSize)
jointProb[5:6] # this is the joint probability of
diag(table(die1, die2))[5:6]/sampleSize
jointProb56
prob56 <- diag(table(die1, die2))[5:6]/sampleSize
jointProb56
jointProb56
jointProb56[3,1]
jointProb56[1,3]
(2/3)^2
mu_I = 29.87
mu_C = 31.77
sd_I=7.71
sd_C = 7.86
p = 0.957
# part d) pdf of Canandaigua temperature (had muC, varC)
lower <- mu_C - 4 * sd_C
upper <- mu_C + 4 * sd_C
xs <- seq(lower, upper, length=10^3)
ys = dnorm(x=xs, mean=mu_C, sd=sd_C)
df <- data.frame(xs=xs, ys=ys)
ggplot() +
geom_line(data=df, aes(x=xs, y=ys), size=1, colour="blue") +
geom_vline(xintercept=mu_C, colour="black", linetype="dashed", size=1) +
ggtitle("Normal Density of Canandaigua Max Temperature")
mu_C_given_I <- function(i) mu_C + p * (sd_C/sd_I) * (i - mu_I)
sd_C_given_I <- sd_C^2 * (1 - p^2)
df.cond <- data.frame(xs=xs, ys=dnorm(x=xs, mean=mu_C_given_I(25), sd=sd_C_given_I))
ggplot() +
geom_line(data=df.cond, aes(x=xs, y=ys), size=1, colour="red") +
geom_vline(xintercept=mu_C_given_I(25), colour="black", linetype="dashed",
size=1) +
ggtitle("Conditional Normal PDF of Canadaigua given Ithaca = 25 degrees F")
x1 <- x2 <- seq(0, 1, length=128)
x1
x2
const <- 6/5
var.grid <- expand.grid("x1", =x1, "x2"=x2)# create grid of bivarate rvs
var.grid <- expand.grid("x1" =x1, "x2"=x2)# create grid of bivarate rvs
var.grid
X1 <- var.grid$x1
X2 <- var.grid$x2
X2
?expand.grid
x <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
d1 <- expand.grid(x = x, y = y)
length(x)
length(y)
d1
head(d1)
head(d1, 103)
jointPDF <- const * (X1 + X2^2)
jointPDF
jointPDF <- matrix(jointPDF, ncol=128, nrow=128)
jointPDF
x11()
jointPDF # typecast as matrix.
x11()
persp(z=jointPDF, y=x1, x=x2, col="lightblue") # perspective plot
x11()
image(jointPDF, xlab="x1", ylab="x2", col=heat.colors(256))
# image view
axis(side=1, at = seq(0,1,by=0.2), labels=seq(0,1,length=6))
axis(side=2, at = seq(0,1,by=0.2), labels=seq(0,1,length=6))
contour(jointPDF, nlevels=10, add=TRUE)
indices <- which(X1 <= 0.5 & X2 <= 0.5)
indices
head(indices)
head(indices, 20)
regionOfInterest <- jointPDF[indices]
regionOfInterest
prob <- sum(regionOfInterest * (1/128^2)) # calculate probability using a riemann sum.
prob
N <- 128
z0 <- qnorm(0.20, mean=0, sd=1); z0
z1 <- qnorm(0.10, mean=0, sd=1, lower.tail=F); z1
qnorm(1 - 0.10, mean=0, sd=1) # another way
beta = 40
# part a) lower quartile: P(T <= t0) = 0.25
qexp(p=0.25, rate=1/beta)
pexp(90, rate=1/beta, lower.tail=F)
pexp(10, rate=1/beta)
p1 = diff(pexp(c(10,20), rate=1/beta)) # P(10 < T < 20)
p2 = pexp(10, rate=1/beta, lower.tail=F) # P (T > 10)
p1 / p2
pexp(10, rate=1/beta)
ppois(2, lambda=9/4, lower.tail=F)
1 - ppois(2, lambda=9/4) # another way to calculate
p = pexp(90, rate=1/beta, lower.tail=FALSE); p
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p) # another way to calculate.
diff(pbinom(c(144, 163), size=600, p=0.25))
diff(pnorm(c(144.5, 163.5), mean=600*0.25, sd=sqrt(600*0.25*0.75)))
gamma.density <- function(x){(1/(1000^20 * gamma(20))) * x^(20-1) *exp(-x/1000) }
integrate(gamma.density, lower=30000, upper=Inf)
res =integrate(gamma.density, lower=30000, upper=Inf)
res$value
result = integrate(gamma.density, lower=30000, upper=Inf)
result$value
pgamma(30000, shape=20, scale=1000, lower.tail=FALSE)
integrate(gamma.density, lower=30000, upper=Inf)
pgamma(30000, shape=20, scale=1000, lower.tail=FALSE)
N <- 10^4
dice1 <- sample(1:6, size=N, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
dice2 <- sample(1:6, size=N, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
dice3 <- sample(1:6, size=N, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
diceSum <- dice1 + dice2 + dice3
probLessTen <- sum(diceSum < 10) / N; probLessTen
rolls <- cbind(dice1, dice2, dice3)
count.1 <- 0
for (i in 1:N){
# if all of the rolls of the 3 dice are not the same for this iteration i,
if(rolls[i, 1] != rolls[i,2] && rolls[i,1] != rolls[i, 3] &&
rolls[i,2] != rolls[i,3]){
# then we do increment the count
count.1 = count.1 + 1
}
}
# the probability we are finding is:
probFaceValuesAllDifferent.1 <- count.1 / N;
probFaceValuesAllDifferent.1
count.2 <- 0
for (i in 1:N){
# if all of the rolls for this row i are unique,
if(length(unique(rolls[i, ])) == 3){
# then we increment the count
count.2 = count.2 + 1
}
}
probFaceValuesAllDifferent.2 <- count.2 / N
probFaceValuesAllDifferent.2
p2 = sum(dice1 != dice2 & dice1 != dice3 & dice2 != dice3)/N; p2
dice1 != dice2
0
1 - pbinom(100, size=105, prob = 0.90)
pbinom(100, size = 105, prob = 0.90, lower.tail=FALSE)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A4")
options(digits=10, show.signif.stars = FALSE)
library(dae)
oxygenData <- read.table("o2.txt", header=TRUE)
# naming the temperature levels
numToTempLevel <- function(num){
if(num == 1) return("low")
else if(num == 2) return("between")
else return("high")
}
oxygenData$temperature <- sapply(oxygenData$temperature, numToTempLevel)
# making the species a factor (so its levels are not numerical)
oxygenData$species <- factor(oxygenData$species)
# making the temperature a factor.
oxygenData$temperature <- factor(oxygenData$temperature)
# gender is already a factor
is.factor(oxygenData$gender)
levels(oxygenData$temperature)
oxygenData$temperature <- relevel(oxygenData$temperature, ref="low")
levels(oxygenData$temperature)
View(oxygenData)
oxygenData <- read.table("o2.txt", header=TRUE)
# naming the temperature levels
numToTempLevel <- function(num){
if(num == 1) return("low")
else if(num == 2) return("between")
else if(num == 3) return("high")
}
# naming the species leves to S1, S2, or S3
numToSpeciesLevel <- function(num){
if(num == 1) return("S1")
else if(num == 2) return("S2")
else if(num == 3) return("S3")
}
oxygenData$temperature <- sapply(oxygenData$temperature, numToTempLevel)
oxygenData$species <- sapply(oxygenData$species, numToSpeciesLevel)
is.factor(oxygenData$temperature)
oxygenData$species <- factor(oxygenData$species)
oxygenData$temperature <- factor(oxygenData$temperature)
# gender is already a factor
is.factor(oxygenData$gender)
o2 = read.table("o2.txt", header=TRUE)
View(o2)
numToTempLevel <- function(num){
if(num == 1) return("T1")
else if(num == 2) return("T2")
else if(num == 3) return("T3")
}
oxygenData <- read.table("o2.txt", header=TRUE)
oxygenData$temperature <- sapply(oxygenData$temperature, numToTempLevel)
oxygenData$species <- sapply(oxygenData$species, numToSpeciesLevel)
# making the temperature a factor.
oxygenData$temperature <- factor(oxygenData$temperature)
# making species a factor.
oxygenData$species <- factor(oxygenData$species)
# gender is already a factor
is.factor(oxygenData$gender)
View(oxygenData)
cbind(o2, oxygenData)
global.lm <- lm(resprate ~ gender * species * temperature, data=oxygenData)
global.lm
summary(global.lm)
nrow(summary(global.lm$contrasts))
summary(global.lm$contrasts)
summary(global.lm$coefficients)
global.lm$coefficients
summary(global.lm$contrasts)
summary(global.lm$coefficients)
summary(global.lm)
summary(global.lm)$coef
nrow(summary(global.lm)$coef)
summary(global.lm)
oxygenData <- read.table("o2.txt", header=TRUE)
# naming the temperature levels
numToTempLevel <- function(num){
if(num == 1) return("T1")
else if(num == 2) return("T2")
else if(num == 3) return("T3")
}
# naming the species leves to C1, C2, C3 for crab types
numToSpeciesLevel <- function(num){
if(num == 1) return("C1")
else if(num == 2) return("C2")
else if(num == 3) return("C3")
}
oxygenData$temperature <- sapply(oxygenData$temperature, numToTempLevel)
oxygenData$species <- sapply(oxygenData$species, numToSpeciesLevel)
# making the temperature a factor.
oxygenData$temperature <- factor(oxygenData$temperature)
# making species a factor.
oxygenData$species <- factor(oxygenData$species)
# gender is already a factor
is.factor(oxygenData$gender)
global.lm <- lm(resprate ~ gender * species * temperature, data=oxygenData)
summary(global.lm)
interaction.ABC.plot(response=resprate, trace.factor=gender,
x.factor=temperature, groups.factor=species, data=oxygenData)
interaction.ABC.plot(response=resprate, trace.factor=gender,
x.factor=temperature, groups.factor=species, data=oxygenData,
size=2)
interaction.ABC.plot(response=resprate, trace.factor=gender,
x.factor=temperature, groups.factor=species, data=oxygenData,
linewidth=2)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
interaction.ABC.plot(response=resprate, x.factor = temperature, trace.factor=species,
groups.factor = gender, data=oxygenData)
summary(global.lm)
anova(global.lm)
anova(lm(resprate ~ gender + species + temperature + gender:species + species:temperature, data=oxygenData))
anova(lm(resprate ~  species + gender + temperature + gender:species + species:temperature, data=oxygenData))
interaction.ABC.plot(response=resprate, trace.factor=gender,
x.factor=temperature, groups.factor=species, data=oxygenData)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
interaction.ABC.plot(response=resprate, x.factor = temperature, trace.factor=species,
groups.factor = gender, data=oxygenData)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
with(oyxgenData,
interaction.plot(response=resprate, x.factor=temperature, trace.factor=species))
with(oyxgenData,
interaction.plot(response=resprate, x.factor=temperature, trace.factor=species))
with(oyxgenData, interaction.plot(response=resprate, x.factor=temperature, trace.factor=species))
oxygenData
with(oyxgenData, interaction.plot( x.factor=temperature, trace.factor=species,response=resprate,))
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A4")
oxygenData <- read.table("o2.txt", header=TRUE)
# naming the temperature levels
numToTempLevel <- function(num){
if(num == 1) return("T1")
else if(num == 2) return("T2")
else if(num == 3) return("T3")
}
# naming the species leves to C1, C2, C3 for crab types
numToSpeciesLevel <- function(num){
if(num == 1) return("C1")
else if(num == 2) return("C2")
else if(num == 3) return("C3")
}
oxygenData$temperature <- sapply(oxygenData$temperature, numToTempLevel)
oxygenData$species <- sapply(oxygenData$species, numToSpeciesLevel)
# making the temperature a factor.
oxygenData$temperature <- factor(oxygenData$temperature)
# making species a factor.
oxygenData$species <- factor(oxygenData$species)
# gender is already a factor
is.factor(oxygenData$gender)
with(oyxgenData, interaction.plot( x.factor=temperature, trace.factor=species,response=resprate))
View(oxygenData)
attach(oxygenData)
interaction.plot(x.factor=temperature, trace.factor=species,response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
anova(global.lm)
interaction.plot(x.factor=temperature, trace.factor=species,response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor=species,response=resprate)
interaction.plot(x.factor=species, trace.factor=temperature,response=resprate)
interaction.ABC.plot(response=resprate, trace.factor=gender,
x.factor=temperature, groups.factor=species, data=oxygenData)
summary(global.lm)
oxygenData$temperature <- relevel(oxygenData$temperature, ref="T2")
global.lm <- lm(resprate ~ gender * species * temperature, data=oxygenData)
summary(global.lm)
oxygenData$temperature <- relevel(oxygenData$temperature, ref="T1")
global.lm <- lm(resprate ~ gender * species * temperature, data=oxygenData)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=temperature,response=resprate)
anova(global.lm)
interaction.ABC.plot(response=resprate, trace.factor=gender,
x.factor=temperature, groups.factor=species, data=oxygenData)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=temperature,response=resprate)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
interaction.ABC.plot(response=resprate, x.factor = temperature, trace.factor=species,
groups.factor = gender, data=oxygenData)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=temperature,response=resprate)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=temperature,response=resprate)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
anova(lm(resprate ~ gender + species + temperature + gender:species + species:temperature + gender:temperature))
anova(lm(resprate ~ gender + species + temperature + gender:species +
species:temperature, data=oxygenData))
final.lm <- lm(resprate ~ gender + species + temperature + gender:species +
species:temperature, data=oxygenData)
anova(final.lm)
summary(final.lm)
anova(global.lm)
detach(oxygenData)
nothreeway.lm <- lm(resprate ~ gender + species + temperature + gender:species +
species:temperature + gender:temperature, data=oxygenData)
anova(nothreeway.lm)
final.lm <- lm(resprate ~ gender + species + temperature + gender:species +
species:temperature, data=oxygenData)
anova(final.lm)
anova(global.lm)
summary(global.lm)
summary(global.lm)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 5 - Principles of Model Building/lecturedata/")
potatoData <- read.table("potatoes.txt", header=TRUE)
potatoData$BAC <- factor(potatoData$BAC)
potatoData$TEMP <- factor(potatoData$TEMP)
potatoData$OXYGEN <- factor(potatoData$OXYGEN)
interaction.ABC.plot(response=ROT, x.factor = TEMP, groups.factor = BAC,
trace.factor = OXYGEN, data=potatoData)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
summary(global.lm)
rot.lm <- lm(ROT ~ OXYGEN * BAC * TEMP, data=potatoData)
summary(rot.lm)
anova(rot.lm)
nothreeway.lm <- lm(resprate ~ gender + species + temperature + gender:species +
species:temperature + gender:temperature, data=oxygenData)
anova(nothreeway.lm)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
attach(oxygenData)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
summary(nothreeway.lm)
nothreeway.lm <- lm(resprate ~ gender + species + temperature + gender:species +
gender:temperature + species:temperature, data=oxygenData)
anova(nothreeway.lm)
summary(nothreeway.lm)
final.lm <- lm(resprate ~ gender + species + temperature + gender:species +
species:temperature, data=oxygenData)
anova(final.lm)
summary(final.lm)
anova(final.lm)
interaction.plot(x.factor=species, trace.factor=gender, response=resprate)
interaction.plot(x.factor=temperature, trace.factor = gender, response=resprate)
interaction.plot(x.factor=species, trace.factor=temperature,response=resprate)
interaction.ABC.plot(response=resprate, x.factor = species, trace.factor=gender,
groups.factor = temperature, data=oxygenData)
anova(global.lm)
summary(global.lm)
nothreeway.lm <- lm(resprate ~ gender + species + temperature + gender:species +
gender:temperature + species:temperature, data=oxygenData)
anova(nothreeway.lm)
summary(nothreeway.lm)
summary(global.lm)
final.lm <- lm(resprate ~ gender + species + temperature + gender:species +
species:temperature, data=oxygenData)
anova(final.lm)
summary(final.lm)
library(effects)
eff.crab <- allEffects(final.lm)
plot(eff.crab)
print(eff.crab)
