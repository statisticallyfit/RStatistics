ggtitle(paste("Partial Residuals of", variableName)) +
geom_abline(slope=b.var) +
xlab(variableName) + ylab("Partial Residuals")
ggplot(df, aes(x=Xs, y=Partials)) +
geom_point(shape=20, size=size,color=colour) +
ggtitle(paste("Partial Residuals of", variableName)) +
geom_abline(method=lm) +
xlab(variableName) + ylab("Partial Residuals")
partialResidualValues
xs #
head(centeredFittedVariable)
head(fit$residuals)
reg <- lm(partialResidualValues ~ xs)
reg #
ggplot(df, aes(x=Xs, y=Partials)) +
geom_point(shape=20, size=size,color=colour) +
ggtitle(paste("Partial Residuals of", variableName)) +
geom_abline(intercept=-0.9004155, slope=0.0496918) +
xlab(variableName) + ylab("Partial Residuals")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 8 - Residuals/temp.R', echo=TRUE)
library(ggplot2)
library(ggfortify)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 8 - Residuals/temp.R', echo=TRUE)
?qf #
wf(0.05, df1=12, df2=17)
qf(0.05, df1=12, df2=17)
qf(0.05, df1=12, df2=17, lower.tail=F)
load("data/Exercises and Examples/READING.Rdata")
View(READING)
var.test(READING$NEW, READING$STD)
attach(READING)
which(READING$METHOD == "NEW")
READING$METHOD[READING$METHOD == "NEW"]
METHOD == NEW #
METHOD == "NEW" #
METHOD[METHOD == "NEW"]
df <- READING
detach(READING)
df$SCORE[df$METHOD == "NEW"]
df$SCORE
class(df$SCORE)
which(df$METHOD == "NEW")
df$SCORE[which(df$METHOD == "NEW")]
df[df$METHOD=="NEW",]
df$SCORE[df$METHOD=="NEW",]
subset(df, METHOD="NEW")
subset(df$SCORE, METHOD="NEW")
library(dplyr)
filter(READING, METHOD=="NEW")
class(READING)
filter(iris, Sepal.Length > 7)
filter(df, METHOD==NEW)
filter(df, METHOD=="NEW")
StudentData
library(LearnBayes)
subset(studentdata, Grade==3)
head(studentdata)
subset(studentdata, Gender==female)
subset(studentdata, Gender=="female")
class(studentdata)
head(studentdata)
head(READING)
READING <- data.frame(READING)
subset(READING, METHOD == "NEW")
is.factor(READING$METHOD)
head(df)
df[df$SCORE == 70]
df[df$SCORE == 70, ]
df[df$METHOD == "NEW", ]
nrow(df)
tail(df)
df[df$METHOD == factor("NEW"), ]
df$METHOD <- as.character(df$METHOD)
df$METHOD
head(df) @
#
q()
head(df) #
df[df$METHOD == "NEW", ]
df$METHOD[1:10]
df$METHOD[1:11]
READING[[METHOD]] == "NEW"
READING[["METHOD"]] == "NEW"
d <- data.frame(Method=c(replicate(10, "NEW"), replicate(12,"STD")), Score=READING$SCORE
d <- data.frame(Method=c(replicate(10, "NEW"), replicate(12,"STD")), Score=READING$SCORE)
d <- data.frame(Method=c(replicate(10, "NEW"), replicate(12,"STD")), Score=READING$SCORE)
head(d) #
nrow(d) == nrow(df)
subset(d, METHOD == "NEW")
subset(d, Method=="NEW")
m <- matrix(READING)
head(m)
m #
as.matrix(READING)
df <- data.frame(m)
df #
df <- as.data.frame(m)
df #
cbind(c(READING$METHOD), READING$SCORE)
cbind(READING$METHOD, READING$SCORE)
READING$METHOD[1]
load("data/Exercises and Examples/READING.Rdata")
is.factor(READING$METHOD)
READING[READING$METHOD == "NEW" | READING$METHOD == "STD", ]
drop.levels(READING)
library(gdata)
drop.levels(READING)
df <- drop.levels(READING)
subset(df, METHOD=="NEW")
df[METHOD=="NEW", ]
is.factor(df$METHOD)
d1 <- READING$SCORE[1:10]
d2 <- READING$SCORE[11:22]
nrow(READING)
var.test(d1, d2)
var(d1)
var(d2)
var.test(d2, d1)
var.test(d1, d2)
var.test(d2, d1, alternative = "two.sided")
Fc <- var(d2) / var(d1)
Fc #
pf(Fc, df1=11, df2=9, lower.tail=F)
pf(1/Fc, df1=9, df2=11, lower.tail=TRUE)
0.4073752845*2
?var.test
var.test(d1, d2, alternative = "less")
s2 <- var(d2); s1 <- var(d1)
s2 #
s1 #
var.test(d1, d2, alt="less")
var.test(d2, d1, alt="less")
pf(s2/s1, df1=11, df2=9, lower.tail=F)
length(d1)
var.test(d2, d1, df1=11, df2=9, lower.tail=F)
var.test(d2, d1, df1=11, df2=9)
s2/s1
pf(s2/s1, df1=11, df2=9, lower.tail=F) #
var.test(d2, d1, df1=11, df2=9, alt="greater")
pf(s1/s2, df1=9, df2=11, lower.tail=F)
var.test(d1, d2, alt="less")
var.test(d1, d2, df1=9, df2=11, alt="less")
social.quad.lm <- lm(SALARY ~ EXP + I(EXP^2), data=SOCWORK)
residualFittedPlot(social.quad.lm) # now just pure cone shape, no more curve
SOCWORK[SOCWORK$EXP < 20,]
sample1 <- SOCWORK[SOCWORK$EXP < 20,]
sample2 <- SOCWORK[SOCWORK$EXP >= 20, ]
nrow(sample1)
nrow(sample2)
mod1 <- lm(SALARY ~ EXP, data=sample1)
mod1 <- lm(SALARY ~ EXP + I(EXP^2), data=sample1)
mod2 <- lm(SALARY ~ EXP + I(EXP^2), data=sample2)
summary(mod1)
summary(mod2)
anova(mod1, mod2)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
standardErrorOfRegression(mod1)
summary(mod1)
mse1 <- standardErrorOfRegression(mod1)
mse2 <- standardErrorOfRegression(mod2)
Fc <- 0
if(mse1 > mse2) Fc <- mse1 / mse2
else Fc  <- mse2 / mse1
else (Fc  <- mse2 / mse1}
Fc <- 0
if(mse1 > mse2) Fc <- mse1 / mse2
else (Fc  <- mse2 / mse1}
if(mse1 > mse2) { Fc <- mse1 / mse2 }
else (Fc  <- mse2 / mse1}
Fc <- 0
if(mse1 > mse2) {
Fc <- mse1 / mse2
} else {Fc  <- mse2 / mse1}
Fc
var.test(mod1, mod2)
1/Fc
numerator.df <- 0
denominator.df <- 0
numerator.df <- nrow(sample1) - 1
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fc <- mse1 / mse2
numerator.df <- nrow(sample1) - 1
denominator.df <- nrow(sample2) - 1
} else {
Fc  <- mse2 / mse1
numerator.df <- nrow(sample2) - 1
denominator.df <- nrow(sample1) - 1
}
mse1
mse2
mse2/mse1
p.value <- pf(Fc, df1=numerator.df, df2=denominator.df, lower.tail=F)
p.value
anova(mod2)
fit <- mod2 #
sse.value <- invisible(SSE(fit))
sse.value
nrow(mod2)
nrow(sample2)
2178353538/23
sqrt(SSE(mod2)/23)
mse2
MSE <- function(fit) {
s <- standardErrorOfRegression(fit)
return(s^2)
}
MSE(mod2)
options(digits=15)
MSE(mod2)
MSE(mod2)/MSE(mod1)
sqrt(MSE(mod2)/MSE(mod1))
numerator.df
p.value(MSE(mod2)/MSE(mod1), df1=25, df2=23, lower.tail=F)
pf(MSE(mod2)/MSE(mod1), df1=25, df2=23, lower.tail=F)
Fc <- 0
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fc <- MSE(mod1) / MSE(mod2)
numerator.df <- nrow(sample1) - 1
denominator.df <- nrow(sample2) - 1
} else {
Fc  <- MSE(mod2) / MSE(mod1)
numerator.df <- nrow(sample2) - 1
denominator.df <- nrow(sample1) - 1
}
p.value <- pf(Fc, df1=numerator.df, df2=denominator.df, lower.tail=F)
p.value
names(mod1$model)
Fc <- 0
k <- ncol(mod1) # should be equal to that of mod2
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fc <- MSE(mod1) / MSE(mod2)
numerator.df <- nrow(sample1) - (k+1)
denominator.df <- nrow(sample2) - (k+1)
} else {
Fc  <- MSE(mod2) / MSE(mod1)
numerator.df <- nrow(sample2) - (k+1)
denominator.df <- nrow(sample1) - (k+1)
}
p.value <- pf(Fc, df1=numerator.df, df2=denominator.df, lower.tail=F)
Fc
numerator.df
sample2
nrow(sample2) - (k+1)
nrow(sample2)
k <- ncol(mod1) # should be equal to that of mod2, is num independent vars
k
mod1 <- lm(SALARY ~ EXP + I(EXP^2), data=sample1)
mod2 <- lm(SALARY ~ EXP + I(EXP^2), data=sample2)
Fc <- 0
k <- ncol(mod1) # should be equal to that of mod2, is num independent vars
k <- ncol(mod1$model) # should be equal to that of mod2, is num independent vars
k
k <- ncol(mod1$model) # should be equal to that of mod2, is num independent vars
# including transformations.
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fc <- MSE(mod1) / MSE(mod2)
numerator.df <- nrow(sample1) - (k+1)
denominator.df <- nrow(sample2) - (k+1)
} else {
Fc  <- MSE(mod2) / MSE(mod1)
numerator.df <- nrow(sample2) - (k+1)
denominator.df <- nrow(sample1) - (k+1)
}
p.value <- pf(Fc, df1=numerator.df, df2=denominator.df, lower.tail=F)
p.value
Fstat <- 0
sample1 <- SOCWORK[SOCWORK[["EXP"]] < 20,]
sample1
nrow(sample1)
n <- nrow(fit1) # should be equal to nrow fit2
homoskedasticityRegressionTest <- function(fit1, fit2, variableName){
n1 <- nrow(fit1$model)
n2 <- nrow(fit2$model)
Fstat <- 0
k <- ncol(fit1$model) # should be equal to that of mod2, is num independent vars
# including transformations.
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fstat <- MSE(fit1) / MSE(fit2)
numerator.df <- n1 - (k+1)
denominator.df <- n2 - (k+1)
} else {
Fstat  <- MSE(fit2) / MSE(fit1)
numerator.df <- n2 - (k+1)
denominator.df <- n1 - (k+1)
}
p.value <- pf(Fstat, df1=numerator.df, df2=denominator.df, lower.tail=F)
cat("\n")
cat("#############################################################\n")
cat("########     Homoskedasticity of Regression Test     ########\n")
cat("#############################################################\n")
cat("F-statistic (variance ratio) =                   ", Fstat, sep="")
cat("P-value =                                        ", p.value, sep="")
df <- data.frame(Fstat=Fstat, PValue=p.value)
return(invisible(df))
}
homoskedasticityRegressionTest <- function(fit1, fit2){
n1 <- nrow(fit1$model)
n2 <- nrow(fit2$model)
Fstat <- 0
k <- ncol(fit1$model) # should be equal to that of mod2, is num independent vars
# including transformations.
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fstat <- MSE(fit1) / MSE(fit2)
numerator.df <- n1 - (k+1)
denominator.df <- n2 - (k+1)
} else {
Fstat  <- MSE(fit2) / MSE(fit1)
numerator.df <- n2 - (k+1)
denominator.df <- n1 - (k+1)
}
p.value <- pf(Fstat, df1=numerator.df, df2=denominator.df, lower.tail=F)
cat("\n")
cat("#############################################################\n")
cat("########     Homoskedasticity of Regression Test     ########\n")
cat("#############################################################\n")
cat("F-statistic (variance ratio) =                   ", Fstat, sep="")
cat("P-value =                                        ", p.value, sep="")
df <- data.frame(Fstat=Fstat, PValue=p.value)
return(invisible(df))
}
homoskedasticityRegressionTest(mod1, mod2)
homoskedasticityRegressionTest <- function(fit1, fit2){
n1 <- nrow(fit1$model)
n2 <- nrow(fit2$model)
Fstat <- 0
k <- ncol(fit1$model) # should be equal to that of mod2, is num independent vars
# including transformations.
numerator.df <- 0
denominator.df <- 0
if(mse1 > mse2) {
Fstat <- MSE(fit1) / MSE(fit2)
numerator.df <- n1 - (k+1)
denominator.df <- n2 - (k+1)
} else {
Fstat  <- MSE(fit2) / MSE(fit1)
numerator.df <- n2 - (k+1)
denominator.df <- n1 - (k+1)
}
p.value <- pf(Fstat, df1=numerator.df, df2=denominator.df, lower.tail=F)
cat("\n")
cat("#############################################################\n")
cat("########     Homoskedasticity of Regression Test     ########\n")
cat("#############################################################\n")
cat("F-statistic =                           ", Fstat, sep="", "\n")
cat("P-value =                               ", p.value,sep="","\n")
df <- data.frame(Fstat=Fstat, PValue=p.value)
return(invisible(df))
}
homoskedasticityRegressionTest(mod1, mod2)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
sample1 <- SOCWORK[SOCWORK$EXP < 20, ]
sample2 <- SOCWORK[SOCWORK$EXP >= 20, ]
mod1 <- lm(SALARY ~ EXP + I(EXP^2), data=sample1)
mod2 <- lm(SALARY ~ EXP + I(EXP^2), data=sample2)
HomoskedasticityRegressionTest(mod1, mod2)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
HomoskedasticityRegressionTest(mod1, mod2)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
HomoskedasticityRegressionTest(mod1, mod2)
nrow(sample2)
fit2 <- mod2; fit1 <- mod1;
n1 <- nrow(fit1$model)
n2 <- nrow(fit2$model)
k <- ncol(fit1$model) # should be equal to that of mod2, is num independent vars
k
numerator.df <- 0
n2 - (k+1)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
HomoskedasticityRegressionTest(mod1, mod2)
qf(0.025, df1=23, df2=21, lower.tail=F)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
HomoskedasticityRegressionTest(mod1, mod2)
options(digits=5)
HomoskedasticityRegressionTest(mod1, mod2)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
HomoskedasticityRegressionTest(mod1, mod2)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
HomoskedasticityRegressionTest(mod1, mod2)
HomoskedasticityRegressionTest(mod1, mod2, alt="one")
View(standardErrorOfSlope)
load("data/Exercises and Examples/EX8_2.Rdata")
options(digits=10)
yhat <- lm(Y ~ X, data=EX8_2)
residualFittedPlot(yhat)
partialPlot(yhat, variableName = "X")
load("data/Exercises and Examples/ASWELLS.Rdata")
View(ASWELLS)
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
residualFittedPlot(arsenic.lm)
partialPlot(arsenic.lm, variableName = "LATITUDE")
partialPlot(arsenic.lm, variableName = "LONGITUDE")
partialPlot(arsenic.lm, variableName = "DEPTHFT")
partialPlot(arsenic.lm, variableName = "LONGITUDE")
partialPlot(arsenic.lm, variableName = "LATITUDE")
arsenic.log.lm <- lm(I(log(ARSENIC)) ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
residualFittedPlot(arsenic.log.lm)
partialPlot(arsenic.log.lm, variableName = "LATITUDE")
partialPlot(arsenic.log.lm, variableName = "LONGITUDE")
partialPlot(arsenic.log.lm, variableName = "DEPTHFT")
arsenic.log.lm <- lm(I((ARSENIC)^(1/2)) ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
residualFittedPlot(arsenic.log.lm)
load("data/Exercises and Examples/GASTURBINE.Rdata")
View(GASTURBINE)
gas.lm <- lm(HEATRATE ~ RPM + CPRATIO, data=GASTURBINE)
residualFittedPlot(gas.lm)
gas.lm <- lm(HEATRATE ~ RPM + CPRATIO + RPM:CPRATIO, data=GASTURBINE)
residualFittedPlot(gas.lm)
partialPlot(gas.lm, variableName = "RPM")
partialPlot(gas.lm, variableName = "CPRATIO")
summary(gas.lm)
partialPlot(gas.lm, variableName = "RPM:CPRATIO")
fit <- gas.lm
variableName = "RPM:CPRATIO"
size=3
colour="deeppink"
xs <- fit$model[[variableName]]
xs
xs <- fit$model[[variableName]]
fit$model
fit$coefficients
names(fit$coefficients)[[variableName]]
names(fit$coefficients)[variableName]
ns <- names(fit$coefficients)
ns #
residualFittedPlot(gas.lm)
load("data/Exercises and Examples/HAWAII.Rdata")
View(HAWAII)
hawaii.lm <- lm(LEASEFEE ~ SIZE + I(SIZE^2), data=HAWAII)
summary(hawaii.lm)
residualFittedPlot(hawaii.lm)
partialPlot(hawaii.lm, variableName = "SIZE")
residualFittedPlot(hawaii.lm)
residualPlot(hawaii.lm, variableName = "SIZE")
residualPlot(hawaii.lm, variableName = "SIZE")
partialPlot(hawaii.lm, variableName = "SIZE")
residualFittedPlot(hawaii.lm)
residualPlot(hawaii.lm, variableName = "SIZE")
sample1 <- HAWAII[HAWAII$SIZE <= 12, ]
sample1
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
f <- as.formula("SALARY ~ EXP + I(EXP^2)")
HomoskedasticityRegressionTest(theFormula = f, data=SOCWORK, xName="EXP",xSplit=19)
formula(hawaii.lm)
HomoskedasticityRegressionTest(theFormula=formula(hawaii.lm), data=HAWAII,
xName = "SIZE", xSplit=12)
load("data/Exercises and Examples/APPLIANCE.Rdata")
View(APPLIANCE)
appliance.lm <- lm(BUYPROP ~ AGE, data=APPLIANCE)
summary(appliance.lm)
residualFittedPlot(appliance.lm)
partialPlot(appliance.lm, variableName = "AGE")
appliance.arcsin.lm <- lm(asin(sqrt(BUYPROP)) ~ AGE, data=APPLIANCE)
summary(appliance.arcsin.lm)
residualFittedPlot(appliance.arcsin.lm)
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
residualFittedPlot(arsenic.lm)
normalQQPlot <- function(fit, size=4, colour="dodgerblue"){
autoplot(fit, which=2, size=size, colour=colour)
}
normalQQPlot(arsenic.lm)
shapiro.test(arsenic.lm$residuals)
r <- residualFittedPlot(arsenic.lm) # nope, non-const variance!!!
n <- normalQQPlot(arsenic.lm) # nope, deviates strongly from normality
multiplot(r, n, cols=2)
multiplot(r, n, cols=2)
r
gas.lm <- lm(HEATRATE ~ RPM + CPRATIO + RPM:CPRATIO, data=GASTURBINE)
residualFittedPlot(gas.lm)
normalQQPlot(gas.lm)
shapiro.test(gas.lm$residuals)
partialPlot(gas.lm, variableName = "RPM")
partialPlot(gas.lm, variableName = "CPRATIO")
residualFittedPlot(hawaii.lm)
normalQQPlot(hawaii.lm)
shapiro.test(hawaii.lm$residuals)
pf(1.196, df1=5, df2=19,lower.tail=FALSE)
1 - pf(1.196, df1=5, df2=19,lower.tail=FALSE)
yhat <- lm(Y ~ X, data=EX8_1)
load("data/Exercises and Examples/EX8_1.Rdata")
library(ggplot2)
library(ggfortify)
yhat <- lm(Y ~ X, data=EX8_1)
summary(yhat)
yhat$residuals
residualFittedPlot(yhat)
autoplot(yhat)
normalQQPlot(yhat)
pf(0.21782, df1=5, df2=25-5)
pf(1.196, df1=5, df2=19)
pf(0.40406, df1=5, df2=25-5
)
pf(0.40406, df1=5, df2=25-5, lower.tail=F)
pt(10.35824, df=(25-1)-(5))
pt(10.35824, df=(25-1)-(5), lower.tail=F)
pt(2.79, df=(25-1)-(5), lower.tail=F)
normalQQPlot(arsenic.lm) # nope, deviates strongly from normality
cooks.distance(arsenic.lm)
c(cooks.distance(arsenic.lm))
cooks.distance(arsenic.lm)
