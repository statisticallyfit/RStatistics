runif(100, min=1, max=3)
?"sample"
sample(c(1,2,3), size=100, replace=TRUE)
sample(c(1,2,3), size=100, replace=F)
sample(c(1,2,3), size=100, replace=TRUE)
s <- sample(c(1,2,3), size=100, replace=TRUE)
s == 1
sum(s == 1)
sum(s == 2)
sum(s == 3)
s <- sample(c(1,2,3), size=100, replace=TRUE)
sum(s == 1)
sum(s == 2)
sum(s == 3)
s <- sample(c(1,2,3), size=100, replace=TRUE)
sum(s == 1)
sum(s == 2)
sum(s == 3)
s <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
sum(s == 'A')
sum(s == 'B')
sum(s == 'C')
doorsWithCarEachNight
doorsWithCarEachNight <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
personFirstChoiceEachNight <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
sum(personFirstChoiceEachNight == 'A')
sum(personFirstChoiceEachNight == 'B')
sum(personFirstChoiceEachNight == 'C')
df <- data.frame(CarDoor=doorsWithCarEachNight, PersonChoice=personFirstChoiceEachNight)
df
head(df)
doorsWithCarEachNight == personFirstChoiceEachNight
agreements <- doorsWithCarEachNight == personFirstChoiceEachNight
probWinIfNoSwitch <- sum(agreements)
probWinIfNoSwitch <- sum(agreements) / length(agreements)
probWinIfSwitch <- (length(agreements) - sum(agreements)) / length(agreements)
probWinIfSwitch
probWinIfNoSwitch
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
popn.size =  1000000  # population of size 1 million
clear #
popn.size =  1000000  # population of size 1 million
pd  = .001 			  # probability of an individual having the disease
pdt = .95             #probability of an individual having the disease testing positive
pct = .10             # probability of an individual not having the disease testing positive.
?sample
popn = sample(c("D","C"), size=popn.size, replace=TRUE, prob=c(pd,1-pd))
popn #
popn[1:60]                ## check the first 60 "people"
sum(popn == "D")   ## count how many people with the disease
test = function(x) {
if (x == "D")
sample(c("P","N"), size=1, prob=c(pdt,1 - pdt))
else
sample(c("P","N"), size=1, prob=c(pct,1 - pct))
}
popn.test = mapply(test, popn,USE.NAMES=FALSE)
popn.test[1:40]
popn.pos = popn[popn.test == "P"]   ##  the number testing positive
print(sum(popn.pos == "D")/length(popn.pos))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_FalsePositive.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_FalsePositive.R', echo=TRUE)
car.door <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
first.choice <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
confusion.table <- table(car.door, first.choice)
confusion.table
agree <- sum(diag(confusion.table))
agree
probWinIfSwitch <- agree / sum(confusion.table); probWinIfSwitch
probWinIfNoSwitch <- 1 - probWinIfSwitch; probWinIfNoSwitch
sim.results <- numeric(0) # null vector to collect results
for (i in 1:1000) {
# number of 1's in sample of 21 (0,1)'s
num.condition1 <- sum(sample(0:1, size=21, replace=TRUE))
sim.results <- c(sim.results, num.condition1) # accumulate incidences of 1's
}
table(sim.results) # frequency of counts out of 21
sim.results
table(sim.results) # frequency of counts out of 21
sum(sim.results == 3)
sum(sim.results == 10)
m = 1:100
sum(m % 2 == 0)
6 % 2
7 %% 3
6 %% 3
sum(m %% 2 == 0)
load("data/Exercises and Examples/WATEROIL.Rdata")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=FALSE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=FALSE)
load("data/Exercises and Examples/WATEROIL.Rdata")
View(WATEROIL)
VOLUME*SALINITY + VOLUME*SURFAC, data=WATEROIL)
wateroil.interact.lm <- lm(VOLTAGE ~ VOLUME + SALINITY + SURFAC +
VOLUME*SALINITY + VOLUME*SURFAC, data=WATEROIL)
summary(wateroil.interact.lm)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=FALSE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=FALSE)
load("data/Exercises and Examples/AEROBIC.Rdata")
names(wateroil.interact.lm$model)
wateroil.interact.lm$coefficients
wateroil.interact.lm$coefficients[[-1]]
cs = wateroil.interact.lm$coefficients
cs[[-1]]
cs[-1]
as.numeric(cs[-1])
as.numeric(wateroil.interact.lm$coefficients[-1])
round(as.numeric(wateroil.interact.lm$coefficients[-1]), 4)
wateroil.interact.lm$coefficients[1]
wateroil.interact.lm$coefficients[[1]]
slopes = round(as.numeric(wateroil.interact.lm$coefficients[-1]), 4)
slopes < 0
signs = if(slopes < 0) "-" else " + "
signs = if(slopes < 0) c(" - ") else c(" + ")
signs = c()
signs = if(slopes < 0) c(signs, " - ") else c(signs, " + ")
mapply(ifelse(slopes < 0), " - ", " + ")
mapply(ifelse(slopes < 0, " - ", " + "), )
mapply(ifelse(slopes < 0, " - ", " + "))
mapply(ifelse( < 0, " - ", " + "), slopes)
slopesSign = c() #if(slopes < 0) " - " else " + "
for (i in 1:length(slopes)) {
if(slopes(i) < 0)
slopesSign = c(slopesSign, " - ")
else
slopesSign = c(slopesSign, " + ")
}
lopesSign = c() #if(slopes < 0) " - " else " + "
for (i in 1:length(slopes)) {
if(slopes[i] < 0)
slopesSign = c(slopesSign, " - ")
else
slopesSign = c(slopesSign, " + ")
}
slopesSign = c() #if(slopes < 0) " - " else " + "
for (i in 1:length(slopes)) {
if(slopes[i] < 0)
slopesSign = c(slopesSign, " - ")
else
slopesSign = c(slopesSign, " + ")
}
slopesSign
length(slopesSign)
slopesSign = c() #if(slopes < 0) " - " else " + "
newSlopes = c()
for (i in 1:length(slopes)) {
if(slopes[i] < 0){
slopesSign = c(slopesSign, " - ")
newSlopes = c(newSlopes, abs(slopes[i]))
}
else{
slopesSign = c(slopesSign, " + ")
newSlopes = c(newSlopes, slopes[i])
}
}
newSlopes
slopesSign
wateroil.interact.lm
rbind(slopesSign, newSlopes)
c(rbind(slopesSign, newSlopes))
paste(c(rbind(slopesSign, newSlopes)), sep="")
p = paste(c(rbind(slopesSign, newSlopes)), sep="")
length(p)
es = c(rbind(slopesSign, newSlopes))
es #
es[1]
paste(es)
paste(es, collapse='')
slopeLine <- paste(c(rbind(slopesSign, newSlopes)), collapse = '')
slopeLine
slopeLine <- paste(intercept, c(rbind(slopesSign, newSlopes)), collapse = '')
intercept = round(fit$coef[[1]], 4)
fit = wateroil.interact.lm
intercept = round(fit$coef[[1]], 4)
intercept
slopeLine <- paste(intercept, c(rbind(slopesSign, newSlopes)), collapse = '')
slopeLine
slopeLine <- paste(intercept, paste(c(rbind(slopesSign, newSlopes)), collapse = ''),
sep="")
slopeLine
fit$model
as.formula(fit)
as.formula(fit$model)
slopeLine
c(rbind(slopesSign, newSlopes))
numXs = length(fit$coefficients) - 1
numXs
for (i in 1:numXs){}
}
xStrs = c()
for(i in 1:numXs){
xStrs(i) = paste("x", i, sep="")}
xStrs = c()
for(i in 1:numXs){
xStrs = c(xStrs, paste("x", i, sep=""))}
xStrs
c(rbind(slopesSign, newSlopes, xStrs))
paste(c(rbind(slopesSign, newSlopes, xStrs)), collapse='')
numXs = length(fit$coefficients) - 1
xStrings = c()
for(i in 1:numXs){
xStrings = c(xStrings, paste("x", i, sep=""))
}
allCoefsWithVars <- paste(intercept,
paste(c(rbind(slopesSign, newSlopes, xStrings)),
collapse = ''), sep="")
allCoefsWithVars
theFormula <- paste("y = ", allCoefsWithVars, sep="")
theFormula
source('/datascience/projects/statisticallyfit/github/R/RStatistics/PLOTTING.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/PLOTTING.R', echo=FALSE)
ggplotRegression(wateroil.interact.lm)
View(AEROBIC)
g <- ggplot(AEROBIC, aes(x = MAXOXY, y = IGG))
g + geom_point(shape=19, color="dodgerblue", size=3) +
labs(x="Oxygen", y="IGG") +
stat_smooth(method="lm", col="red", lwd=1)
aeorobic.quadratic.lm <- lm(IGG ~ MAXOXY + MAXOXY*MAXOXY, data=AEROBIC)
aeorobic.quadratic.lm <- lm(IGG ~ MAXOXY + MAXOXY*MAXOXY, data=AEROBIC)
summary(aeorobic.quadratic.lm)
aeorobic.quadratic.lm <- lm(IGG ~ MAXOXY + MAXOXY*MAXOXY, data=AEROBIC)
summary(aeorobic.quadratic.lm)
aeorobic.quadratic.lm <- lm(IGG ~ MAXOXY + MAXOXY^2, data=AEROBIC)
summary(aeorobic.quadratic.lm)
c(1,2,3) ^ 2
AEROBIC$MAXOXY_2 <- AEROBIC$MAXOXY^2
aeorobic.quadratic.lm <- lm(IGG ~ MAXOXY + MAXOXY_2, data=AEROBIC)
summary(aeorobic.quadratic.lm)
range(AEROBIC$MAXOXY)
plot(AEROBIC$MAXOXY, AEROBIC$IGG)
abline(aeorobic.quadratic.lm)
load("data/Exercises and Examples/CARP.Rdata")
View(CARP)
carp.quadratic.lm <- lm(ENE ~ WEIGHT + WEIGHT^2, data=CARP)
summary(carp.quadratic.lm)
carp.quadratic.lm <- lm(ENE ~ WEIGHT + WEIGHT*WEIGHT, data=CARP)
CARP$WEIGHT_2 <- CARP$WEIGHT^2
carp.quadratic.lm <- lm(ENE ~ WEIGHT + WEIGHT_2, data=CARP)
summary(carp.quadratic.lm)
g <- ggplot(AEROBIC, aes(x = WEIGHT, y = ENE))
g + geom_point(shape=19, color="dodgerblue", size=3) +
labs(x="Weight", y="Nitrogen Excretion (ENE)") +
stat_smooth(method="lm", col="red", lwd=1)
g <- ggplot(CARP, aes(x = WEIGHT, y = ENE))
g + geom_point(shape=19, color="dodgerblue", size=3) +
labs(x="Weight", y="Nitrogen Excretion (ENE)") +
stat_smooth(method="lm", col="red", lwd=1)
g <- ggplot(CARP, aes(x = WEIGHT_2, y = ENE))
g + geom_point(shape=19, color="dodgerblue", size=3) +
labs(x="Weight", y="Nitrogen Excretion (ENE)") +
stat_smooth(method="lm", col="red", lwd=1)
g <- ggplot(CARP, aes(x = WEIGHT, y = ENE))
g + geom_point(shape=19, color="dodgerblue", size=3) +
labs(x="Weight", y="Nitrogen Excretion (ENE)") +
stat_smooth(method="lm", col="red", lwd=1)
