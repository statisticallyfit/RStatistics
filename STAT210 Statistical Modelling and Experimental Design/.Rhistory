mat <- confint(fit, level=level)
df <- data.frame(mat)
rownames(df) <- rownames(mat)
colnames(df) <- colnames(mat)
slopeCI <- function(fit, level=0.95) {
mat <- confint(fit, level=level)
df <- data.frame(mat)
rownames(df) <- rownames(mat)
colnames(df) <- colnames(mat)
return(df)
}
slopeChart <- slopeCI(fit, level=level)
slopeChart
slopeChart[1]
slopeChart[1,1]
round(slopeChart, 4)
df <- data.frame(cbind(names(fit$coef),
names(fit$model),
all.units), stringsAsFactors = FALSE)
colnames(df) <- c("PredictorNames", "AllNames", "Units")
df #
slope.cis <- round(slopeCI(fit, level=level), 4)
cbind(df, slope.cis)
mat #
mat[,1]
as.numeric(mat[,1])
slopeCI <- function(fit, level=0.95) {
mat <- confint(fit, level=level)
df <- data.frame(as.numeric(mat[,1]), as.numeric(mat[,2]))
colnames(df) <- colnames(mat)
return(df)
}
df #
mat <- confint(fit, level=level)
df <- data.frame(as.numeric(mat[,1]), as.numeric(mat[,2]))
df
data.frame(mat)
colnames(df) <- colnames(mat)
df
slopeCI <- function(fit, level=0.95) {
mat <- confint(fit, level=level)
df <- data.frame(as.numeric(mat[,1]), as.numeric(mat[,2]))
colnames(df) <- colnames(mat)
return(df)
}
slope.cis <- round(slopeCI(fit, level=level), 4)
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", slope.cis[1,1], " and ",
slope.cis[1,2], ".", sep="")
interp.B0
df <- data.frame(cbind(names(fit$coef),
names(fit$model),
all.units), stringsAsFactors = FALSE)
colnames(df) <- c("PredictorNames", "AllNames", "Units")
df
cbind(df, slope.cis)
df <- cbind(df, slope.cis)
df
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", slope.cis[1,1], " and ",
slope.cis[1,2], " ", df$Units[1], ".", sep="")
allInterps <- c(interp.B0)
slope.cis
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", df$`2.5 %`[1], " and ",
df$`97.5 %`[1], " ", df$Units[1], ".", sep="")
allInterps <- c(interp.B0)
for(i in 2:nrow(slope.cis)){
change <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0) "decreases" else "increases"
newLower <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`2.5 %`[i])  else df$`2.5 %`[i]            }
newUpper <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`97.5 %`[i]) else df$`97.5 %`[i]
newInterp <- paste("With ",level*100,"% confidence, when all other predictors
are held fixed, for every 1 ", df$Units[i], " increase in (x",
i, ") ", df$AllNames[i], ", the mean response (y) ",
df$AllNames[1], " ", change, " between ", newLower, " and ",
newUpper, " ", df$Units[1], ".", sep="")
allInterps <- c(allInterps, newInterp)
}
for(i in 2:nrow(slope.cis)){
change <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0) "decreases" else "increases"
newLower <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`2.5 %`[i])  else df$`2.5 %`[i]
newUpper <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`97.5 %`[i]) else df$`97.5 %`[i]
newInterp <- paste("With ",level*100,"% confidence, when all other predictors
are held fixed, for every 1 ", df$Units[i], " increase in (x",
i, ") ", df$AllNames[i], ", the mean response (y) ",
df$AllNames[1], " ", change, " between ", newLower, " and ",
newUpper, " ", df$Units[1], ".", sep="")
allInterps <- c(allInterps, newInterp)
}
df
df$INTERPRETATION <- allInterps
allInterps
slope.cis
df
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", df$`2.5 %`[1], " and ",
df$`97.5 %`[1], " ", df$Units[1], ".", sep="")
allInterps <- c(interp.B0)
for(i in 2:nrow(df)){
change <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0) "decreases" else "increases"
newLower <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`2.5 %`[i])  else df$`2.5 %`[i]
newUpper <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`97.5 %`[i]) else df$`97.5 %`[i]
newInterp <- paste("With ",level*100,"% confidence, when all other predictors
are held fixed, for every 1 ", df$Units[i], " increase in (x",
i, ") ", df$AllNames[i], ", the mean response (y) ",
df$AllNames[1], " ", change, " between ", newLower, " and ",
newUpper, " ", df$Units[1], ".", sep="")
allInterps <- c(allInterps, newInterp)
}
df
allInterps
df$INTERPRETATION <- allInterps
df
df <- data.frame(cbind(names(fit$coef),
names(fit$model),
all.units), stringsAsFactors = FALSE)
colnames(df) <- c("PredictorNames", "AllNames", "Units")
df <- cbind(df, slope.cis)
# Interpretations --------------------------------------------------
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", df$`2.5 %`[1], " and ",
df$`97.5 %`[1], " ", df$Units[1], ".", sep="")
allInterps <- c(interp.B0)
for(i in 2:nrow(df)){
change <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0) "decreases" else "increases"
newLower <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`2.5 %`[i])  else df$`2.5 %`[i]
newUpper <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`97.5 %`[i]) else df$`97.5 %`[i]
newInterp <- paste("With ",level*100,"% confidence, when all other predictors ",
"are held fixed, for every 1 ", df$Units[i], " increase in (x",
i, ") ", df$AllNames[i], ", the mean response (y) ",
df$AllNames[1], " ", change, " between ", newLower, " and ",
newUpper, " ", df$Units[1], ".", sep="")
allInterps <- c(allInterps, newInterp)
}
df$INTERPRETATION <- allInterps
df
simpleDf <- data.frame(PredictorNames=df$PredictorNames)
simpleDf <- data.frame(cbind(simpleDf, slope.cis))
simpleDf
simpleDf <- data.frame(cbind(df$PredictorNames, df$`2.5 %`, df$`97.5 %`,
df$INTERPRETATION))
colnames(df)
colnames(simpleDf) <- c("PredictorNames", colnames(df)[4],colnames(df)[5],
"INTERPRETATION")
simpleDf
interpret.SlopeCI <- function(fit, level =0.95,
x.units=c(), y.unit="unit")  {
# Making units and including the y.unit -------------------------
if(length(x.units) == 0){
x.units <- list()
x.units <- replicate(length(fit$coeff)-1, "unit")
}
all.units <- c(y.unit, x.units)
slope.cis <- round(slopeCI(fit, level=level), 4)
# Making the data.frame of information
df <- data.frame(cbind(names(fit$coef),
names(fit$model),
all.units), stringsAsFactors = FALSE)
colnames(df) <- c("PredictorNames", "AllNames", "Units")
df <- cbind(df, slope.cis)
# Interpretations --------------------------------------------------
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", df$`2.5 %`[1], " and ",
df$`97.5 %`[1], " ", df$Units[1], ".", sep="")
allInterps <- c(interp.B0)
for(i in 2:nrow(df)){
change <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0) "decreases" else "increases"
newLower <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`2.5 %`[i])  else df$`2.5 %`[i]
newUpper <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`97.5 %`[i]) else df$`97.5 %`[i]
newInterp <- paste("With ",level*100,"% confidence, when all other predictors ",
"are held fixed, for every 1 ", df$Units[i], " increase in (x",
i, ") ", df$AllNames[i], ", the mean response (y) ",
df$AllNames[1], " ", change, " between ", newLower, " and ",
newUpper, " ", df$Units[1], ".", sep="")
allInterps <- c(allInterps, newInterp)
}
df$INTERPRETATION <- allInterps
simpleDf <- data.frame(cbind(df$PredictorNames, df$`2.5 %`, df$`97.5 %`,
df$INTERPRETATION))
colnames(simpleDf) <- c("PredictorNames", colnames(df)[4],colnames(df)[5],
"INTERPRETATION")
return(simpleDf)
}
View(ASWELLS)
interpret.SlopeCI(arsenic.lm, x.units = c("degrees", "degrees", "feet"))
load("data/Exercises and Examples/ASWELLS.Rdata")
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
summary(arsenic.lm)
interpret.SlopeCoeffs(arsenic.lm)
interpret.SlopeCoeffs <- function(fit, level=0.95, x.units=c(), y.unit="unit") {
# Making units and including the y.unit -------------------------
if(length(x.units) == 0){
x.units <- list()
x.units <- replicate(length(fit$coeff)-1, "unit")
}
all.units <- c(y.unit, x.units)
# Making the data.frame of information
df <- data.frame(cbind(names(fit$model),
round(fit$coeff,4),
all.units), stringsAsFactors = FALSE)
colnames(df) <- c("Names", "Coefficients", "Units")
df$Coefficients <- as.numeric(df$Coefficients)
# Interpretations --------------------------------------------------
# Making interpretation for intercept
intrp.B0 <- paste("We are ", level*100, "% confident that when all predictors are ",
"set to 0, the mean value of ",
df$Names[1], " is ", df$Coef[1], " ", df$Units[1],".", sep="")
# Now making interpretations for all other predictors
allSlopeInterps <- c(intrp.B0)
for(i in 2:nrow(df)){
change <- if(df$Coefficients[i] < 0) "decreases" else "increases"
newCoef <- abs(df$Coefficients[i])
newInterp <- paste("We are ", level*100, "% confident that when all other ",
"predictors are held constant,",
" for every 1 ", df$Units[i], " increase in ",
df$Names[i], " (x", i,"), mean ",
df$Names[1], " ", change, " by ", newCoef,
" ", df$Units[1], ".", sep=""
)
# Accumulate the interpretation
allSlopeInterps <- c(allSlopeInterps, newInterp)
}
df$Interpretations <- allSlopeInterps
simpleDf <- data.frame(PREDICTORS=names(fit$coef), INTERPRETATIONS=df$Interpretations)
return(simpleDf)
}
# TODO do rest for multiple regression
interpret.SlopeCI <- function(fit, level =0.95,
x.units=c(), y.unit="unit")  {
# Making units and including the y.unit -------------------------
if(length(x.units) == 0){
x.units <- list()
x.units <- replicate(length(fit$coeff)-1, "unit")
}
all.units <- c(y.unit, x.units)
slope.cis <- round(slopeCI(fit, level=level), 4)
# Making the data.frame of information
df <- data.frame(cbind(names(fit$coef),
names(fit$model),
all.units), stringsAsFactors = FALSE)
colnames(df) <- c("PredictorNames", "AllNames", "Units")
df <- cbind(df, slope.cis)
# Interpretations --------------------------------------------------
interp.B0 <- paste("With ",level*100,"% confidence, when all predictors are zero, ",
"the mean ", df$AllNames[1], " is between ", df$`2.5 %`[1], " and ",
df$`97.5 %`[1], " ", df$Units[1], ".", sep="")
allInterps <- c(interp.B0)
for(i in 2:nrow(df)){
change <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0) "decreases" else "increases"
newLower <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`2.5 %`[i])  else df$`2.5 %`[i]
newUpper <- if(df$`2.5 %`[i] < 0 && df$`97.5 %`[i] < 0)
abs(df$`97.5 %`[i]) else df$`97.5 %`[i]
newInterp <- paste("With ",level*100,"% confidence, when all other predictors ",
"are held fixed, for every 1 ", df$Units[i], " increase in (x",
i, ") ", df$AllNames[i], ", the mean response (y) ",
df$AllNames[1], " ", change, " between ", newLower, " and ",
newUpper, " ", df$Units[1], ".", sep="")
allInterps <- c(allInterps, newInterp)
}
df$INTERPRETATION <- allInterps
simpleDf <- data.frame(cbind(df$PredictorNames, df$`2.5 %`, df$`97.5 %`,
df$INTERPRETATION))
colnames(simpleDf) <- c("PredictorNames", colnames(df)[4],colnames(df)[5],
"INTERPRETATION")
return(simpleDf)
}
interpret.SlopeCoeffs(arsenic.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
interpret.SlopeCoeffs(arsenic.lm)
interpret.SlopeCI(arsenic.lm, x.units = c("degrees", "degrees", "feet"))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
interpret.SlopeCI(arsenic.lm, x.units = c("degrees", "degrees", "feet"))
lowestLatitude <- range(ASWELLS$LATITUDE)[1]; lowestLatitude
highestLongitude <- range(ASWELLS$LONGITUDE)[2]; highestLongitude
lowestDepth <- range(ASWELLS$DEPTHFT, na.rm=TRUE)[1]; lowestDepth
meanCI(arsenic.lm, x.values=c(lowestLatitude, highestLongitude, lowestDepth))
predictCI(arsenic.lm, x.values=c(lowestLatitude, highestLongitude, lowestDepth))
meanCI <- function(fit, x.values=c(), level=0.95){
predictorNames <- names(fit$model)[-1]
df <- data.frame(rbind(x.values))
rownames(df) <- ""
colnames(df) <- predictorNames
return(predict(fit, new = df, interval="confidence", level=level))
}
fit
fit <- arsenic.lm
level=0.95
mean.cis <- round(meanCI(fit, x.values=x.values, level=level), 4)
x.values <- c(lowestLatitude, highestLongitude, lowestDepth)
meanCI(arsenic.lm, x.values=x.values)
mean.ci <- round(meanCI(fit, x.values=x.values, level=level), 4)
class(mean.ci)
mat <- round(meanCI(fit, x.values=x.values, level=level), 4)
mean.ci <- data.frame(mat)
colnames(mean.ci) <- colnames(mat)
mean.ci
newLower <- if(mean.ci$lwr < 0 && mean.ci$upr < 0) abs(mean.ci$lowr) else mean.ci$lwr
newLower
bothNegative <- mean.ci$lwr < 0 && mean.ci$upr < 0
change <- if(bothNegative) "decreases" else "increases"
newLower <- if(bothNegative) abs(mean.ci$lwr) else mean.ci$lwr
newUpper <- if(bothNegative) abs(mean.ci$upr) else mean.ci$upr
change
newLower
newUpper
values <- data.frame(PredictorNames=names(fit$coef), Values=x.values)
names(fit$coef)
x.values
values <- data.frame(PredictorNames=names(fit$coef)[-], Values=x.values)
values <- data.frame(PredictorNames=names(fit$coef)[-1], Values=x.values)
values #
mean.ci
cbind(values, mean.ci)
rbind(values, mean.ci)
list(values, mean.ci)
c(values, mean.ci)
data.frame(c(values, mean.ci))
df <- data.frame(c(values, mean.ci))
df$fit <- c(df$fit, replicate(nrow(df)-1, "-"))
replicate(nrow(df)-1,"-")
rbind(names(fit$coef)[-1], x.values)
df <- data.frame(rbind(names(fit$coef)[-1], x.values))
df <- data.frame(rbind(names(fit$coef)[-1], as.numeric(x.values)))
df #
colnames(df) <- "PredictorNames"
df #
table(df)
df #
colnames(df) <- c("PredictorNames", "", "")
df #
df <- data.frame(rbind(names(fit$coef)[-1], as.numeric(x.values)))
colnames(df) <- c("PredictorNames", "", "")
df #
colnames(df) <- ""
df #
colnames(df) <- c("PredictorNames", "")
df #
colnames(df) <- c("PredictorNames", "", "")
df #
colnames(df) <- ""
df #
rbind(df, mean.ci)
mean.ci
list(df, mean.ci    )
cbind(df, mean.ci)
cbind(x.values, mean.ci)
rbind(x.values, mean.ci)
c(mean.ci)
cbind(x.values, c(mean.ci))
df #
cbind(rbind(names(fit$coef)[-1]), c(mean.ci))
rbind(x.values)
rbind(x.values, mean.ci)
rbind(x.values, c(mean.ci))
cbind(rbind(x.values), c(mean.ci))
df <- data.frame(rbind(x.values))
df #
rownames(df) <- ""
df #
cbind(df, mean.ci)
df <- data.frame(rbind(x.values))
colnames(df) <- names(fit$coefficients)[-1]
df
df <- cbind(df, mean.ci)
df
rownames(df) <- ""
df
class(df)
yName <- names(fit$model)[1]
colnames(mean.ci) <- c(paste(yName,"ValueAtXs"), "Lower", "Upper")
mean.ci
colnames(mean.ci) <- c(paste(yName,"ValueAtXs",sep=""), "Lower", "Upper")
mean.ci
colnames(mean.ci) <- c(paste(yName,"Value",sep=""), "Lower", "Upper")
yName <- paste(names(fit$model)[1], "Value", sep="")
lowerName <- paste((1-level)/2 * 100, "%")
upperName <- paste(((1-level)/2 + level)*100, "%")
colnames(mean.ci) <- c(yName, lowerName, upperName)
mean.ci
df <- data.frame(rbind(x.values))
colnames(df) <- names(fit$coefficients)[-1]
df <- cbind(df, mean.ci)
rownames(df) <- ""
df
yName <- names(fit$model)[1]
xdf <- data.frame(rbind(x.values))
xdf
colnames(xdf) <- names(fit$coefficients)[-1]
xdf #
for(i in 1:ncol(xdf)){
}
elements <- ""
for(i in 1:ncol(xdf)){
}
names(xdf)
names(xdf)[1]
for(i in 1:ncol(xdf)){
}
xdf[1]
xdf[[1]]
for(i in 1:ncol(xdf)){
elements <- paste(elements, ", ", names(xdf)[i], "=", xdf[[i]], sep="")
}
elements
elements[-3]
elements[1]
elements[[-3]]
2 != 3
elements
substr(elements, 1,3)
substr(elements, 3, length(elements))
length(elements)
nrow(elements)
class(elements)
length(elements[1])
length(elements[[1]])
nchar(elements)
nchar("hi there")
substr(elements, 3, char(elements))
substr(elements, 3, nchar(elements))
xValSentence <- ""
for(i in 1:ncol(xdf)){
xValSentence <- paste(xValSentence, ", ", names(xdf)[i], "=", xdf[[i]], sep="")
}
xValSentence <- substr(xValSentence, 3, nchar(xValSentence))
xValSentence
paste("We are ",level*100, "% confident that the mean ",yName," (E(y)) ",
"for all predictors at the values: ", xValSentence, ", is between ",
df$`2.5 %`, " and ", df$`97.5 %`, ".", sep="")
paste("We are ",level*100, "% confident that the mean ",yName," (E(y)) ",
"for all predictors at the values: ", xValSentence, ", is between ",
df$`2.5 %`, " and ", df$`97.5 %`, " ", y.unit, ".", sep="")
df #
list(Info=df, Interpretation=interp)
y.unit="unit"
interp <- paste("We are ",level*100, "% confident that the mean ",yName," (E(y)) ",
"for all predictors at the values: ", xValSentence, ", is between ",
df$`2.5 %`, " and ", df$`97.5 %`, " ", y.unit, ".", sep="")
list(Info=df, Interpretation=interp)
list(Info=df, Interpretation=c(interp))
data.frame(Info=df, Interp=interp)
data.frame(df, Interp=interp)
rbind(df, interp)
cbind(df, interp)
class(cbind(df, interp))
data.frame(cbind(df, interp))
simpleDf <- cbind(df, INTERPRETATION=interp)
simpleDf
rownames(simpleDf) <- ""
simpleDf
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 4 - Multiple Linear Regression/exercise_23_arsenicinwells.R', echo=TRUE)
interpret.MeanCI(arsenic.lm, x.values=x.values, x.units=c("degrees", "degrees", "feet"))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
interpret.MeanCI(arsenic.lm, x.values=x.values, x.units=c("degrees", "degrees", "feet"))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
interpret.PredictCI(arsenic.lm, x.values = x.values, x.units = c("degrees","degrees","feet"))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
interpret.PredictCI(arsenic.lm, x.values = x.values, x.units = c("degrees","degrees","feet"))
xdf #
xdf <- data.frame(rbind(x.values))
xdf #
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
interpret.PredictCI(arsenic.lm, x.values = x.values, x.units = c("degrees","degrees","feet"))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=TRUE)
interpret.MeanCI(arsenic.lm, x.values=x.values, x.units=c("degrees", "degrees", "feet"))
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/GFCLOCKS.Rdata")
clock.lm <- lm(PRICE ~ AGE + NUMBIDS, data=GFCLOCKS)
summary(clock.lm)
# part a)
interpret.MeanCI(clock.lm, x.values=c(150,10))
interpret.MeanCI(clock.lm, x.values=c(150,10), x.units=c("year", "bidders"))
predictCI(clock.lm, x.values=c(150, 10))
meanCI(clock.lm, x.values=c(150, 10))
interpret.PredictCI(clock.lm, x.values=c(150,10), x.units=c("year", "bidders"))
predictCI(clock.lm, x.values=c(50, 2))
range(GFCLOCKS$AGE)
range(GFCLOCKS$NUMBIDS)
clock.interact.lm <- lm(PRICE ~ AGE + NUMBIDS, AGE*NUMBIDS, data=GFCLOCKS)
clock.interact.lm <- lm(PRICE ~ AGE + NUMBIDS, AGE_BID, data=GFCLOCKS)
View(GFCLOCKS)
1235 * 13
127*13
115*12
clock.interact.lm <- lm(PRICE ~ AGE + NUMBIDS, AGE_BID, data=GFCLOCKS)
clock.interact.lm <- lm(PRICE ~ AGE + NUMBIDS + AGE_BID, data=GFCLOCKS)
summary(clock.lm)
clock.interact.lm <- lm(PRICE ~ AGE + NUMBIDS + AGE_BID, data=GFCLOCKS)
summary(clock.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=FALSE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/INTERPRET.R', echo=FALSE)
load("data/Exercises and Examples/GFCLOCKS.Rdata")
clock.interact.lm <- lm(PRICE ~ AGE + NUMBIDS + AGE_BID, data=GFCLOCKS)
summary(clock.lm)
summary(clock.interact.lm)
(0.9539)/3
(1-0.9539)/28
((0.9539)/3)/((1-0.9539)/28)
