source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 5 - Principles of Model Building/Lecture_Chapter5_Potato.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A4/Question1.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 12 - ANOVA for Experimental Design/Lecture_Chapter12_Factorial_Tulips.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 12 - ANOVA for Experimental Design/ContrastsReading.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/DATA.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 12 - ANOVA for Experimental Design/ContrastsReading.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_7_RatsPlants_Contrasts/Question2_PlantGrowthContrasts.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_7_RatsPlants_Contrasts/Question2_PlantGrowthContrasts.R', echo=TRUE)
anova(plant.factorial.lm)
plot(eff.crab)
print(eff.crab)
plot(eff.pgr)
plot(eff.crab)
with(potatoData, interaction.plot(x.factor = OXYGEN, trace.factor = BAC,
response=ROT))
plot(eff.pgr)
summary(final.lm)
interaction.ABC.plot(response=ROT, x.factor = TEMP, groups.factor = BAC,
trace.factor = OXYGEN, data=potatoData)
anova(global.lm)
summary(global.lm)
anova(nothreeway.lm)
summary(nothreeway.lm)
anova(final.lm)
summary(final.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A4/Question3.R', echo=TRUE)
mean(subset(weightData, Supplement=="1")$WeightGain)
mean(subset(weightData, Supplement=="2")$WeightGain)
mean(subset(weightData, Supplement=="3")$WeightGain)
weightData
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 12 - ANOVA for Experimental Design/Example_12.7_CostEngineerJob.R', echo=TRUE)
with(COSTENG, tapply(COST, INDEX=JOB, mean))
with(COSTENG, interaction.plot(response=COST, x.factor=ENGINEER, trace.factor = JOB))
par(mfrow=c(1,1))
with(COSTENG, interaction.plot(response=COST, x.factor=ENGINEER, trace.factor = JOB))
allEffects(engjob.lm)
plot(allEffects(engjob.lm))
anova(engjob.lm)
summary(engjob.lm)
mean(subset(weightData, Supplement=="1")$WeightGain)
mean(subset(weightData, Supplement=="2")$WeightGain)
mean(subset(weightData, Supplement=="3")$WeightGain)
allEffects(complete.weight.lm)
eff.weight <- allEffects(complete.weight.lm)
plot(eff.weight)
complete.weight.lm <- lm(WeightGain ~ DietaryLitter + Supplement, data=weightData)
# Do the data indicate difference across the dietary supplements?
eff.weight <- allEffects(complete.weight.lm)
plot(eff.weight)
weightData
is.factor(weightData$DietaryLitter)
weightData$DietaryLitter <- factor(weightData$DietaryLitter)
weightData$DietaryLitter
weightData$Supplement <- factor(weightData$Supplement)
complete.weight.lm <- lm(WeightGain ~ DietaryLitter + Supplement, data=weightData)
eff.weight <- allEffects(complete.weight.lm)
summary(complete.weight.lm)
anova(complete.weight.lm)
eff.weight <- allEffects(complete.weight.lm)
plot(eff.weight)
weightData <- data.frame(Supplement=c(rep("1", 5), rep("2", 5), rep("3", 5)),
Litter=rep(1:5, 3),
WeightGain=c(28.7, 30.6, 27.2, 28.6, 31.9,
30.7, 34.5, 32.6, 34.4, 30.7,
25.4, 26.3, 27.5, 24.3, 25.8))
weightData$Litter <- factor(weightData$Litter)
weightData$Supplement <- factor(weightData$Supplement)
complete.weight.lm <- lm(WeightGain ~ Litter + Supplement, data=weightData)
eff.weight <- allEffects(complete.weight.lm)
plot(eff.weight)
print(eff.weight)
summary(complete.weight.lm)
anova(complete.weight.lm)
supp12v3 = C(weightData$Supplement, contr=c(1,1,-2), 1)
supp1v2 = C(weightData$Supplement, contr=c(1,-1,0),  1)
supp.testDiffs.lm <- lm(WeightGain ~ supp12v3 + supp1v2, data=weightData)
anova(supp.testDiffs.lm) # yess, all significant.
summary(supp.testDiffs.lm) #pvalues are the same for both tables since
suppContrasts <- getContrastMatrix(supp.testDiffs.lm); suppContrasts
t(suppContrasts) %*% suppContrasts
par(mfrow=c(2,2))
plot(complete.weight.lm, which=1:4)
par(mfrow=c(1,2))
plot(complete.weight.lm, which=5:6, cook.levels = c(0.1, 0.2, 0.5), add.smooth = FALSE)
par(mfrow=c(2,2))
plot(complete.weight.lm, which=c(1,2,3,5))
par(mfrow=c(1,2))
plot(complete.weight.lm, which=5:6, cook.levels = c(0.1, 0.2, 0.5), add.smooth = FALSE)
par(mfrow=c(2,2))
plot(complete.weight.lm, which=c(1,2,3,5))
anova(supp.testDiffs.lm) # yess, all significant.
summary(supp.testDiffs.lm) #pvalues are the same for both tables since
summary(complete.weight.lm)
plot(supp.testDiffs.lm, which=c(1,2))
par(mfrow=c(1,2))
plot(complete.weight.lm, which=c(1,2))
plot(supp.testDiffs.lm, which=c(1,2))
plot(complete.weight.lm, which=c(1,2))
plot(supp.testDiffs.lm, which=c(3,5))
plot(complete.weight.lm, which=c(3, 5))
summary(supp.testDiffs.lm)
par(mfrow=c(1,2))
plot(supp.testDiffs.lm, which=c(1,2))
plot(supp.testDiffs.lm, which=c(3,5))
shapiro.test(supp.testDiffs.lm$residuals)
plot(supp.testDiffs.lm, which=c(3,5), cook.levels = c(0.2, 0.5, 1))
influence.leverageValues <- function(fit){
hs <- hatvalues(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
h.mean <- 2*(k+1)/n
isInfluential <- hs > h.mean
return(data.frame(InfluentialPoints=hs, CutOffInflMean=h.mean,
IsInfluential=isInfluential))
}
influence.cooksDistances <- function(fit) {
cks <- cooks.distance(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
Fcrit <- qf(0.5, df1=k+1, df2=n-k-1)
isInfluential <- cks > Fcrit
return(data.frame(CooksPoints=cks, CutOffFcrit=Fcrit,
IsInfluential=isInfluential))
}
leverageInfo <- influence.leverageValues(supp.testDiffs.lm)
leverageInfo
which(leverageInfo$IsInfluential) # So observation 14 is influential
cookInfo <- influence.cooksDistances(supp.testDiffs.lm)
which(cookInfo$IsInfluential) # integer(0) array so none are past the
cookInfo
leverageInfo
cookInfo <- influence.cooksDistances(supp.testDiffs.lm)
which(cookInfo$IsInfluential) # integer(0) array so none are past the
cookInfo
nrow(weightG    )
nrow(weightData)
summary(supp.testDiffs.lm)
summary(supp.testDiffs.lm)
