anova(roads.glm, test="Chisq")
res <- LikelihoodRatioGLMTest(roads.glm)
LikelihoodRatioGLMTest(roads.glm)
LikelihoodRatioGLMTest(roads.higher.glm)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
res
data.frame(res)
r = data.frame(res)
res[1]
res[2]
attach(res)
attach(r)
V1
transpose(res)
t(res)
data.frame(t(res))
likRatioPrintNice <- function(result, nullModel, altModel, statement){
nf = formula(nullModel)
na = formula(altModel)
attach(result)
cat("\n")
cat("#####################################################################\n")
cat("#######                 Likelihood-Ratio Test                 #######\n")
cat("#####################################################################\n")
cat("\tH0: reduced model is true = "); cat(paste(nf[[2]], nf[[1]], nf[3]))
cat("\n")
cat("\tHA: complete model is true = "); cat(paste(na[[2]], na[[1]], na[3]))
cat("\n\n")
cat("  ΔG^2:\t\t                                ", LikRatio, "\n")
cat("  df:\t\t                                ", df, "\n")
cat("  p-value:\t\t                        ", PValue, "\n\n")
cat(statement)
detach(result)
return(invisible(result))
}
# NOTE: null model deviance is bigger (assuming) so the statistic
# will be negative if not.
LikelihoodRatioGLMCompareTest <- function(nullModel, altModel, printNice=TRUE) {
y <- nullModel$model[1]
pi.hat.Ho <- nullModel$fitted.values
pi.hat.Ha <- altModel$fitted.values
likRatioStat <- -2 * sum(y * log(pi.hat.Ho/pi.hat.Ha) + (1-y)*log((1-pi.hat.Ho)/(1-pi.hat.Ha)))
#likRatioStat <- nullModel$deviance - altModel$deviance; likRatioStat
# note: df.null = n - 1, df.resid = n - k - 1, k = num params (not incl. B0)
df <- nullModel$df.residual - altModel$df.residual
pValue <- 1 - pchisq(likRatioStat, df)
result <- data.frame(Deviance.Ho=nullModel$deviance, Deviance.Ha=altModel$dev,
df.Ho=nullModel$df.residual, df.Ha=altModel$df.residual,
df=df, LikRatio=likRatioStat, PValue=pValue)
statement <- ""
if(pValue < 0.05){
statement <- paste(
"Reject H0. Conclude at least one of the extra β coefficients in
the complete model is nonzero, so that the complete model is statistically
useful for predicting ", names(nullModel$model)[1], ", y.", sep="")
} else{
statement <- paste(
"Insufficient evidence to reject Ho, that is, to conclude that
the extra terms in the complete model are statistically
useful predictors in the regression model.")
}
if(printNice){
likRatioPrintNice(result, nullModel, altModel, statement)
}
return(result)
}
# Likelihood Ratio Test for the GLM Model
LikelihoodRatioGLMTest <- function(fit, printNice=TRUE) {
family <- fit$family
tempData <- data.frame(fit$model[1])
theFormula <- as.formula(paste(colnames(tempData), " ~ 1", sep=""))
nullModel <- glm(theFormula, family=family, data=tempData)
result <- LikelihoodRatioGLMCompareTest(nullModel, fit, printNice = FALSE)
statement <- ""
if(pValue < 0.05){
statement <- paste(
"Reject H0.
Conclude at least one of the β coefficients in the population
is nonzero. Thus the model is statistically useful for
predicting ", names(nullModel$model)[1], ", y.", sep="")
} else{
statement <- paste(
"Fail to reject H0.
Not enough evidence to conclude that at least one of the
β coefficients in the population is nonzero. Thus there
is not enough evidence that the model is statistically
useful for predicting ", names(nullModel$model)[1], ", y.", sep="")
}
if(printNice){
likRatioPrintNice(result, nullModel, fit, statement)
}
return(result)
}
LikelihoodRatioGLMTest(roads.glm)
r <- LikelihoodRatioGLMTest(roads.glm)
r #
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.glm)
LikelihoodRatioGLMTest(roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
load("data/Exercises and Examples/ROADBIDS.Rdata")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/ROADBIDS.Rdata")
options(digits=10, show.signif.stars = FALSE)
roads.glm <- glm(STATUS ~ NUMBIDS + DOTEST, family="binomial", data=ROADBIDS)
roads.higher.glm <- glm(STATUS ~ NUMBIDS*DOTEST +
I(NUMBIDS^2) + I(DOTEST^2), family="binomial",
data=ROADBIDS)
LikelihoodRatioGLMTest(roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.higher.glm)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
qchisq(0.01, df=2)
qchisq(1-0.01, df=2)
qchisq(1-0.01, df=3)
qchisq(0.01, df=3, lower.tail = F)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.higher.glm)
qchisq(0.01, df=3, lower.tail = F)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(roads.glm)
LikelihoodRatioGLMTest(roads.higher.glm)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMCompareTest(roads.glm, roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 9 - Logistic Regression/")
beetleData <- read.table("beetle.txt", header=TRUE)
beetleData
beetleData <- setNames(beetleData, nm=("Log10Dose", "Sample", "NumDead"))
beetleData <- setNames(beetleData, nm=c("Log10Dose", "Sample", "NumDead"))
beetleData
geom_point(shape=19, size=3)
ggplot(beetleData, aes(x=NumDead/Sample, y=Log10Dose)) +
geom_point(shape=19, size=3)
ggplot(beetleData, aes(x=Log10Dose, y=NumDead/Sample)) +
geom_point(shape=19, size=3)
ggplot(beetleData, aes(x=Log10Dose, y=NumDead/Sample)) +
geom_point(shape=19, size=3) +
geom_smooth(method="glm", method.args=list(family="binomial"))
ggplot(beetleData, aes(x=Log10Dose, y=NumDead/Sample)) +
geom_point(shape=19, size=3) +
geom_smooth(method="glm", method.args=list(family="binomial", logit="link"))
ggplot(beetleData, aes(x=Log10Dose, y=NumDead/Sample)) +
geom_point(shape=19, size=3) +
stat_smooth(method="glm", method.args=list(family="binomial", logit="link"))
beetle.glm <- glm(NumDead/Sample ~ Log10Dose, family="binomial", weights=Sample,
data=beetleData)
summary(beetle.glm)
anova(beetle.glm, test="Chisq")
attach(beetleData)
count <- cbind(NumDead, Sample - NumDead)
count
beetle2.glm <- glm(count ~ Log10Dose, family=binomial, data=beetleData)
beetle2.glm
beetle.glm
result <- LikelihoodRatioGLMTest(beetle.glm)
prop <- NumDead/Sample
beetle.glm <- glm(prop ~ Log10Dose, family="binomial", weights=Sample,
data=beetleData)
result <- LikelihoodRatioGLMTest(beetle.glm)
result <- LikelihoodRatioGLMTest(beetle2.glm)
result <- LikelihoodRatioGLMTest(beetle2.glm)
anova(beetle2.glm)
anova(beetle.glm)
anova(roads.glm)
LikelihoodRatioGLMTest(roads.glm)
deviance(roads.glm)
deviance(beetleData)
deviance(beetle2.glm)
ResidualDeviance(beetle.glm)
anova(beetle2.glm)
anova(beetle2.glm, test="Chisq")
pchisq(11.232, df=6, lower.tail = F)
ResidualDevianceTest <- function(model){
# residualdeviance has chi-square distribution on n - k degrees freedom.
df <- model$df.residual
dev <- deviance(model)
result <- data.frame(ResidualDeviance=dev, df=df,
PValue= 1 - pchisq(dev, df=df))
row.names(result) <- ""
return(df)
}
ResidualDevianceTest(beetle2.glm)
ResidualDevianceTest <- function(model){
# residualdeviance has chi-square distribution on n - k degrees freedom.
df <- model$df.residual
dev <- deviance(model)
result <- data.frame(ResidualDeviance=dev, df=df,
PValue= 1 - pchisq(dev, df=df))
row.names(result) <- ""
return(result)
}
ResidualDevianceTest(beetle2.glm)
anova(beetle2.glm, test="Chisq")
NullDeviance(beetle2.glm)
1-pchisq(284.2024495, df=7)
NullDevianceTest <- function(model){
# null deviance has chi-square distribution on n - 1 degrees freedom.
df <- model$df.null
dev <- model$null.deviance
result <- data.frame(ResidualDeviance=dev, df=df,
PValue= 1 - pchisq(dev, df=df))
row.names(result) <- ""
return(result)
}
NullDevianceTest(beetle2.glm)
anova(beetle2.glm, test="Chisq")
anova(roads.higher.glm)
beetle.null.glm <- glm(prop ~ 1, family=binomial,data=beetleData)
beetle.null.glm <- glm(count ~ 1, family=binomial,data=beetleData)
LikelihoodRatioNestedGLMTest(beetle.null.glm, beetle2.glm)
anova(beetle2.glm, test="Chisq")
284.202449-11.232231
284.202449+11.232231
nullModel <- beetle.null.glm; altModel <- beetle2.glm
y <- nullModel$model[1]
pi.hat.Ho <- nullModel$fitted.values
pi.hat.Ha <- altModel$fitted.values
likRatioStat <- -2 * sum(y * log(pi.hat.Ho/pi.hat.Ha) + (1-y)*log((1-pi.hat.Ho)/(1-pi.hat.Ha)))
likRatioStat
likRatioStat <- nullModel$deviance - altModel$deviance; likRatioStat
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
anova(roads.higher.glm)
LikelihoodRatioGLMTest(roads.glm)
LikelihoodRatioGLMTest(roads.higher.glm)
LikelihoodRatioNestedGLMTest(roads.glm, roads.higher.glm)
LikelihoodRatioNestedGLMTest(beetle.null.glm, beetle2.glm)
anova(roads.glm, roads.higher.glm)
LikelihoodRatioNestedGLMTest(roads.glm, roads.higher.glm)
anova(roads.glm, roads.higher.glm)
anova(roads.glm, roads.higher.glm, test="Chisq")
anova(beetle2.glm)
anova(beetle.null.glm, beetle2.glm)
anova(beetle2.glm, test="Chisq")
beetle.null.glm <- glm(count ~ 1, family=binomial,data=beetleData)
LikelihoodRatioNestedGLMTest(beetle.null.glm, beetle2.glm)
anova(beetle2.glm, test="Chisq")
LikelihoodRatioGLMTest(beetle2.glm)
fit <- beetle2.glm
family <- fit$family
tempData <- data.frame(fit$model[1])
theFormula <- as.formula(paste(colnames(tempData), " ~ 1", sep=""))
nullModel <- glm(theFormula, family=family, data=tempData)
nullModel
result <- LikelihoodRatioGLMCompareTest(nullModel, fit, printNice = FALSE)
result
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
anova(beetle2.glm, test="Chisq")
LikelihoodRatioGLMTest(beetle2.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(beetle2.glm)
anova(beetle2.glm, test="Chisq")
beetle.null.glm <- glm(count ~ 1, family=binomial,data=beetleData)
LikelihoodRatioNestedGLMTest(beetle.null.glm, beetle2.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioGLMTest(beetle2.glm)
beetle.null.glm <- glm(count ~ 1, family=binomial,data=beetleData)
LikelihoodRatioNestedGLMTest(beetle.null.glm, beetle2.glm)
anova(beetle2.glm, test="Chisq")
result <- LikelihoodRatioGLMTest(beetle2.glm)
result
ResidualDevianceTest(beetle2.glm)
beetle2.glm$deviance
summary(beetle2.glm)
anova(beetle2.glm, test="Chisq")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
library(ggplot2)
load("data/Exercises and Examples/ROADBIDS.Rdata")
options(digits=10, show.signif.stars = FALSE)
# status = 1 (fixed bid), status = 0 (competitive bid)
roads.glm <- glm(STATUS ~ NUMBIDS + DOTEST, family="binomial", data=ROADBIDS)
# NOTE: the p-values of the coeffs are from this: each (Bi/sbi)^2 has
# a chi square distribution with df = 1. So p-value is calculating
# pchisq(q=zvalue, df=1, lower.tail=FALSE)
summary(roads.glm)
anova(roads.glm, test="Chisq")
# resid deviance
roads.glm$deviance
roads.glm$df.residual
# null deviance
roads.glm$null.deviance
roads.glm$df.null
nullMod <- glm(STATUS ~ 1, family="binomial", data=ROADBIDS)
res <- LikelihoodRatioGLMCompareTest(nullMod, roads.glm)
res
res <- LikelihoodRatioGLMTest(roads.glm)
res
res <- LikelihoodRatioNestedTest(nullMod, roads.glm)
res
res <- LikelihoodRatioTest(roads.glm)
roads.glm$family
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
res <- LikelihoodRatioTest(roads.glm)
fit <- roads.glm
yName <- names(fit$model)[1]
form = as.formula(paste(yName, " ~ 1", sep=""))
form
nullModel <- glm(form, data=fit$model, family=fit$family)
nullModel
formula(nullMod)
formula(nullModel)
result
df <- fit$df.residual
dev <- fit$deviance
result <- data.frame(ResidualDeviance=dev, df=df,
PValue= 1 - pchisq(dev, df=df))
row.names(result) <- ""
result
result[1]
result[[1]]
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
library(ggplot2)
load("data/Exercises and Examples/ROADBIDS.Rdata")
options(digits=10, show.signif.stars = FALSE)
# status = 1 (fixed bid), status = 0 (competitive bid)
roads.glm <- glm(STATUS ~ NUMBIDS + DOTEST, family="binomial", data=ROADBIDS)
# NOTE: the p-values of the coeffs are from this: each (Bi/sbi)^2 has
# a chi square distribution with df = 1. So p-value is calculating
# pchisq(q=zvalue, df=1, lower.tail=FALSE)
summary(roads.glm)
anova(roads.glm, test="Chisq")
# resid deviance
roads.glm$deviance
roads.glm$df.residual
# null deviance
roads.glm$null.deviance
roads.glm$df.null
nullMod <- glm(STATUS ~ 1, family="binomial", data=ROADBIDS)
res <- LikelihoodRatioNestedTest(nullMod, roads.glm)
res
res <- LikelihoodRatioTest(roads.glm)
res
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
res <- LikelihoodRatioNestedTest(nullMod, roads.glm)
res
res <- LikelihoodRatioTest(roads.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
res <- LikelihoodRatioNestedTest(nullMod, roads.glm)
res <- LikelihoodRatioTest(roads.glm)
res
roads.higher.glm <- glm(STATUS ~ NUMBIDS*DOTEST +
I(NUMBIDS^2) + I(DOTEST^2), family="binomial",
data=ROADBIDS)
summary(roads.higher.glm)
anova(roads.higher.glm)
LikelihoodRatioTest(roads.glm)
anova(roads.glm)
LikelihoodRatioTest(roads.higher.glm)
anova(roads.higher.glm)
LikelihoodRatioNestedTest(roads.glm, roads.higher.glm)
anova(roads.glm, roads.higher.glm, test="Chisq")
LikelihoodRatioNestedTest(roads.glm, roads.higher.glm)
fit #
res = LikelihoodRatioNestedTest(roads.glm, roads.higher.glm)
res #
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
LikelihoodRatioNestedTest(roads.glm, roads.higher.glm)
LikelihoodRatioTest(roads.higher.glm)
anova(roads.higher.glm)
LikelihoodRatioTest(roads.glm)
anova(roads.glm)
LikelihoodRatioNestedTest(roads.glm, roads.higher.glm)
anova(roads.glm, roads.higher.glm, test="Chisq")
result <- LikelihoodRatioTest(beetle2.glm)
beetleData <- read.table("beetle.txt", header=TRUE)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 9 - Logistic Regression/")
beetleData <- read.table("beetle.txt", header=TRUE)
beetleData <- setNames(beetleData, nm=c("Log10Dose", "Sample", "NumDead"))
beetleData # num dead is as response to exposure of various dosages of carbon disulphide.
ggplot(beetleData, aes(x=Log10Dose, y=NumDead/Sample)) +
geom_point(shape=19, size=3)
prop <- NumDead/Sample
beetle.glm <- glm(prop ~ Log10Dose, family="binomial", weights=Sample,
data=beetleData)
summary(beetle.glm)
anova(beetle.glm, test="Chisq")
attach(beetleData)
count <- cbind(NumDead, Sample - NumDead)
count
beetle2.glm <- glm(count ~ Log10Dose, family=binomial, data=beetleData)
beetle2.glm
beetle.glm # they are the same.
result <- LikelihoodRatioTest(beetle2.glm)
anova(beetle2.glm, test="Chisq")
result <- LikelihoodRatioTest(beetle2.glm)
beetle.null.glm <- glm(count ~ 1, family=binomial,data=beetleData)
LikelihoodRatioNestedTest(beetle.null.glm, beetle2.glm)
LikelihoodRatioTest(beetle2.glm)
LikelihoodRatioNestedTest(beetle.null.glm, beetle2.glm) # tests the deviance
LikelihoodRatioNestedTest(beetle.null.glm, beetle2.glm) # tests the deviance
LikelihoodRatioTest(beetle2.glm) # tests the residual deviance = global model fit
LikelihoodRatioNestedTest(beetle.null.glm, beetle2.glm) # tests the deviance
)
anova(beetle.null.glm, beetle2.glm)
anova(beetle2.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
anova(beetle2.glm, test="Chisq")
beetle.null.glm <- glm(count ~ 1, family=binomial,data=beetleData)
anova(beetle.null.glm, beetle2.glm, test="Chisq")
anova(beetle2.glm, test="Chisq")
anova(beetle.null.glm, beetle2.glm, test="Chisq")
ResidualDevianceTest(roads.glm)
DevianceTest(roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
DevianceTest(roads.higher.glm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
DevianceTest(roads.higher.glm)
anova(roads.higher.glm)
LikelihoodRatioNestedTest(roads.glm, roads.higher.glm)
anova(roads.glm, roads.higher.glm, test="Chisq")
DevianceTest(roads.higher.glm)
anova(roads.higher.glm)
ResidualDevianceTest(roads.glm)
anova(roads.glm)
beetle2.glm
anova(beetle2.glm, test="Chisq")
ResidualDevianceTest(beetle2.glm)
anova(beetle.null.glm, beetle2.glm, test="Chisq")
DevianceTest(beetle2.glm)
ResidualDevianceTest(beetle2.glm) # the global fit for the model
anova(beetle2.glm, test="Chisq")
DevianceTest(beetle2.glm) # the nested lik-ratio test with null model.
beetle.null.glm$df.residual
beetle2.glm$df.residual
ResidualDevianceTest(beetle2.glm) # the global fit for the model
preds <- predict.glm(beetle.glm, se.fit=T, type="response")
s <- summary(beetle2.glm)
s
s$deviance.resid
dev.resids <- summary(beetle2.glm)$deviance.resid # all the deviance residuals
preds <- predict.glm(beetle2.glm, se.fit=T, type="response")
count.fit <- preds$fit * beetleData$Sample # multiply each probability by its sample size
df <- data.frame(n=beetleData$Sample, NumDead=beetleData$NumDead, ExpectedFit=count.fit,
DevianceResiduals=dev.resids)
df
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
library(ggfortify)
autoplot(beetle2.glm, which=2)
plot(beetle2.glm)
plot(beetle2.glm, which=2)
shapiro.test(dev.resids)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 9 - Logistic Regression/")
genderData <- read.table("gender.txt", header=TRUE)
genderData
is.factor(genderData$genotype)
plot(genderData)
attach(genderData)
plot(male/total ~ genotype)
ggplot(genderData, aes(x=genotype, y=male/total, group = genotype, color=genotype)) +
geom_boxplot()
ggplot(genderData, aes(x=genotype, y=male/total, group = genotype, color=genotype)) +
geom_boxplot(notchwidth = 1)
ggplot(genderData, aes(x=genotype, y=male/total, group = genotype, color=genotype)) +
geom_boxplot(notchwidth = 2)
ggplot(genderData, aes(x=genotype, y=male/total, group = genotype, color=genotype)) +
geom_boxplot(notchwidth = 2, size=2)
ggplot(genderData, aes(x=genotype, y=male/total, group = genotype, color=genotype)) +
geom_boxplot(size=1)
p <- male/total
ratio.glm <- glm(p ~ genotype, family=binomial, weights=total, data=genderData)
summary(ratio.glm)
anova(ratio.glm, test="Chisq")
ratio.null.glm <- glm(p ~ `, family=binomial, weights=total, data=genderData)
ratio.null.glm <- glm(p ~ 1, family=binomial, weights=total, data=genderData)
DevianceTest(ratio.glm)
erase.screen()
help
ggplot()
element_rect()
erase.screen
erase.screen()
''
p
r
q()
