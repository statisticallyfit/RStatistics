bflow.3.lm <- update(bflow.2.lm, .~. + I(AOT^3), data=bflowData)
anova(bflow.3.lm) # cubic isn't significant so just use quadratic.
crPlot(bflow.1.lm, variable="AOT")
crPlot(bflow.2.lm, variable="AOT")
plot(bflow.3.lm, which=c(1,3), add.smooth=FALSE)
par(mfrow=c(1,2))
plot(bflow.2.lm, which=c(1,3), add.smooth=FALSE)
par(mfrow=c(1,1))
crPlot(bflow.2.lm, variable="AOT")
bflow.3.lm <- lm(BF ~ AOT + I(AOT^2) + I(AOT^3), data=bflowData)
anova(bflow.3.lm) # cubic model isn't significant so just use quadratic.
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 8 - Residuals/lecturedata/")
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/OLYMPIC.Rdata")
View(OLYMPIC)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/")
load("OLYMPIC.Rdata")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/OLYMPIC.Rdata")
View(OLYMPIC)
ggplot(data=OLYMPIC, aes(x=FAT, y=CHOLES)) + geom_point(shape=19, size=3)
oly1.lm <- lm(CHOLES ~ FAT, data=OLYMPIC)
olympic1.lm <- lm(CHOLES ~ FAT, data=OLYMPIC)
summary(olympic1.lm)
anova(olympic1.lm)
autoplot(olympic1.lm, which=1:2, size=3, color="dodgerblue")
olympic2.lm <- lm(CHOLES ~ FAT + I(FAT^2), data=OLYMPIC)
anova(olympic2.lm)
residualsPlot <- function(fit, variableName, size=3, colour="slateblue"){
xs <- fit$model[[variableName]]
df <- data.frame(Resids=fit$residuals, Xs=xs)
ggplot(df, aes(x=Xs, y=Resids)) +
geom_point(size=size,shape=19,colour=colour) +
ggtitle(paste("Residuals vs", variableName)) +
xlab(variableName) + ylab("Residuals")
}
normalityPlot <- function(fit, size=4, colour="dodgerblue"){
autoplot(fit, which=2, size=size, colour=colour)
}
residualsPlot(olympic2.lm)
autoplot(olympic2.lm, which=1:2, colour="slateblue", size=3)
autoplot(olympic2.lm, which=1, colour="slateblue", size=3)
residualFittedPlot <- function(fit, size=4, colour="slateblue"){
autoplot(fit, which=1, size=size, colour = colour)
}
residualFittedPlot(olympic2.lm)
residualFittedPlot <- function(fit, size=4, colour="slateblue"){
df <- data.frame(Fits=fit$fitted, Resids=fit$residuals)
ggplot(data=df, aes(x=Fits, y=Resids)) +
geom_point(size=size, shape=19, colour=colour) +
ggtitle("Residuals vs Fitted") +
xlab("Fitted values") + ylab("Residuals")
}
residualFittedPlot(olympic2.lm)
residualFittedPlot <- function(fit, size=4, colour="slateblue"){
df <- data.frame(Fits=fit$fitted, Resids=fit$residuals)
ggplot(data=df, aes(x=Fits, y=Resids)) +
geom_point(size=size, shape=19, colour=colour) +
geom_hline(yintercept=0, size=1, linetype="longdash", colour="gray") +
ggtitle("Residuals vs Fitted") +
xlab("Fitted values") + ylab("Residuals")
}
residualFittedPlot(olympic2.lm)
residualFittedPlot <- function(fit, size=4, colour="slateblue"){
df <- data.frame(Fits=fit$fitted, Resids=fit$residuals)
ggplot(data=df, aes(x=Fits, y=Resids)) +
geom_point(size=size, shape=19, colour=colour) +
geom_hline(yintercept=0, size=2, linetype="longdash",
colour="darkgray") +
ggtitle("Residuals vs Fitted") +
xlab("Fitted values") + ylab("Residuals")
}
residualFittedPlot(olympic2.lm)
residualFittedPlot <- function(fit, size=2, colour="black"){
df <- data.frame(Fits=fit$fitted, Resids=fit$residuals)
ggplot(data=df, aes(x=Fits, y=Resids)) +
geom_point(size=size, shape=19, colour=colour) +
geom_hline(yintercept=0, size=2, linetype="longdash",
colour="darkgray") +
ggtitle("Residuals vs Fitted") +
xlab("Fitted values") + ylab("Residuals")
}
residualFittedPlot(olympic2.lm)
residualFittedPlot <- function(fit, size=3, colour="black"){
df <- data.frame(Fits=fit$fitted, Resids=fit$residuals)
ggplot(data=df, aes(x=Fits, y=Resids)) +
geom_point(size=size, shape=19, colour=colour) +
geom_hline(yintercept=0, size=2, linetype="longdash",
colour="darkgray") +
ggtitle("Residuals vs Fitted") +
xlab("Fitted values") + ylab("Residuals")
}
residualFittedPlot(olympic2.lm)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/COFFEE2.Rdata")
View(COFFEE2)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/COFFEE2.Rdata")
is.factor(COFFEE2$X)
COFFEE2$X <- as.factor(COFFEE2$X)
coffeeDemand.lm <- lm(DEMAND ~ PRICE + X, data=COFFEE2)
summary(coffeeDemand.lm)
residualFittedPlot(coffeeDemand.lm)
crPlot(coffeeDemand.lm, variable="PRICE")
View(COFFEE2)
crPlot(coffeeDemand.lm, terms = ~. -X, variable="PRICE")
crPlots(coffeeDemand.lm, terms = ~. -X, variable="PRICE")
crPlot(coffeeDemand.lm, variable="PRICE")
crPlots(coffeeDemand.lm, terms = ~. -X)
coffeeDemandInversePrice.lm <- lm(DEMAND ~ I(1/PRICE) + X, data=COFFEE2)
summary(coffeeDemandInversePrice.lm)
anova(coffeeDemandInversePrice.lm)
partialPlot(coffeeDemandInversePrice.lm, variableName = "I(1/PRICE)")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
partialPlot(coffeeDemandInversePrice.lm, variableName = "I(1/PRICE)")
residualFittedPlot(coffeeDemandInversePrice.lm)
crPlot(coffeeDemandInversePrice.lm, variable="PRICE")
crPlot(coffeeDemandInversePrice.lm, variable="1/PRICE")
crPlot(coffeeDemandInversePrice.lm, variable="I(1/PRICE)")
shapiro.test(coffeeDemandInversePrice.lm$residuals)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/ASWELLS.Rdata")
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
betaCI(arsenic.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R')
source("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R")
betaCI(arsenic.lm)
residualFittedPlot(arsenic.lm) # nope, non-const variance!!!
normalQQPlot(arsenic.lm) # nope, deviates strongly from normality
normalityPlot(arsenic.lm) # nope, deviates strongly from normality
normalityPlot <- function(fit, size=2, colour="black"){
autoplot(fit, which=2, size=size, colour=colour)
}
normalityPlot(arsenic.lm) # nope, deviates strongly from normality
shapiro.test(arsenic.lm$residuals) # reject H0 of normality.
cooks.distance(arsenic.lm)
cooksDistance(arsenic.lm)
which(cooksDistance(arsenic.lm)$IsInfl == TRUE)
length(which(cooksDistance(arsenic.lm)$IsInfl == TRUE))
boxcox(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS,
lambda=seq(0, 1, by=0.01))
library(MASS)
boxcox(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS,
lambda=seq(0, 1, by=0.01))
partialPlot(arsenic.lm, variableName = "LATITUDE")
arsenic.power.lm <- lm(ARSENIC ^0.2~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
anova(arsenic.power.lm)
normalityPlot(arsenic.power.lm)
residualFittedPlot(arsenic.power.lm)
residualFitPlot <- function(fit, size=3, colour="black"){
df <- data.frame(Fits=fit$fitted, Resids=fit$residuals)
ggplot(data=df, aes(x=Fits, y=Resids)) +
geom_point(size=size, shape=19, colour=colour) +
geom_hline(yintercept=0, size=1, linetype="longdash", colour="red") +
ggtitle("Residuals vs Fitted") +
xlab("Fitted values") + ylab("Residuals")
}
residualFitPlot(arsenic.power.lm)
residualFitPlot(arsenic.lm) # nope, non-const variance!!!
residualFitPlot(arsenic.power.lm)
normalityPlot(arsenic.power.lm) # much straighter
residualFitPlot(arsenic.power.lm)
arsenic.power.lm$fitted.values^(1/0.2)
anova(bflow.2.lm) # quadratic model is significant, given linear
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/Question3_bloodflow.R', echo=TRUE)
anova(bflow.1.lm)
anova(bflow.2.lm) # quadratic model is significant, given linear
betaCI(bflow.3.lm)
betaCI(bflow.2.lm)
par(mfrow=c(1,2))
plot(bflow.2.lm, which=c(1,3), add.smooth=FALSE)
library(car)
par(mfrow=c(1,1))
crPlot(bflow.2.lm, variable="AOT")
betaCI(bflow.2.lm) # the confidence intervals
crPlot(bflow.2.lm, variable="AOT")
crPlot(bflow.2.lm, variable="AOT", title="Partial Residual Plot for AOT")
?crPlot
crPlot(bflow.2.lm, variable="AOT", main="Partial Residual Plot for AOT")
crPlot(bflow.2.lm, variable="I(AOT^2)", main="Partial Residual Plot for AOT")
crPlot(bflow.2.lm, variable="AOT", main="Partial Residual Plot for AOT")
crPlot(bflow.2.lm, variable="AOT", main="Partial Residuals for AOT in Quadratic Model")
crPlot(bflow.2.lm, variable="AOT",
main="Partial Residuals for AOT in Quadratic Model")
crPlot(bflow.1.lm, variable="AOT", main="Partial Residuals for AOT in Linear Model")
bflow.3.lm <- lm(BF ~ AOT + I(AOT^2) + I(AOT^3), data=bflowData)
anova(bflow.3.lm) # cubic model isn't significant so just use quadratic.
autoplot(bflow.2.lm, which=1)
pnorm(c(-3,3))
diff(pnorm(c(-3,3)))
coefs(bflow.2.lm)
coef(bflow.2.lm)
k <- length(coef(bflow.2.lm)) - 1
n <- nrow(bflowData)
leverage.mean.cutoff <- 2*(k + 1)/n
leverageValues <- function(fit){
hs <- hatvalues(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
h.mean <- 2*(k+1)/n
isInfluential <- hs > h.mean
return(data.frame(InfluentialPoints=hs, CutOffInflMean=h.mean,
IsInfluential=isInfluential))
}
influence.leverageValues <- function(fit){
hs <- hatvalues(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
h.mean <- 2*(k+1)/n
isInfluential <- hs > h.mean
return(data.frame(InfluentialPoints=hs, CutOffInflMean=h.mean,
IsInfluential=isInfluential))
}
influence.cooksDistances <- function(fit) {
cks <- cooks.distance(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
Fcrit <- qf(0.5, df1=k+1, df2=n-k-1)
isInfluential <- cks > Fcrit
return(data.frame(CooksPoints=cks, CutOffFcrit=Fcrit,
IsInfluential=isInfluential))
}
leverage.mean.cutoff
cookInfo <- influence.cooksDistances(bflow.2.lm)
which(cookInfo$IsInfluential)
leverageInfo <- influence.leverageValues(bflow.2.lm)
which(leverageInfo$IsInfluential)
obs14 <- which(leverageInfo$IsInfluential) # So observation 14 is influential
leverageInfo$InfluentialPoints[obs14]
leverageInfo$CutOffInflMean[1]
tail(leverageInfo)
tail(leverageInfo,2)
leverageInfo[14, ]
par(mfrow=c(1,2))
plot(bflow.2.lm, which=c(4,6), add.smooth = FALSE)
p.plot
cookInfo$CutOffFcrit
cookInfo$CutOffFcrit[1]
cookInfo[obs14,]
cookInfo[2, ]
cookInfo[4, ]
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
library(ggplot2)
library(car)
options(digits=10, show.signif.stars = F)
bflowData <- read.table("bloodflow.txt", header=TRUE)
ggplot(bflowData, aes(x=AOT, y=BF)) +
geom_point(shape=19, size=3) +
ggtitle("Arterial Oxygen Tension vs. Bloodflow")
bflow.1.lm <- lm(BF ~ AOT, data=bflowData)
anova(bflow.1.lm)
summary(bflow.1.lm)
an <- anova(bflow.1.lm)
an$`F value`
an$`Pr(>F)`
par(mfrow=c(1,1))
crPlot(bflow.1.lm, variable="AOT", main="Partial Residuals for AOT in Linear Model")
par(mfrow=c(1,1))
crPlot(bflow.2.lm, variable="AOT",
main="Partial Residuals for AOT in Quadratic Model")
# ---------------------------------------------------------------------
bflow.3.lm <- lm(BF ~ AOT + I(AOT^2) + I(AOT^3), data=bflowData)
anova(bflow.3.lm) # cubic model isn't significant so just use quadratic.
bflow.2.lm <- lm(BF ~ AOT + I(AOT^2), data=bflowData)
anova(bflow.2.lm) # quadratic model is significant, given linear
# model has been fitted, so continue
# Partial plot suggests curvature was removed.
par(mfrow=c(1,1))
crPlot(bflow.2.lm, variable="AOT",
main="Partial Residuals for AOT in Quadratic Model")
# ---------------------------------------------------------------------
bflow.3.lm <- lm(BF ~ AOT + I(AOT^2) + I(AOT^3), data=bflowData)
anova(bflow.3.lm) # cubic model isn't significant so just use quadratic.
summary(bflow.3.lm)
summary(bflow.1.lm)
summary(bflow.2.lm)
betaCI(bfl2)
betaCI(bflow.2.lm)
summary(bflow.1.lm)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
library(ggplot2)
options(digits=10, show.signif.stars = F)
data("ToothGrowth")
ToothGrowth$dose <- factor(ToothGrowth$dose)
toothData.1 <- ToothGrowth
toothData.1$dose <- relevel(toothData.05$dose, ref="1")
toothData.1$dose <- relevel(ToothGrowth$dose, ref="1")
par(mfrow=c(1,1))
with(ToothGrowth, interaction.plot(x.factor=dose, trace.factor = supp, response=len))
formLower <- formula(~ 1) # the minimal model
formUpper <- formula( ~ dose * supp, data=toothData.1) # the maximal model
start.model <- lm(len ~ 1, data=toothData.1)
step.forward.model <- step(start.model, direction = "forward",
scope=list(lower=formLower, upper=formUpper))
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
library(ggplot2)
options(digits=10, show.signif.stars = F)
data("ToothGrowth")
ToothGrowth$dose <- factor(ToothGrowth$dose)
toothData.1 <- ToothGrowth
# releveling data to dose = 1 so that desired comparisons can be made.
toothData.1$dose <- relevel(ToothGrowth$dose, ref="1")
# part b) plotting len vs. dose with supp levels as tracing factor.
par(mfrow=c(1,1))
with(ToothGrowth, interaction.plot(x.factor=dose, trace.factor = supp, response=len))
# part c) stepwise regression
formLower <- formula(~ 1) # the minimal model
formUpper <- formula( ~ dose * supp, data=toothData.1) # the maximal model
start.model <- lm(len ~ 1, data=toothData.1)
step.forward.model <- step(start.model, direction = "forward",
scope=list(lower=formLower, upper=formUpper))
anova(step.forward.model) # given that we fitted the dose, and supp, the interaction
summary(step.forward.model)
df <- data.frame(dose="2", supp="OJ")
predict(step.forward.model, newdata=df, interval="confidence", type="response")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
library(MASS)
options(digits=10, show.signif.stars = F)
# part a)
insectData <- read.table("insect.txt", header=TRUE)
# choosing only the rows without the Count = 0
insectData.NoZero <- insectData[insectData$Count != 0, ]
par(mfrow=c(1,1))
boxcox(Count ~ Ispray, data=insectData.NoZero, lambda=seq(from=0, to=1, by=0.01))
insect.lm <- lm(Count ~ Ispray, data=insectData.NoZero)
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
cs <- cooks.distance(fit)
ggplot(data, aes(x=Obs, y=cs)) +
geom_point() + geom_linerange(ymin=0, ymax=cs) +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph(insect.lm)
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
data$Cooks <- cooks.distance(fit)
ggplot(data, aes(x=Obs, y=Cooks)) +
geom_point() + geom_linerange(ymin=0, ymax=cs) +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph(insect.lm)
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
data$Cooks <- cooks.distance(fit)
ggplot(data, aes(x=Obs, y=Cooks)) +
geom_point(shape=19, size=2) + geom_linerange(ymin=0, ymax=max(data$Cooks)) +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph(insect.lm)
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
data$Cooks <- cooks.distance(fit)
ggplot(data, aes(x=Obs, y=Cooks)) +
geom_point(shape=19, size=2) + geom_linerange(ymin=0, ymax=data$Cooks) +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph(insect.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
influence.cooksDistances(insect.lm)
influence.cooksDistances(insect.lm)$Cut
cook.cutOff <- influence.cooksDistances(fit)$Cut[1]
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
data$Cooks <- cooks.distance(fit)
cook.cutOff <- influence.cooksDistances(fit)$Cut[1]
ggplot(data, aes(x=Obs, y=Cooks)) +
geom_point(shape=19, size=2) +
geom_linerange(ymin=0, ymax=data$Cooks) +
geom_hline(yintercept=cook.cutOff, linetype="longdash",size=2) +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph(insect.lm)
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
data$Cooks <- cooks.distance(fit)
cook.cutOff <- influence.cooksDistances(fit)$Cut[1]
ggplot(data, aes(x=Obs, y=Cooks)) +
geom_point(shape=19, size=2) +
geom_linerange(ymin=0, ymax=data$Cooks) +
geom_hline(yintercept=cook.cutOff, linetype="dash",size=1,colour="red") +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph()
cookGraph(insect.lm)
cookGraph <- function(fit){
data <- fit$model
data$Obs <- 1:nrow(data)
data$Cooks <- cooks.distance(fit)
cook.cutOff <- influence.cooksDistances(fit)$Cut[1]
ggplot(data, aes(x=Obs, y=Cooks)) +
geom_point(shape=19, size=2) +
geom_linerange(ymin=0, ymax=data$Cooks) +
geom_hline(yintercept=cook.cutOff, linetype="dashed",size=1,color="red") +
scale_x_continuous("Observation Number") +
scale_y_continuous("Cook's distance") +
ggtitle("Cook's Distance")
}
cookGraph(insect.lm)
boxcox(Count ~ Ispray, data=insectData.NoZero, lambda=seq(from=0, to=1, by=0.01))
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
library(ggplot2)
library(car)
options(digits=10, show.signif.stars = F)
# part a)
bflowData <- read.table("bloodflow.txt", header=TRUE)
# Scatterplot suggests there are 3 peaks and troughs
ggplot(bflowData, aes(x=AOT, y=BF)) +
geom_point(shape=19, size=3) +
ggtitle("Arterial Oxygen Tension vs. Bloodflow")
bflow.1.lm <- lm(BF ~ AOT, data=bflowData)
anova(bflow.1.lm)
par(mfrow=c(1,1))
crPlot(bflow.1.lm, variable="AOT", main="Partial Residuals for AOT in Linear Model")
summary(bflow.1.lm)
# ---------------------------------------------------------------------
bflow.2.lm <- lm(BF ~ AOT + I(AOT^2), data=bflowData)
anova(bflow.2.lm) # quadratic model is significant, given linear
# model has been fitted, so continue
# Partial plot suggests curvature was removed.
par(mfrow=c(1,1))
crPlot(bflow.2.lm, variable="AOT",
main="Partial Residuals for AOT in Quadratic Model")
summary(bflow.2.lm)
betaCI(bflow.2.lm)
# ---------------------------------------------------------------------
bflow.3.lm <- lm(BF ~ AOT + I(AOT^2) + I(AOT^3), data=bflowData)
anova(bflow.3.lm) # cubic model isn't significant so just use quadratic.
cookInfo[2, ]
from = min(bflowData$AOT)
to = max(bflowData$AOT)
xs <- data.frame(AOT=seq(from=from,to=to, len=nrow(bflowData)))
# the levels are by default 95% for the CIs
CI <- data.frame(predict(bflow.2.lm, interval="confidence", newdata=xs))
# placing also the AOT generated values here for plotting purposes.
pred.df <- data.frame(AOT=xs$AOT, fit=CI$fit, lwr=CI$lwr, upr=CI$upr)
# Plotting confidence bands
p.data = ggplot(bflowData, aes(x=AOT, y=BF)) +
geom_point(shape=19, size=3)
p.fits = p.data +
geom_line(data=pred.df, aes(y=fit, colour="a", linetype="a"),size=1) +
geom_line(data=pred.df, aes(y=lwr, colour="b", linetype="b"),size=1) +
geom_line(data=pred.df, aes(y=upr, colour="b", linetype="b"),size=1)
p.plot <- p.fits +
ggtitle("Predicted and Observed Values of BF vs AOT
and 95% Confidence Bands") +
scale_colour_manual(name="Legend", values=c("a"="red", "b"="dodgerblue"),
labels=c("Fitted Line", "95%\nConfidence\nBands")) +
scale_linetype_manual(name="Legend", values=c("a"="solid", "b"="dashed"),
labels=c("Fitted Line", "95%\nConfidence\nBands"))
p.plot
par(mfrow=c(2,2))
plot(bflow.2.lm, add.smooth=FALSE, which=c(1,2,3,5), cook.levels=c(0.2,0.5,1.0))
shapiro.test(bflow.2.lm$residuals) # no deviation from normality.
influence.leverageValues <- function(fit){
hs <- hatvalues(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
h.mean <- 2*(k+1)/n
isInfluential <- hs > h.mean
return(data.frame(InfluentialPoints=hs, CutOffInflMean=h.mean,
IsInfluential=isInfluential))
}
# this is a function to compare the cooks distances with the critical value
# at the cutoff point: if any cooks value is greater than the cooks critical
# value at the 50th percentile on the F(k+1, n-k-1) distribution, then
# that observation is influential.
influence.cooksDistances <- function(fit) {
cks <- cooks.distance(fit)
k <- length(fit$model) - 1
n <- nrow(fit$model)
Fcrit <- qf(0.5, df1=k+1, df2=n-k-1)
isInfluential <- cks > Fcrit
return(data.frame(CooksPoints=cks, CutOffFcrit=Fcrit,
IsInfluential=isInfluential))
}
leverageInfo <- influence.leverageValues(bflow.2.lm)
obs14 <- which(leverageInfo$IsInfluential) # So observation 14 is influential
obs14
leverageInfo[obs14, ]
cookInfo <- influence.cooksDistances(bflow.2.lm)
which(cookInfo$IsInfluential) # integer(0) array so none are past the
# cutoff cooks value.
cookInfo$CutOffFcrit[1]
cookInfo[obs14,] # its value is close to the cutoff.
cookInfo[2, ]
cookInfo[4, ]
