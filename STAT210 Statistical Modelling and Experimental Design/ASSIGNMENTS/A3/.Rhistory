qexp(p=0.25, rate=1/beta)
pexp(90, rate=1/beta, lower.tail=F)
diff(pexp(c(10,20), rate=1/beta)) / pexp(10, rate=1/beta, lower.tail=F)
pexp(10, rate=1/beta)
pexp(10, rate=1/beta)
pbinom(0, size=5, p=pexp(10, rate=1/beta))
pbinom(0, size=5, p=pexp(10, rate=1/beta), lower.tail=FALSE)
p = pexp(10, rate=1/beta)
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
p = pexp(10, rate=1/beta, lower.tail=FALSE)
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
p = pexp(90, rate=1/beta, lower.tail=FALSE)
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
z0 <- qnorm(0.20, mean=0, sd=1); z0
z1 <- qnorm(0.10, mean=0, sd=1, lower.tail=F); z1
qnorm(1 - 0.10, mean=0, sd=1) # another way
pgamma(30000,shape=20,scale=1000,lower.tail=F)
integrate(function(x){(1/(1000^20)*gamma(20)) * x^(20-1) *exp(-x/1000) }, lower=30000, upper=Inf)
pgamma(30,000, shape=20, scale=1000, lower.tail=F) #
pgamma(30000, shape=20, scale=1000, lower.tail=F) #
gamma(2)
gamma(4)
gamma(5)
integrate(function(x){(1/(1000^20 * gamma(20))) * x^(20-1) *exp(-x/1000) }, lower=30000, upper=Inf)
gamma.density <- function(x){(1/(1000^20 * gamma(20))) * x^(20-1) *exp(-x/1000) }
integrate(gamma.density, lower=30000, upper=Inf)
pgamma(30000, shape=20, scale=1000, lower.tail=FALSE)
gamma(20)
factorial(19)
qexp(p=0.25, rate=1/beta)
pexp(90, rate=1/beta, lower.tail=F)
pexp(10, rate=1/beta)
diff(pexp(c(10,20), rate=1/beta)) / pexp(10, rate=1/beta, lower.tail=F)
p2 = pexp(10, rate=1/beta, lower.tail=F) # P (T > 10)
p1 / p2
p1 = diff(pexp(c(10,20), rate=1/beta)) # P(10 < T < 20)
p1 / p2
pexp(10, rate=1/beta)
ppois(2, lambda=9/4, lower.tail=F)
1 - ppois(2, lambda=9/4) # another way to calculate
p = pexp(90, rate=1/beta, lower.tail=FALSE)
pbinom(0, size=5, p=p, lower.tail=FALSE)
p = pexp(90, rate=1/beta, lower.tail=FALSE); p
pbinom(0, size=5, p=p, lower.tail=FALSE)
1 - dbinom(0, size=5, p=p)
diff(pbinom(c(145, 163), size=600, p=0.25))
diff(pbinom(c(144, 163), size=600, p=0.25))
diff(pnorm(c(144.5, 163.5), mean=600*0.25, sd=sqrt(600*0.25*0.75)))
n=10^5
X = runif(n=n, min=0, max=1)
Y = runif(n=n, min=0, max=1)
head(X)
probBothBetweenHalf <- sum((X <= 0.5) & (Y <= 0.5))/n
probBothBetweenHalf
n = 500 # sample of size 500 from bivariate uniform.
u1 <- runif(n=n, min=0, max=1)
u2 <- runif(n=n, min=0, max=1)
# logical vec depending on whether conditions are met
logicBothBetweenHalf <- (u1 < 05.) & (u2 < 0.5)
logicBothBetweenHalf
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5))
probBothBetweenHalf
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5)) / n
probBothBetweenHalf
theSim <- 0
library(reshape2)
theSim <- 0
# repeat sampling 1000 times
for(i in 1:1000) {
n = 500 # sample of size 500 from bivariate uniform.
u1 <- runif(n=n, min=0, max=1)
u2 <- runif(n=n, min=0, max=1)
# logical vec depending on whether conditions are met
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5)) / n
#store result from each sample (i)
theSim[i] = probBothBetweenHalf
}
theSim
melt(data)
data <- melt(data.frame(theSim))
data
head(data)
ggplot(data, aes(y=value)) + geom_density()
library(ggpl2)
Library(ggplot2)
library(ggplot2)
ggplot(data, aes(y=value)) + geom_density()
data <- data.frame(theSim)
ggplot(data, aes(x=theSim)) + geom_density()
ggplot(data, aes(x=theSim)) + geom_density(size=2, colour="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram()
ggplot(data, aes(x=theSim)) + geom_histogram(colour="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram(fill="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram(fill="lightpink")
theSim <- 0
# repeat sampling 1000 times
for(i in 1:1000) {
n = 500 # sample of size 500 from bivariate uniform.
u1 <- runif(n=n, min=0, max=1)
u2 <- runif(n=n, min=0, max=1)
# logical vec depending on whether conditions are met
probBothBetweenHalf <- sum((u1 < 05.) & (u2 < 0.5)) / n
#store result from each sample (i)
theSim[i] = probBothBetweenHalf
}
library(ggplot2)
data <- data.frame(theSim)
ggplot(data, aes(x=theSim)) + geom_density(size=2, colour="hotpink")
ggplot(data, aes(x=theSim)) + geom_histogram(fill="lightpink")
sampleSize <- 10^4
die1 <- sample(x=1:6, size=sampleSize, replace=TRUE) # each prob = 1/6
die2 <- sample(x=1:6, size=sampleSize, replace=TRUE) # each prob = 1/6
jointProb <- table(die1, die2)/sampleSize
jointProb
table(die1, die2)
jointProb[5:6]
jointProb[5:6]
fives <- (die1 == 5) + (die2==5)
sixes <- (die1 == 6) + (die2 == 6)
jointProb56 <- table(fives, sixes)/sampleSize
jointProb56
diag(table(die1, die2)[5:6]/sampleSize)
jointProb[5:6] # this is the joint probability of
diag(table(die1, die2))[5:6]/sampleSize
jointProb56
prob56 <- diag(table(die1, die2))[5:6]/sampleSize
jointProb56
jointProb56
jointProb56[3,1]
jointProb56[1,3]
(2/3)^2
mu_I = 29.87
mu_C = 31.77
sd_I=7.71
sd_C = 7.86
p = 0.957
# part d) pdf of Canandaigua temperature (had muC, varC)
lower <- mu_C - 4 * sd_C
upper <- mu_C + 4 * sd_C
xs <- seq(lower, upper, length=10^3)
ys = dnorm(x=xs, mean=mu_C, sd=sd_C)
df <- data.frame(xs=xs, ys=ys)
ggplot() +
geom_line(data=df, aes(x=xs, y=ys), size=1, colour="blue") +
geom_vline(xintercept=mu_C, colour="black", linetype="dashed", size=1) +
ggtitle("Normal Density of Canandaigua Max Temperature")
mu_C_given_I <- function(i) mu_C + p * (sd_C/sd_I) * (i - mu_I)
sd_C_given_I <- sd_C^2 * (1 - p^2)
df.cond <- data.frame(xs=xs, ys=dnorm(x=xs, mean=mu_C_given_I(25), sd=sd_C_given_I))
ggplot() +
geom_line(data=df.cond, aes(x=xs, y=ys), size=1, colour="red") +
geom_vline(xintercept=mu_C_given_I(25), colour="black", linetype="dashed",
size=1) +
ggtitle("Conditional Normal PDF of Canadaigua given Ithaca = 25 degrees F")
x1 <- x2 <- seq(0, 1, length=128)
x1
x2
const <- 6/5
var.grid <- expand.grid("x1", =x1, "x2"=x2)# create grid of bivarate rvs
var.grid <- expand.grid("x1" =x1, "x2"=x2)# create grid of bivarate rvs
var.grid
X1 <- var.grid$x1
X2 <- var.grid$x2
X2
?expand.grid
x <- seq(0, 10, length.out = 100)
y <- seq(-1, 1, length.out = 20)
d1 <- expand.grid(x = x, y = y)
length(x)
length(y)
d1
head(d1)
head(d1, 103)
jointPDF <- const * (X1 + X2^2)
jointPDF
jointPDF <- matrix(jointPDF, ncol=128, nrow=128)
jointPDF
x11()
jointPDF # typecast as matrix.
x11()
persp(z=jointPDF, y=x1, x=x2, col="lightblue") # perspective plot
x11()
image(jointPDF, xlab="x1", ylab="x2", col=heat.colors(256))
# image view
axis(side=1, at = seq(0,1,by=0.2), labels=seq(0,1,length=6))
axis(side=2, at = seq(0,1,by=0.2), labels=seq(0,1,length=6))
contour(jointPDF, nlevels=10, add=TRUE)
indices <- which(X1 <= 0.5 & X2 <= 0.5)
indices
head(indices)
head(indices, 20)
regionOfInterest <- jointPDF[indices]
regionOfInterest
prob <- sum(regionOfInterest * (1/128^2)) # calculate probability using a riemann sum.
prob
N <- 128
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
library(ggplot2)
load("data/Exercises and Examples/DISCRIM.Rdata")
options(digits=10, show.signif.stars = FALSE)
discr.glm <- glm(HIRE ~ EDUC + EXP + GENDER, data=DISCRIM, family=binomial)
discr.null.glm <- glm(HIRE ~ 1, data=DISCRIM, family=binomial)
summary(discr.glm)
predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1), type="response")
predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1), type="link",se.fit=T)
CI <- predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1), type="link",se.fit=T)
CI <- predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1), type="link",se.fit=T)[1:2]
CI
logit.ci <- data.frame(fit=CI$fit, lwr=CI$fit - 1.96*CI$se.fit, upr=CI$fit + 1.96*CI$se.fit)
logit.ci
mean.ci <- exp(logit.ci)
mean.ci
CI.resp <- predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1),
type="response",se.fit=T)[1:2]
CI.resp
mean.ci.2 <- data.frame(fit=CI.resp$fit, lwr=CI.resp$fit - 1.96*CI.resp$se.fit,
upr=CI.resp$fit + 1.96*CI.resp$se.fit)
mean.ci.2
CI.link <- predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1),
type="link",se.fit=T)[1:2]
logit.ci <- data.frame(fit=CI.link$fit,
lwr=CI.link$fit - 1.96*CI.link$se.fit,
upr=CI.link$fit + 1.96*CI.link$se.fit)
logit.ci
mean.ci <- exp(logit.ci)
mean.ci
# another way using direct response
CI.resp <- predict(discr.glm, newdata=data.frame(EDUC=4, EXP=0, GENDER=1),
type="response",se.fit=T)[1:2]
CI.resp
mean.ci.direct <- data.frame(fit=CI.resp$fit,
lwr=CI.resp$fit - 1.96*CI.resp$se.fit,
upr=CI.resp$fit + 1.96*CI.resp$se.fit)
mean.ci.direct
mean.ci
mean.ci.direct
options(digits=10, show.signif.stars = FALSE)
admitTable <- as.table(matrix(c(1198, 1493, 557, 1278), byrow=TRUE,nrow=2))
colnames(admitTable) <- c("Admitted", "Rejected")
rownames(admitTable) <- c("Male", "Female")
admitTable
oddsRatio(mirror(admitTable))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
admitTable <- as.table(matrix(c(1198, 1493, 557, 1278), byrow=TRUE,nrow=2))
colnames(admitTable) <- c("Admitted", "Rejected")
rownames(admitTable) <- c("Male", "Female")
admitTable
oddsRatio(mirror(admitTable))
oddsRatio(admitTable)
admitData <- data.frame(gender=c(rep("Male",6),rep("Female",6)),
dept=c("A","B","C","D","E", "F","A","B","C","D","E","F"),
admitted=c(512,353,120,138,53,22,89,17,202,131,94,24),
rejected=c(313,207,205,279,138,351,19,8,391,244,299,317))
admitData
admitData <- data.frame(gender=c(rep("Male",6),rep("Female",6)),
dept=repc("A","B","C","D","E"),2),
admitted=c(512,353,120,138,53,22,89,17,202,131,94,24),
rejected=c(313,207,205,279,138,351,19,8,391,244,299,317))
admitData
admitData <- data.frame(gender=c(rep("Male",6),rep("Female",6)),
dept=rep(c("A","B","C","D","E"),2),
admitted=c(512,353,120,138,53,22,89,17,202,131,94,24),
rejected=c(313,207,205,279,138,351,19,8,391,244,299,317))
admitData
admitData <- data.frame(gender=c(rep("Male",6),rep("Female",6)),
dept=rep(c("A","B","C","D","E", "F"),2),
admitted=c(512,353,120,138,53,22,89,17,202,131,94,24),
rejected=c(313,207,205,279,138,351,19,8,391,244,299,317))
admitData
admitData$total <- admitData$admitted + admitData$rejected
count <- cbind(admitData$admitted, admitData$rejected)
admit.glm <- glm(count ~ gender + dept, data=admitData, family=binomial)
summary(admit.glm)
admit.glm2 <- glm(admitted/total ~ gender + dept, data=admitData, weights=total,
famil=binomial)
summary(admit.glm2)
ResidualDevianceTest(admit.glm2)
ResidualDevianceTest(admit.glm)
oddsRatio(admitTable)
oddsRatio(mirror(admitTable))
oddsRatio(admitTable)
summary(admit.glm)
cof <- summary(admit.glm)$coef # all coefs are significant
cof
exp(cof[,1:2])-1
65.438-57.281
1-pchisq(8.157,df=7)
UCBAdmissions
512+353+120+138+53+22
anova(admit.glm)
exp(cof[,1:2])
exp(cof[,1:2])-1
cof <- summary(admit.glm)$coef # all coefs are significant
cof
exp(cof[,1:2])-1
admitTable
ftable(UCBAdmissions, col.vars="Admit")
ucbTable <- ftable(UCBAdmissions, col.vars="Admit")
ucbTable
margin.table(ucbTable, c(2,1))
margin.table(ucbTable, 1)
?margin.table
class(ucbTable)
dim(ucbTable)
ftable(UCBAdmissions, col.vars="Dept")
dim(ftable(UCBAdmissions, col.vars="Dept"))
ucbTable2 <- ftable(UCBAdmissions, col.vars="Dept")
marginalTable(ucbTable2)
margin.table(ucbTable2, 2)
margin.table(ucbTable2, c(2,3))
oddsRatio(ucbTable)
as.table(ucbTable)
ucbFTable <- ftable(UCBAdmissions, col.vars="Admit")
ucbFTable
ucbFTable2 <- ftable(UCBAdmissions, col.vars="Dept")
ucbFTable2
oddsRatio(ucbFTable)
colnames(ucbFTable)
ucbTable <- as.table(ucbFTable)
colnames(ucbTable)
rownames(ucbTable)
ucbTable
dim(ucbTable)
oddsRatio(ucbTable)
library(DescTools)
OddsRatio(ucbTable)
rowOdds(ucbTable)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
colOdds(ucbTable)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
colOdds(ucbTable)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
colOdds(ucbTable)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
1-pchisq(35.165,df=27)
admitData
admitTable
oddsRatio(mirror(admitTable))
oddsRatio(admitTable)
oddsMale.admit <- 1198/1493;oddsMale.admit
oddsFem.admit <- 557/1278; oddsFem.admit
oddsMale.admit/oddsFem.admit
oddsFem.admit/oddsMale.admit
1-oddsFem.admit/oddsMale.admit
admitTable
admitData
margin.table(admitData, 1)
admitTable
rowProbabilityHat(admitTable)
cbind(admitTable, rowProbabilityHat(admitTable)[,1])
admitData
admitData.prop <- data.frame(Admit.Prop=admitData$admitted/admitData$total,
Reject.Prop=admitData$rejected/admitData$total)
admitData.prop
margin.table(admitData, 2)
admitData
admitData[admitData$gender=="Male"]
admitData[admitData$gender=="Male",]
library(reshape)
melt(admitData)
melt(admitData, id.vars = "gender")
melt(admitData, id.vars = "dept")
admitData
m <- admitData[admitData$gender=="Male",]
f <- admitData[admitData$gender=="Female",]
m
admitData.prop
admitData$total <- admitData$admitted + admitData$rejected
d <- data.frame(AdmitProp=admitData$admitted/admitData$total)
admitData.prop <- data.frame(AdmitProp.Male=d$AdmitProp[1:6,],
AdmitProp.Female=d$AdmitProp[6:12,])
admitData
d <- data.frame(AdmitProp=admitData$admitted/admitData$total)
d
admitData.prop <- data.frame(AdmitProp.Male=d$AdmitProp[1:6,],
admitData.prop <- data.frame(AdmitProp.Male=d$AdmitProp[1:6,],
AdmitProp.Female=d$AdmitProp[7:12,])
rownames(admitData.prop) <- LETTERS[1:6]
admitData.prop
admitData.prop <- NULL
admitData.prop <- data.frame(AdmitProp.Male=d$AdmitProp[1:6,],
AdmitProp.Female=d$AdmitProp[7:12,])
d$AdmitProp[1:6, ]
d$AdmitProp[1:6]
admitData.prop <- data.frame(AdmitProp.Male=d$AdmitProp[1:6],
AdmitProp.Female=d$AdmitProp[7:12])
admitData.prop
rownames(admitData.prop) <- LETTERS[1:6]
admitData.prop
admitData.prop <- data.frame(Dept=LETTERS[1:6],
AdmitProp.Male=d$AdmitProp[1:6],
AdmitProp.Female=d$AdmitProp[7:12])
admitData.prop
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
insectData <- read.table("insect.txt", header=TRUE)
insectData
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A3")
library(ggplot2)
options(digits=10, show.signif.stars = FALSE)
heartData <- data.frame(CK=c(20,60,100,140,180,220,260, 300,340,380,420,460,500),
attack=c(2,13,30,30,21,19,18,13,19,15,7,8,35),
total=c(90,39,38,35,21,20,19,14,19,15,7,8,35))
heartData
count <- cbind(attack=heartData$attack, none=heartData$total - heartData$attack)
heart.glm <- glm(count ~ CK, data=heartData, family=binomial)
anova(heart.glm, test="Chisq")
1 - pchisq(28.140225, df=11)
summary(heart.glm)
cof <- summary(heart.glm)$coef[,1:2]
exp(cof)
exp(cof)-1
intercept = cof[[1]]
intercept
cof
slope = cof[[2]]
medianDose = -intercept/slope; medianDose
medianCK = -intercept/slope; medianCK
anova(heart.glm, test="Chisq")
ResidualDevianceTest(heart.glm)
DevianceTest(heart.glm)
discrData <- read.table("discrim.txt", header=TRUE)
discrData
formLower <- formula(~1) # the minimal model
formUpper <- formula(~ EDUC + EXP + GENDER, data=discrData)
start.model <- glm(HIRE ~ 1, data=discrData)
step.forward.model <- step(start.model, direction="forward",
scope=list(lower=formLower, upper=formUpper))
full.model <- glm(HIRE ~ EDUC + EXP + GENDER, data=discrData)
step.backward.model <- step(full.model, direction="backward",
scope=list(lower=formLower, upper=formUpper))
step.forward.model$family
start.model <- glm(HIRE ~ 1, data=discrData, family=binomial)
full.model <- glm(HIRE ~ EDUC + EXP + GENDER, data=discrData, family=binomial)
step.forward.model <- step(start.model, direction="forward",
scope=list(lower=formLower, upper=formUpper))
step.backward.model <- step(full.model, direction="backward",
scope=list(lower=formLower, upper=formUpper))
step.forward.model$family
hire.glm <- step.forward.model
anova(hire.glm, test="Chisq")
35.164729-14.734845
20.846541-14.734845
1 - pchisq(14.735, df=24)
ResidualDevianceTest(hire.glm)
DevianceTest(hire.glm)
hire.glm
hire.glm
coef(hire.glm)
predict(hire.glm, newdata=data.frame(GENDER=1, EDUC=6,EXP=8), type="response")
predict(hire.glm, newdata=data.frame(GENDER=0, EDUC=6,EXP=8), type="response")
anova(heart.glm, test="Chisq")
1 - pchisq(28.140225, df=11)
summary(heart.glm)
step.forward.model <- step(start.model, direction="forward",
scope=list(lower=formLower, upper=formUpper))
step.backward.model <- step(full.model, direction="backward",
scope=list(lower=formLower, upper=formUpper))
anova(hire.glm, test="Chisq")
1 - pchisq(14.735, df=24)
ResidualDevianceTest(hire.glm)
predict(hire.glm, newdata=data.frame(GENDER=1, EDUC=6,EXP=8), type="response")
predict(hire.glm, newdata=data.frame(GENDER=0, EDUC=6,EXP=8), type="response")
cof#
exp(cof)
exp(cof)-1
1 - pchisq(311.28, df=12)
1-pchisq(35.165,df=27)
3.02835960251/0.03510439287
summary(hire.glm)
-14.248+0.91*8+5.604*1+1.155*6
-14.248+0.91*8+5.604*0+1.155*6
exp(-0.038)/(1+exp(-0.038))
discrData
ResidualDevianceTest(hire.glm)
cof#
summary(hire.glm)
cof <- coef(summary(hire.glm))[,1:2]
cof#
exp(cof)
exp(cof)-1
(exp(cof)-1)*100
coef(summary(hire.glm))
pnorm(2.119409958,lower.tail=F)
pnorm(2.119409958,lower.tail=F)*2
0.05517846125/2
0.03132200199/2
anova(glm(HIRE ~ EXP + EDUC + GENDER,data=discrData, family=binomial()))
anova(glm(HIRE ~ EXP + EDUC + GENDER,data=discrData, family=binomial()), test="Chisq")
hire.glm <- glm(HIRE ~ EXP + EDUC + GENDER,data=discrData, family=binomial
hire.glm <- glm(HIRE ~ EXP + EDUC + GENDER,data=discrData, family=binomial)
hire.glm <- glm(HIRE ~ EXP + EDUC + GENDER,data=discrData, family=binomial)
anova(hire.glm, test="Chisq")
anova(hire.glm, test="Chisq")
summary(hire.glm)
cof <- summary(hire.glm)$coef
cof #
100*(exp(cof)-1)
anova(hire.glm, test="Chisq")
heartData <- data.frame(CK=c(20,60,100,140,180,220,260, 300,340,380,420,460,500),
attack=c(2,13,30,30,21,19,18,13,19,15,7,8,35),
total=c(90,39,38,35,21,20,19,14,19,15,7,8,35))
heartData
count <- cbind(attack=heartData$attack, none=heartData$total - heartData$attack)
heart.glm <- glm(count ~ CK, data=heartData, family=binomial)
anova(heart.glm, test="Chisq")
summary(heart.glm)
medianCK = -intercept/slope; medianCK
qnorm((15-8)/2)
qnorm(0.98)
