runif(100, min=1, max=3)
?"sample"
sample(c(1,2,3), size=100, replace=TRUE)
sample(c(1,2,3), size=100, replace=F)
sample(c(1,2,3), size=100, replace=TRUE)
s <- sample(c(1,2,3), size=100, replace=TRUE)
s == 1
sum(s == 1)
sum(s == 2)
sum(s == 3)
s <- sample(c(1,2,3), size=100, replace=TRUE)
sum(s == 1)
sum(s == 2)
sum(s == 3)
s <- sample(c(1,2,3), size=100, replace=TRUE)
sum(s == 1)
sum(s == 2)
sum(s == 3)
s <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
sum(s == 'A')
sum(s == 'B')
sum(s == 'C')
doorsWithCarEachNight
doorsWithCarEachNight <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
personFirstChoiceEachNight <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
sum(personFirstChoiceEachNight == 'A')
sum(personFirstChoiceEachNight == 'B')
sum(personFirstChoiceEachNight == 'C')
df <- data.frame(CarDoor=doorsWithCarEachNight, PersonChoice=personFirstChoiceEachNight)
df
head(df)
doorsWithCarEachNight == personFirstChoiceEachNight
agreements <- doorsWithCarEachNight == personFirstChoiceEachNight
probWinIfNoSwitch <- sum(agreements)
probWinIfNoSwitch <- sum(agreements) / length(agreements)
probWinIfSwitch <- (length(agreements) - sum(agreements)) / length(agreements)
probWinIfSwitch
probWinIfNoSwitch
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 1 - Introduction/MontyHallProblem.R', echo=TRUE)
popn.size =  1000000  # population of size 1 million
clear #
popn.size =  1000000  # population of size 1 million
pd  = .001 			  # probability of an individual having the disease
pdt = .95             #probability of an individual having the disease testing positive
pct = .10             # probability of an individual not having the disease testing positive.
?sample
popn = sample(c("D","C"), size=popn.size, replace=TRUE, prob=c(pd,1-pd))
popn #
popn[1:60]                ## check the first 60 "people"
sum(popn == "D")   ## count how many people with the disease
test = function(x) {
if (x == "D")
sample(c("P","N"), size=1, prob=c(pdt,1 - pdt))
else
sample(c("P","N"), size=1, prob=c(pct,1 - pct))
}
popn.test = mapply(test, popn,USE.NAMES=FALSE)
popn.test[1:40]
popn.pos = popn[popn.test == "P"]   ##  the number testing positive
print(sum(popn.pos == "D")/length(popn.pos))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_FalsePositive.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_FalsePositive.R', echo=TRUE)
car.door <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
first.choice <- sample(c('A', 'B', 'C'), size=100, replace=TRUE)
confusion.table <- table(car.door, first.choice)
confusion.table
agree <- sum(diag(confusion.table))
agree
probWinIfSwitch <- agree / sum(confusion.table); probWinIfSwitch
probWinIfNoSwitch <- 1 - probWinIfSwitch; probWinIfNoSwitch
sim.results <- numeric(0) # null vector to collect results
for (i in 1:1000) {
# number of 1's in sample of 21 (0,1)'s
num.condition1 <- sum(sample(0:1, size=21, replace=TRUE))
sim.results <- c(sim.results, num.condition1) # accumulate incidences of 1's
}
table(sim.results) # frequency of counts out of 21
sim.results
table(sim.results) # frequency of counts out of 21
sum(sim.results == 3)
sum(sim.results == 10)
m = 1:100
sum(m % 2 == 0)
6 % 2
7 %% 3
6 %% 3
sum(m %% 2 == 0)
setwd('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A1/')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
options(digits = 3, show.signif.stars = FALSE)
insectData <- read.table("insect.txt", header=TRUE)
head(insectData)
# part a) and b)
attach(insectData)
par(mfrow=c(1,1))
plot(Count ~ Ispray, main="Count of Surviving Insects After Each Insecticide")
par(mfrow=c(1,2))
plot(insect.lm, which=1:2)
insect.lm <- lm(Count ~ Ispray, data=insectData)
summary(insect.lm)
# (ii) Model assumptions
par(mfrow=c(1,2))
plot(insect.lm, which=1:2)
par(mfrow=c(2,2))
plot(insect.lm, which=1:4)
shapiro.test(insect.lm$residuals)
insect.sqrt.lm <- lm(sqrt(Count) ~ Ispray, data=insectData)
summary(insect.sqrt.lm)
par(mfrow=c(1,2))
plot(insect.sqrt.lm, which=1:2)
par(mfrow=c(2,2))
plot(insect.sqrt.lm, which=1:4)
shapiro.test(insect.sqrt.lm$residuals)
anova(insect.sqrt.lm)
summary(insect.sqrt.lm)
pred <- predict(insect.sqrt.lm, newdata = data.frame(Ispray="C"),
interval="confidence", level=0.95, type="response")
pred #
sqrtInsectFit <- pred[,1]; sqrtInsectFit
