ggpairs(data=perchData, columns=c(3,4,2), upper=list(continuous="cor"),
diag=list(continuous="barDiag"))
ggpairs(data=perchData, columns=c(3,4,2), upper=list(continuous="cor"),
diag=list(continuous="bar"))
ggpairs(data=perchData, columns=c(3,4,2), upper=list(continuous="cor"),
diag=list(continuous="density"))
ggpairs(data=perchData, columns=c(3,4,2), upper=list(continuous="smooth"))
ggpairs(data=perchData, columns=c(3,4,2), upper=list(continuous="cor"),
diag=list(continuous="density", params=c(colour="magenta")))
ggpairs(data=perchData, columns=c(3,4,2),
upper=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="density", params=c(colour="magenta")))
ggpairs(iris[, 1:4], lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="bar", params=c(colour="blue")),
upper=list(params=list(corSize=6)), axisLabels='show')
ggpairs(data=perchData, columns=c(3,4,2),
lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="density", params=c(colour="magenta")),
upper = list(continuous="cor", params=list(corSize=6)), axisLabels = 'show')
ggpairs(iris[, 1:4], lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="bar", params=c(colour="blue")),
upper=list(params=list(corSize=6)), axisLabels='show')
packageVersion("GGally")
packageVersion("GGally")
update.packages("GGally")
packageVersion("GGally")
version
lowerFn <- function(data, mapping, method = "lm", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
p
}
ggpairs(
iris[, 1:4], lower = list(continuous = wrap(lowerFn, method = "lm")),
diag = list(continuous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 10))
)
lowerFn <- function(data, mapping, method = "lm", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
p
}
ggpairs(
iris[, 1:4], lower = list(continuous = list(lowerFn, method = "lm")),
diag = list(continuous = list("barDiag", colour = "blue")),
upper = list(continuous = list("cor", size = 10))
)
?wrap
ggpairs(data=perchData, columns=c(3,4,2),
lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="density", params=c(colour="magenta")),
upper = list(continuous="cor", params=list(corSize=6)))
ggpairs(data=perchData, columns=c(3,4,2),
lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="density", params=c(colour="magenta")),
upper = list(continuous="cor", params=list(corSize=10)))
ggpairs(data=perchData, columns=c(3,4,2),
lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="density", params=c(colour="magenta")),
upper = list(continuous="cor", params=c(size=10)))
wrap
wrap
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 4 - Multiple Linear Regression/MatricesReading.R', echo=TRUE)
xy.lm$x
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
load("data/Exercises and Examples/ASWELLS.Rdata")
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
summary(arsenic.lm)
interpret.SlopeCoeffs(arsenic.lm)
View(ASWELLS)
pairs(ASWELLS[, c(4,5,6,9)], lower.panel=panel.smooth, upper.panel = panel.cor)
getwd()
aswellsData <- read.table("Chapter 4 - Multiple Linear Regression/aswells_short.txt")
pairs(ASWELLS[, c(4,5,6,9)], lower.panel=panel.smooth, upper.panel = panel.cor)
View(ASWELLS)
nrow(aswellsData)
any(is.na(aswellsData))
ASWELLS[, c(4,5,6,9)]
head(ASWELLS[, c(4,5,6,9)])
pairs(aswellsData[, 1:4], lower.panel=panel.smooth, upper.panel = panel.cor)
?read.table
aswellsData <- read.table("Chapter 4 - Multiple Linear Regression/aswells_short.txt", header=TRUE)
pairs(aswellsData[, 1:4], lower.panel=panel.smooth, upper.panel = panel.cor)
ggpairs(aswellsData, columns=1:4, upper=list(continuous="cor", size=10),
lower=list(continuous="smooth"))
ggpairs(aswellsData, columns=1:4, upper=list(continuous="cor", params=c(size=10)),
lower=list(continuous="smooth"))
ggpairs(aswellsData, columns=1:4, upper=list(continuous="cor", params=c(size=10)),
lower=list(continuous="smooth", params=c(color="blue")))
as <- -5:5
as <- -5:5
as;
bs <- (-5:5)^2
bs #
cor(as, bs)
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=aswellsData)
summary(arsenic.lm)
betaCI(arsenic.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
slopeCI(arsenic.lm)
betaCI(arsenic.lm)
summary(arsenic.lm)
su <- summary(arsenic.lm)
su$coefficients
su$sigma
su$sigma^2
anova(arsenic.lm)
3446366/323
betaCI(arsenic.lm)
confint(arsenic.lm)
slopeCI(arsenic.lm)
betaCI(arsenic.lm)
autoplot(arsenic.lm)
library(ggfortify)
autoplot(arsenic.lm)
plot(arsenic.lm)
par(mfrow=c(1,2))
plot(arsenic.lm)
par(mfrow=c(2,2))
plot(arsenic.lm)
autoplot(arsenic.lm)
LONGITUDE<-90.67;LATITUDE<- 23.74;DEPTHFT<-210
newX<-data.frame(LONGITUDE,LATITUDE,DEPTHFT )
predict(mod1,newdata=newX, interval="confidence")
LONGITUDE <-90.67; LATITUDE <- 23.74; DEPTHFT <- 210
newX <- data.frame(LONGITUDE,LATITUDE,DEPTHFT )
predict(arsenic.lm, newdata=newX, interval="confidence")
predict(arsenic.lm, newdata=newX, interval="prediction")
meanCI(arsenic.lm, x.values=c(LONGITUDE, LATITUDE, DEPTHFT))
fit = arsenic.lm
predictorNames <- names(fit$model)[-1]
df <- data.frame(rbind(x.values))
x.values=c(LONGITUDE, LATITUDE, DEPTHFT
)
df <- data.frame(rbind(x.values))
df
rownames(df) <- ""
colnames(df) <- predictorNames
df
predict(fit, new = df, interval="confidence", level=level)
return(predict(fit, new = df, interval="confidence", level=0.95))
predict(fit, new = df, interval="confidence", level=0.95)
predict(fit, newdata = df, interval="confidence", level=0.95)
newX
df #
class(newX)
class(df) #
LONGITUDE
predict(arsenic.lm, newdata=newX, interval="prediction")
predict(arsenic.lm, newdata=newX, interval="confidence")
meanCI(arsenic.lm, x.values=c(LONGITUDE, LATITUDE, DEPTHFT))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
meanCI(arsenic.lm, x.values=c(LONGITUDE, LATITUDE, DEPTHFT))
rbind(x.values)
df
predictorNames <- names(fit$model)[-1]
df <- data.frame(rbind(x.values))
rownames(df) <- ""
colnames(df) <- predictorNames
df
fit
load("data/Exercises and Examples/ASWELLS.Rdata")
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=ASWELLS)
summary(arsenic.lm)
meanCI(arsenic.lm, x.values=x.values)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
meanCI(arsenic.lm, x.values=x.values)
as.data.frame(c(1:10))
as.data.frame(t(c(1:10)))
data.frame(t(c(1:10)))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
arsenic.lm <- lm(ARSENIC ~ LATITUDE + LONGITUDE + DEPTHFT, data=aswellsData)
LONGITUDE <- 90.67; LATITUDE <- 23.74; DEPTHFT <- 210
newX <- data.frame(LONGITUDE,LATITUDE,DEPTHFT )
predict(arsenic.lm, newdata=newX, interval="confidence")
meanCI(arsenic.lm, x.values=c(LONGITUDE, LATITUDE, DEPTHFT))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
LONGITUDE <- 90.67; LATITUDE <- 23.74; DEPTHFT <- 210
newX <- data.frame(LONGITUDE,LATITUDE,DEPTHFT )
meanCI(arsenic.lm, newX)
newX
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
meanCI(arsenic.lm, x.values=c(LONGITUDE, LATITUDE, DEPTHFT))
meanCI(arsenic.lm, x.values=c(90.67, 23.74, 210))
arsenic.lm$coefficients
c(arsenic.lm$coefficients)
arsenic.lm$coefficients[[1]]
arsenic.lm$coefficients[[2]]
arsenic.lm$coefficients[[3]]
arsenic.lm$coefficients[[4]]
meanCI(arsenic.lm, x.values=c(LATITUDE, LONGITUDE, DEPTHFT))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/FORMULAS.R', echo=TRUE)
meanCI(arsenic.lm, x.values=c(LATITUDE, LONGITUDE, DEPTHFT))
predictCI(arsenic.lm, x.values=c(LATITUDE, LONGITUDE, DEPTHFT))
predict(arsenic.lm, newdata=newX, interval="prediction")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R', echo=TRUE)
interpret.MeanCI(arsenic.lm, x.values=c(LATITUDE, LONGITUDE, DEPTHFT),
x.units=c("degrees", "degrees", "feet"), y.unit = "litres")
interpret.PredictCI(arsenic.lm, x.values=c(LATITUDE, LONGITUDE, DEPTHFT),
x.units=c("degrees", "degrees", "feet"), y.unit = "litres")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R')
library(GGally)
options(digits = 3, show.signif.stars = FALSE)
# read data
perchData <- read.table("Perch.txt", header=TRUE)
head(perchData)
setwd('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_2_Perch/')
perchData <- read.table("Perch.txt", header=TRUE)
head(perchData)
pairs(perchData[, c(3, 4, 2)], lower.panel = panel.smooth, lwd=3, col="blue", upper.panel = panel.cor)
ggpairs(data=perchData, columns=c(3,4,2),
lower=list(continuous="smooth", params=c(colour="blue")),
diag=list(continuous="density", params=c(colour="magenta")),
upper = list(continuous="cor", params=c(size=10)))
?ggpairs
head(perchData)
mod1 <- lm(Weight ~ Length + Width, data=perchData)
perch.maineffects.lm <- lm(Weight ~ Length + Width, data=perchData)
summary(perch.maineffects.lm)
plot(perch.maineffects.lm, which=1)
par(mfrow=c(1,1))
plot(perch.maineffects.lm, which=1)
autoplot(perch.maineffects.lm)
perch.interact.lm <- lm(Weight ~ Length + Width + Length:Width, data=perchData)
summary(perch.interact.lm)
plot(perch.interact.lm, which=1)
autoplot(perch.interact.lm, which=1)
autoplot(perch.interact.lm)
View(perchData)
rs <- perch.interact.lm$residuals
stderr(rs)
rs #
stderr(c(rs))
c(rs)
data.frame(rs) #
as.vector(data.frame(rs)) #
as.vector(rs)
stderror(as.vector(rs))
stderr(as.vector(rs))
?stderr
sd(as.vector(rs))
autoplot(perch.interact.lm, which=2)
plot(perch.interact.lm, which=2)
autoplot(perch.interact.lm, which=2)
shapiro.test(perch.interact.lm$residuals)
summary(perch.interact.lm)$coef
lengthVal <- 30; widthVal <- 6;
meanCI(perch.interact.lm, x.values=c(lengthVal, widthVal))
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), "pounds")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_2_Perch/Practical2_perch.R', echo=TRUE)
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), "pounds")
library(stringr)
str_replace("Length:Width", ":", "*")
str_replace("I(RPM^2)", "I()", "")
patterns <- c("I", ":")
str_replace("Length:Width", patterns[2], "*")
str_replace(c("I(RPM^2)", "Length:Width"), patterns[2], "*")
predictorNames <- c("I(RPM^2)", "Length:Width")
patterns <- c("I", ":")
repls <- c("", "*")
for (i in 1:length(patterns)) {
if(str_detect(predictorNames, patterns[i])){
predictorNames <- str_replace(predictorNames,
patterns[i], repls[i])
}
}
predictorNames
predictorNames <- c("I(RPM^2)", "Length:Width")
str_detect(predictorNames, patterns[1])
detectIndices = str_detect(predictorNames, patterns[1])
predictorNames[detectIndices]
str_replace(predictorNames[detectIndices], patterns[1],repls[1])
predictorNames
patterns <- c("I", ":")
repls <- c("", "*")
newNames <- c()
for (i in 1:length(predictorNames)) {
detectIndices <- str_detect(predictorNames, patterns[i])
newN <- str_replace(predictorNames[detectIndices],
patterns[i], repls[i])
newNames <- c(newNames, newN)
}
newNames
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R', echo=TRUE)
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), "pounds")
meanCI(perch.interact.lm, x.values=c(lengthVal, widthVal))
fit = perch.interact.lm
x.values=c(lengthVal, widthVal)
x.units=c("cm", "cm")
y.unit="pounds"
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), y.unit="pounds")
if(length(x.units) == 0){
x.units <- list()
x.units <- replicate(length(fit$coeff)-1, "unit")
}
# Making the mean CI's
mat <- round(meanCI(fit, x.values=x.values, level=level), 4)
level=0.95
mat <- round(meanCI(fit, x.values=x.values, level=level), 4)
mean.ci <- data.frame(mat)
yName <- names(fit$model)[1]
yNameValue <- paste(yName, "Value", sep="")
lowerName <- paste((1-level)/2 * 100, "%")
upperName <- paste(((1-level)/2 + level)*100, "%")
colnames(mean.ci) <- c(yNameValue, lowerName, upperName)
mean.ci
xdf <- data.frame(rbind(x.values))
cleanUpNames(names(fit$coefficients)[-1])
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R', echo=TRUE)
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), y.unit="pounds")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R')
library(GGally)
options(digits = 3, show.signif.stars = FALSE)
# read data
perchData <- read.table("Perch.txt", header=TRUE)
head(perchData)
perch.interact.lm <- lm(Weight ~ Length + Width + Length:Width, data=perchData)
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), y.unit="pounds")
lengthVal <- 30; widthVal <- 6;
meanCI(perch.interact.lm, x.values=c(lengthVal, widthVal))
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), y.unit="pounds")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R', echo=TRUE)
interpret.MeanCI(perch.interact.lm, x.values=c(lengthVal, widthVal),
x.units=c("cm", "cm"), y.unit="pounds")
newNames <- c()
theNames = names(perch.interact.lm$coefficients[-1])
theNames
newNames <- c()
for (i in 1:length(theNames)) {
detectIndices <- str_detect(theNames, patterns[i])
newN <- str_replace(theNames[detectIndices],
patterns[i], repls[i])
newNames <- c(newNames, newN)
}
patterns=c("I",":")
repls=c("", "*")
for (i in 1:length(theNames)) {
detectIndices <- str_detect(theNames, patterns[i])
newN <- str_replace(theNames[detectIndices],
patterns[i], repls[i])
newNames <- c(newNames, newN)
}
newNames
newNames <- c()
detectIndices <- str_detect(theNames, patterns[1])
detectIndices
newN <- str_replace(theNames[detectIndices],
patterns[1], repls[1])
newN
!all(F, F)
!all(F, T, T)
all(F, F)
newNames <- c()
for (i in 1:length(theNames)) {
detectIndices <- str_detect(theNames, patterns[i])
# if not all false, then do the below replacement
if(!all(detectIndices)){
newN <- str_replace(theNames[detectIndices],
patterns[i], repls[i])
newNames <- c(newNames, newN)
}
}
detectIndices <- str_detect(theNames, patterns[1])
!all(detectIndices)
detectIndices
all(detectIndices) == FALSE
all(c(T, T, F)) == FALSE
sum(detectIndices)
newNames <- c()
for (i in 1:length(theNames)) {
detectIndices <- str_detect(theNames, patterns[i])
# if not all false, then do the below replacement
if(sum(detectIndices) != 0){
newN <- str_replace(theNames[detectIndices],
patterns[i], repls[i])
newNames <- c(newNames, newN)
}
}
sum(detectIndices)
detectIndices <- str_detect(theNames, patterns[1])
detectIndices
sum(detectIndices)
sum(detectIndices) != 0
if(sum(detectIndices) != 0){
print("hi")}
sum(c(TRUE, TRUE, FALSE))
sum(c(TRUE, T, FALSE))
for (i in 1:length(theNames)) {
detectIndices <- str_detect(theNames, patterns[i])
# if not all false, then do the below replacement
if(sum(detectIndices) != 0){
newN <- str_replace(theNames[detectIndices],
patterns[i], repls[i])
newNames <- c(newNames, newN)
}
}
return(newNames)
for (i in 1:length(theNames)) {
)}
meanCI(perch.interact.lm, x.values=c(lengthVal, widthVal))
setwd('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_2_Perch/')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/INTERPRET.R')
library(GGally)
options(digits = 3, show.signif.stars = FALSE)
conc <- c(rep(seq(from: 0.5, to = 3, by = 0.5), 2))
conc <- c(rep(seq(from = 0.5, to = 3, by = 0.5), 2))
con #
conc #
skin <- c(13.9, 14.08, 13.75, 13.32, 13.45, 13.59, 13.81, 13.99, 13.60, 13.39,
13.53, 13.64)
plot(skin ~ conc)
ratsData <- data.frame(Skin=skin, Concentration=conc)
ggplot(ratsData, aes(x = Concentration, y = Skin)) +
geom_point(shape=19, size=3, color="dodgerblue")
ggplot(ratsData, aes(x = Conc, y = Skin)) +
ratsData <- data.frame(Skin=skin, Conc=conc)
ratsData <- data.frame(Skin=skin, Conc=conc)
ggplot(ratsData, aes(x = Conc, y = Skin)) +
geom_point(shape=19, size=3, color="dodgerblue")
quad.lm <- lm(Skin ~ Conc + I(Conc^2), data=ratsData)
summary(quad.lm)
quad.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3), data=ratsData)
summary(quad.lm)
cubic.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3), data=ratsData)
summary(cubic.lm)
anova(cubic.lm)
quartic.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3) + I(Conc^4), data=ratsData)
summary(quartic.lm)
skin6.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3) + I(Conc^4)
+ I(Conc^5) + I(Conc^6), data=ratsData)
summary(skin6.lm)
skin4.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3) + I(Conc^4), data=ratsData)
skin3.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3), data=ratsData)
skin5.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3) + I(Conc^4) + I(Conc^5),
data=ratsData)
skin5.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3) + I(Conc^4) + I(Conc^5),
data=ratsData)
summary(skin5.lm)
skin2.lm <- lm(Skin ~ Conc + I(Conc^2), data=ratsData)
summary(skin2.lm)
anova(skin2.lm)
skin5.lm <- update(skin4.lm, .~. + I(Conc^5), data=ratsData)
summary(skin5.lm)
anova(skin5.lm)
par(mfrow=c(1,2))
plot(skin4.lm)
plot(skin4.lm, which=1:2)
library(ggfortify)
autoplot(skin4.lm, which=1:2)
shapiro.test(skin4.lm$residuals)
pred.dfr <- data.frame(conc=seq(0.5, 3, 0.05))
head(pred.dfr)
pred <- predict(skin4.lm, newdata=pred.dfr, se.fit=TRUE, interval="confidence")
pred.dfr <- data.frame(Conc=seq(0.5, 3, 0.05))
head(pred.dfr)
pred <- predict(skin4.lm, newdata=pred.dfr, se.fit=TRUE, interval="confidence")
pred
head(pred)
fit <- pred$fit
fit
fit <- pred$fit[,1]
fit
lower <- pred$fit[,2]
upper <- pred$fit[,3]
plot(ratsData$Skin, ratsData$Conc)
lines(pred.dfr$Conc, fit, lty=1)
par(mfrow=c(1,1))
plot(ratsData$Skin, ratsData$Conc)
lines(pred.dfr$Conc, fit, lty=1)
plot(ratsData$Skin ~ ratsData$Conc)
lines(pred.dfr$Conc, fit, lty=1)
lines(pred.dfr$Conc, lower, lty=2)
lines(pred.dfr$Conc, upper, lty=2)
plot(ratsData$Skin ~ ratsData$Conc, ylim = c(min(lower), max(upper)))
lines(pred.dfr$Conc, fit, lty=1)
lines(pred.dfr$Conc, lower, lty=2)
lines(pred.dfr$Conc, upper, lty=2)
legend(x=2,y=14.2, legend=c("Fitted Curve", "95% Confidence Bands"), lty=1:2)
setwd('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
options(digits = 3, show.signif.stars = FALSE)
hollyData <- read.table("Hollywood.txt", header=TRUE)
setwd('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A1/')
hollyData <- read.table("Hollywood.txt", header=TRUE)
head(hollyData)
pairs(hollyData, lower.panel = panel.smooth, lwd=3, col="blue",
upper.panel = panel.cor)
pairs(hollyData, lower.panel = panel.smooth, upper.panel = panel.cor)
ggpairs(hollyData, upper=list(continuous="cor"), lower=list(continuous="smooth"))
ggpairs(hollyData, upper=list(continuous="cor", params=c(size=10)),
lower=list(continuous="smooth", params=c(colour="blue")))
