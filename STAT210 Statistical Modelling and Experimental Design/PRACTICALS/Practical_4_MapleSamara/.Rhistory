with(potatoData, tapply(ROT, INDEX = list(TEMP, BAC), mean))
with(potatoData, tapply(ROT, OXYGEN), mean)
with(potatoData, tapply(ROT, OXYGEN, mean))
with(potatoData, interaction.plot(x.factor = BAC, trace.factor = TEMP,
response=ROT))
anova(rot2.lm)
rot2.lm <- lm(ROT ~ OXYGEN + BAC + TEMP + BAC:TEMP, data=potatoData)
anova(rot2.lm)
rot2.lm <- lm(ROT ~ OXYGEN + BAC:TEMP, data=potatoData)
anova(rot2.lm)
rot2.lm <- lm(ROT ~ OXYGEN + BAC*TEMP, data=potatoData)
anova(rot2.lm)
with(potatoData, tapply(ROT, INDEX = list(TEMP, BAC), mean))
with(potatoData, tapply(ROT, OXYGEN, mean)) # oxygen not sig, strictly speaking,
with(potatoData, interaction.plot(x.factor = OXYGEN, trace.factor = BAC,
response=ROT))
with(potatoData, tapply(ROT, list(TEMP, OXYGEN), mean))
with(potatoData, tapply(ROT, list(BAC, OXYGEN), mean))
depressionData <- read.table("depression.txt", header=TRUE)
View(depressionData)
library(lattice)
xyp <- xyplot(effect ~ age | treatment, data=depressionData, layout=c(3,1),
panel=function(x,y) { panel.xyplot(x,y);
panel.lmline(x, y) })
xyp <- xyplot(effect ~ age | treat, data=depressionData, layout=c(3,1),
panel=function(x,y) { panel.xyplot(x,y);
panel.lmline(x, y) })
xyp <- xyplot(response ~ age | treat, data=depressionData, layout=c(3,1),
panel=function(x,y) { panel.xyplot(x,y);
panel.lmline(x, y) })
xyp
trellis.device(color=F)
xyp <- xyplot(response ~ age | treat, data=depressionData, layout=c(3,1),
panel=function(x,y) { panel.xyplot(x,y);
panel.lmline(x, y) })
xyp
trellis.device(color=T)
xyp <- xyplot(response ~ age | treat, data=depressionData, layout=c(3,1),
panel=function(x,y) { panel.xyplot(x,y);
panel.lmline(x, y) })
xyp
depress1.lm <- lm(response ~ age * treat, data=depressionData, x=TRUE)
anova(depress1.lm)
summary(depress1.lm)
betaCI(depress1.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 5 - Principles of Model Building/Lecture_Depression.R', echo=TRUE)
predict(depress1.lm, newdata= data.frame(treat="A"), interval="conf", type="response")
dieselData <- read.table("DIESEL.txt", header=TRUE)
perform.lm <- lm(PERFORM ~ FUEL*BRAND, data=dieselData)
tapply(PERFORM, list(FUEL, BRAND), mean) # yuo can see they match up
attach(dieselData)
tapply(PERFORM, list(FUEL, BRAND), mean) # yuo can see they match up
detach(dieselData)
attach(depressionData)
tapply(response, treat)
tapply(response, treat, mean)
tapply(response, list(treat, age), mean)
tapply(response, treat, mean)
vector
?tapply
tapply(response, treat, mean)
depress0.lm <- lm(response ~ treat/age - 1, data=depressionData)
anova(depress0.lm)
beta0 <- summary(depress0.lm)$coefficients
beta0
beta0[,1:2]
confint(depress0.lm)
betaCI(depress0.lm)
tapply(response, treat, mean)
powerData <- read.table("POWERLOADS.txt", header=TRUE)
View(powerData)
potatoData <- read.table("potatoes.txt", header=TRUE)
View(potatoData)
with(potatoData, tapply(ROT, INDEX = list(TEMP, BAC), mean))
rot2.lm <- lm(ROT ~ OXYGEN + BAC*TEMP, data=potatoData)
rot0.lm <- lm(ROT ~ OXYGEN + BAC*TEMP -1, data=potatoData)
summary(rot0.lm)
with(potatoData, tapply(ROT, INDEX = list(TEMP, BAC), mean))
with(potatoData, tapply(ROT, INDEX = list(TEMP, BAC, OXYGEN), mean))
with(potatoData, tapply(ROT, INDEX = list(TEMP, BAC), mean))
rot.lm <- lm(ROT ~ BAC/TEMP-1, data=potatoData)
betaCI(rot.lm)
with(potatoData, tapply(ROT, list(BAC, TEMP), mean))
betaCI(depress0.lm)
depressionData$treat <- relevel(depressionData$treat, ref="B")
depress.A.lm <- lm(response ~ age * treat, data=depressionData, x=TRUE)
depress.B.lm <- update(depress.A.lm)
betaCI(depress.B.lm)
anova(depress.B.lm)
betaCI(depress.B.lm)
residualFittedPlot(depress.B.lm)
normalQQPlot(depress.B.lm)
shapiro.test(depress.B.lm$residuals)
View(depressionData)
ord <- order(depressionData$treat, depressionData$age)
ord
detach(depressionData)
detach(depressionData)
depressionData.ord <- depressionData[ord, ]
depressionData.ord
depressionData <- relevel(depressionData$treat, ref="A")
depressionData.ord <- depressionData[ord, ]
depressionData.ord
depressionData <- relevel(depressionData$treat, ref="A")
depressionData$treat <- relevel(depressionData$treat, ref="A")
depressionData <- read.table("depression.txt", header=TRUE)
depressionData$treat <- relevel(depressionData$treat, ref="B")
ord <- order(depressionData$treat, depressionData$age)
ord
depressionData$treat <- relevel(depressionData$treat, ref="A")
depressionData.ord <- depressionData[ord, ]
depressionData.ord
depressionData <- read.table("depression.txt", header=TRUE)
ord <- order(depressionData$treat, depressionData$age)
depressionData.ord <- depressionData[ord, ]
depressionData.ord
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 5 - Principles of Model Building/Lecture_Depression.R', echo=TRUE)
preds <- predict(depress.A.lm, newdata=depressionData.ord, interval="confidence")
cbind(depressionData, preds)
cbind(depressionData.ord, preds)
fit.plot <- xyplot(response + depress.A.lm + lwr + upr ~ age|treat,
data=depressionData.ord, layout=c(3,1),
ylab-"response", panel=plot.profiles)
fit.plot <- xyplot(response + depress.A.lm + lwr + upr ~ age|treat,
data=depressionData.ord, layout=c(3,1),
ylab="response", panel=plot.profiles)
predsAndData <- cbind(depressionData.ord, preds)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R', echo=TRUE)
fit.plot <- xyplot(response + fit + lwr + upr ~ age|treat,
data=predsAndData, layout=c(3,1),
ylab="response", panel=plot.profiles)
fit.plot
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_3_Rats/Practical_3_Rats_PolyReg.R', echo=TRUE)
summary(skin2.lm)
summary(skin3.lm)
anova(skin2.lm)
summary(skin3.lm)
anova(skin3.lm) # seeing that after fitting the linear and quadratic term,
skin4.lm <- lm(Skin ~ Conc + I(Conc^2) + I(Conc^3) + I(Conc^4), data=ratsData)
summary(skin4.lm)
anova(skin4.lm)
skin5.lm <- update(skin4.lm, .~. + I(Conc^5), data=ratsData)
summary(skin5.lm)
anova(skin5.lm)
par(mfrow=c(1,2))
plot(skin4.lm, which=1:2)
autoplot(skin4.lm, which=1:2)
autoplot(skin4.lm, which=1:2, add.smooth=F)
head(pred.dfr)
pred <- predict(skin4.lm, newdata=pred.dfr, se.fit=TRUE, interval="confidence")
fit <- pred$fit[,1]
lower <- pred$fit[,2] # lower limits
upper <- pred$fit[,3]
par(mfrow=c(1,1))
plot(ratsData$Skin ~ ratsData$Conc, ylim = c(min(lower), max(upper)))
plot(Skin ~ Conc, ylim = c(min(lower), max(upper)), data=ratsData)
lines(pred.dfr$Conc, fit, lty=1)
lines(pred.dfr$Conc, lower, lty=2)
lines(pred.dfr$Conc, upper, lty=2)
legend(x=2,y=14.2, legend=c("Fitted Curve", "95% Confidence Bands"), lty=1:2)
summary(skin3.lm)
betaCI(skin3.lm)
betaCI(skin4.lm)
anova(skin4.lm)
summary(skin4.lm)
shapiro.test(skin4.lm$residuals) # no reason to reject null that
k
autoplot(skin4.lm, which=1:2)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data")
load("Cases/TRUCKING.Rdata")
View(TRUCKING)
load("Cases/TRUCKING4.Rdata")
View(TRUCKING4)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/CARGO.Rdata")
View(CARGO)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/DIESEL.Rdata")
View(DIESEL)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/FLAG.Rdata")
View(FLAG)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/FTC.Rdata")
View(FTC)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/RODMOLD.Rdata")
View(RODMOLD)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/ROADBIDS.Rdata")
View(ROADBIDS)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/SPIDERS.Rdata")
View(SPIDERS)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/TIRES.Rdata")
View(TIRES)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/WPOWER50.Rdata")
View(WPOWER50)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/UFFSAL.Rdata")
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/DIETSTUDY.Rdata")
View(DIETSTUDY)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/")
load("data/Exercises and Examples/CLERICAL.Rdata")
options(digits=10)
clerical.all <- lm(Y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7, data=CLERICAL)
summary(clerical.all)
clerical.start <- lm(Y ~ 1, data=CLERICAL)
clerical.stepwise.both <- step(clerical.start, scope=formula(clerical.all), test="F")
formula(clerical.stepwise.both)
summary(clerical.stepwise.both)
load("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/data/Exercises and Examples/EPAGAS.Rdata")
View(EPAGAS)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_4_MapleSamara/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R')
library(ggplot2)
samaraData <- read.table("samara.txt", header=TRUE)
View(samaraData)
library(lattice)
options(digits=6, show.signif.stars = F)
xyp <- xyplot(Velocity ~ Load | Tree, data=samaraData,
layout=c(3,1),
panel=function(x,y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
xyp
View(samaraData)
samaraData$Tree <- factor(samaraData$Tree)
xyp <- xyplot(Velocity ~ Load | Tree, data=samaraData,
layout=c(3,1),
panel=function(x,y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
xyp
samaraData <- read.table("samara.txt", header=TRUE)
samaraData$Tree <- factor(samaraData$Tree)
samara.interact.lm <- lm(Velocity ~ Load * Tree, data=samaraData)
anova(samara.interact.lm)
options(digits=10, show.signif.stars = F)
samara.interact.lm <- lm(Velocity ~ Load * Tree, data=samaraData)
anova(samara.interact.lm)
samara.main.lm <- lm(Velocity ~ Load + Tree, data=samaraData)
anova(samara.main.lm)
samara.simple.lm <- lm(Velocity ~ Load, data=samaraData)
anova(samara.simple.lm)
summary(samara.simple.lm)
anova(samara.simple.lm)
anova(samara.interact.lm, samara.main.lm, samara.simple.lm)
formLower <- formula( ~ 1)
formUpper <- formula( ~ Load + Tree + Load:Tree, data=samaraData)
start.model <- lm(Velocity ~ 1, data=samaraData)
step.forward.model <- step(start.model, direction="forward",
scope=list(lower=formLower, upper=formUpper))
summary(step.forward.model)
formLower
formUpper
start.model <- lm(Velocity ~ Load*Tree, data=samaraData)
step.back.model <- step(start.model, direction = "forward",
scope=list(lower=formLower, upper=formUpper))
start.model <- lm(Velocity ~ 1, data=samaraData)
step.forward.model <- step(start.model, direction="forward",
scope=list(lower=formLower, upper=formUpper))
start.model <- lm(Velocity ~ Load*Tree, data=samaraData)
step.back.model <- step(start.model, direction = "forward",
scope=list(lower=formLower, upper=formUpper))
start.model <- lm(Velocity ~ Load + Tree + Load:Tree, data=samaraData)
step.back.model <- step(start.model, direction = "backwards",
scope=list(lower=formLower, upper=formUpper))
step.back.model <- step(start.model, direction = "backward",
scope=list(lower=formLower, upper=formUpper))
summary(step.back.model)
anova(step.back.model)
betaCI(step.back.model)
betas <- betaCI(step.back.model)
betas
paste(betas$Estimate[[1]])
betas
class(betas)
paste(betas[1,1])
cat(betas[1,1], " + ")
cat(betas[1,1], " + ", betas[1,2])
cat(betas[1,1], " + ", betas[1,2], " * Load")
cat(betas[1,1], " + ", betas[1,2], " * Load", sep="")
betas
cat(betas[1,1] + betas[1,3], "+", betas[1,2] + betas[1,5], "* Load")
betas[1,4]
betas[1,2]
cat(betas[1,1], " + ", betas[1,2], " * Load", sep="")
cat(betas[1,1], " + ", betas[2,1], " * Load", sep="")
betas
cat(betas[1,1] + betas[3,1], "+", betas[2,1] + betas[5,1], "* Load")
cat(betas[1,1] + betas[4,1] + "+", betas[2,1] + betas[6,1], "* Load")
cat(betas[1,1] + betas[4,1], "+", betas[2,1] + betas[6,1], "* Load")
betas[2,1]
residualFittedPlot(samara.interact.lm)
normalQQPlot(samara.interact.lm)
shapiro.test(samara.interact.lm$residuals)
samaraData$Tree <- factor(samaraData$Tree, labels = c("T1", "T2", "T3"))
xyp <- xyplot(Velocity ~ Load | Tree, data=samaraData,
layout=c(3,1),
panel=function(x,y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
xyp
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R')
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R.R')
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/ASSIGNMENTS/A2/")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R.R')
options(digits=10, show.signif.stars = F)
data("ToothGrowth")
head(ToothGrowth)
ToothGrowth
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
attach(ToothGrowth)
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
interaction.plot(x.factor=supp, trace.factor = dose, response=len)
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_4_MapleSamara/")
library(ggplot2)
library(lattice)
options(digits=10, show.signif.stars = F)
samaraData <- read.table("samara.txt", header=TRUE)
samaraData$Tree <- factor(samaraData$Tree, labels = c("T1", "T2", "T3"))
xyp <- xyplot(Velocity ~ Load | Tree, data=samaraData,
layout=c(3,1),
panel=function(x,y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
xyp
View(samaraData)
depressionData <- read.table("depression.txt", header=TRUE)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 5 - Principles of Model Building/lecturedata/")
depressionData <- read.table("depression.txt", header=TRUE)
xyp <- xyplot(response ~ age | treat, data=depressionData,
layout=c(3,1), # by cols = 3, then rows = 1
panel=function(x,y) {
panel.xyplot(x,y);  # scatterplot
panel.lmline(x, y) }) # least squares on top of each scatter
xyp
samaraData
xyp <- xyplot(len ~ dose | supp, data=ToothGrowth,
layout=c(3,1),
panel=function(x,y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
xyp
xyp <- xyplot(len ~ dose | supp, data=ToothGrowth,
layout=c(2,1),
panel=function(x,y){
panel.xyplot(x, y)
panel.lmline(x, y)
})
xyp
ggplot(ToothGrowth, aes(x=dose, y=len, group=supp)) + geom_boxplot()
ggplot(ToothGrowth, aes(x=supp, y=len, group=dose)) + geom_boxplot()
ToothGrowth$dose <- factor(ToothGrowth$dose)
data("ToothGrowth")
ToothGrowth$dose <- factor(ToothGrowth$dose)
attach(ToothGrowth)
detach(ToothGrowth)
detach(ToothGrowth)
detach(ToothGrowth)
data("ToothGrowth")
ToothGrowth$dose <- factor(ToothGrowth$dose)
attach(ToothGrowth)
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
ggplot(ToothGrowth, aes(x=supp, y=len, group=dose)) + geom_boxplot()
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot()
ggplot(ToothGrowth, aes(x=supp, y=len)) + geom_boxplot(outlier.colour = "red",
outlier.size = 4)
ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) + geom_boxplot(outlier.colour = "red",
outlier.size = 4)
ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_boxplot(outlier.colour = "red", outlier.size = 6)
ggplot(ToothGrowth, aes(x=dose, y=len, fill=supp, color=dose)) +
geom_boxplot(outlier.colour = "red", outlier.size = 6)
ggplot(ToothGrowth, aes(x=dose, y=len, group=supp, color=dose)) +
geom_boxplot(outlier.colour = "red", outlier.size = 6)
ggplot(ToothGrowth, aes(x=dose, y=len, group=supp, color=supp)) +
geom_boxplot(outlier.colour = "red", outlier.size = 6)
boxplot(ToothGrowth)
plot(len ~ dose * supp)
plot(len ~ dose * supp, which=1)
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
interaction.plot(x.factor=dose, trace.factor = supp, response=len,
title="Interaction Plot of Dose versus Tooth Length for Different Levels of Supp")
interaction.plot(x.factor=dose, trace.factor = supp, response=len,
title="Interaction Plot of Dose versus Tooth Length for
Different Levels of Supp")
interaction.plot(x.factor=dose, trace.factor = supp, response=len,
title="Interaction Plot of Dose versus Tooth Length for
Different Levels of Supp")
?interaction.plot
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
View(ToothGrowth)
tooth.interact.lm <- lm(len ~ dose * supp, data=ToothGrowth)
anova(tooth.interact.lm)
summary(tooth.interact.lm)
interaction.plot(x.factor=dose, trace.factor = supp, response=len)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Chapter 5 - Principles of Model Building/lecturedata/")
head(dieselData)
dieselData <- read.table("DIESEL.txt", header=TRUE)
head(dieselData)
# Need signif.tests to see if interactions are significant, since
with(dieselData, interaction.plot(x.factor = FUEL, trace.factor = BRAND,
response=PERFORM))
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_4_MapleSamara/")
samaraData <- read.table("samara.txt", header=TRUE)
samaraData$Tree <- factor(samaraData$Tree, labels = c("T1", "T2", "T3"))
# MODEL 1: INTERACTION
samara.interact.lm <- lm(Velocity ~ Load * Tree, data=samaraData)
anova(samara.interact.lm)
# the interaction term is marginally significant
# MODEL 2: MAIN EFFECTS
samara.main.lm <- lm(Velocity ~ Load + Tree, data=samaraData)
anova(samara.main.lm)
# given we fitted Load, tree is not significant.
# MODEL 3: simple linear regression with just Load
samara.simple.lm <- lm(Velocity ~ Load, data=samaraData)
anova(samara.simple.lm)
#summary(samara.simple.lm) # same last p-values
# COMPARE THE THREE MODELS
anova(samara.interact.lm, samara.main.lm, samara.simple.lm)
# INTERPRET:
# 2nd row - pvalue=0.0501 marginally significant, tests between Model Interaction
# and Model Main. We see the differing term (Load:Tree) is not significant because
# of 0.05 p-value.
# 3rd row - pvalue=0.38. The only differing term between Model Main and Model Simple
# is the tree term and p=0.38 so Tree is not significant.
# CONCLUDE: only the Simple Load model is left so choose that one.
# But if we chose alpha sig level = 0.10 then we would go with the interaction
# model.
# PART b, ii) fit maximal model, forwards stepwise regression to test whether
# interaction should be retained
formLower <- formula( ~ 1)
formUpper <- formula( ~ Load + Tree + Load:Tree, data=samaraData)
start.model <- lm(Velocity ~ 1, data=samaraData)
step.forward.model <- step(start.model, direction="forward",
scope=list(lower=formLower, upper=formUpper))
# We started with minimal model and AIC for minimal is -120.45. Adding
# Load and Tree lowers the AIC respectively by -174.27 and -141.39. Load
# gives the lowest AIC so choose Load as the predictor.
# Now in final step, adding tree reduces AIC from -174.27 to -172.17 so
# do not choose Tree. Just remain with the Load model.
summary(step.forward.model)
# INTERPRET COEFS: Load coef is significant.
# PART b, iii) fit backwards stepwise
formLower
formUpper
start.model <- lm(Velocity ~ Load + Tree + Load:Tree, data=samaraData)
step.back.model <- step(start.model, direction = "backward",
scope=list(lower=formLower, upper=formUpper))
# AIC for model with interaction term is -175.4 and removing the
# interaction term Load:Tree would increase AIC to -172.17
# So choose to keep it. final model contains interaction term.
summary(step.back.model)
anova(step.back.model)
betas <- betaCI(step.back.model)
betas
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R.R')
summary(step.back.model)
anova(step.back.model)
betas <- betaCI(step.back.model)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R.R')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/Rfunctions.R')
betas <- betaCI(step.back.model)
betas
