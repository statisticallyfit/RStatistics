lower=eff[[xName]]$lower, upper=eff[[xName]]$upper,
stringsAsFactors = TRUE)
df <- setNames(df, nm=c(xName, yName, "lower", "upper"))
# Plot the data
ggplot(df, aes(x=xName, y=yName)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=0.3,size=1) +
geom_line(color="dodgerblue", aes(group=1), size=1) +
geom_point(size=5, shape=19)
}
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/FORMULAS.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/DATA.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
options(show.signif.stars = FALSE)
library(effects)
cottonData <- data.frame(Location=c(rep("1",3), rep("2",3), rep("3",3), rep("4",3)),
Herbicide=rep(c("low","medium","high"), 4),
Yield=c(12.7,15.2,12.3,13,16.2,9.4,15.6,13.7,9.1,7.1,7.8,4.7),
stringsAsFactors = TRUE)
cottonData
cotton.crd.lm <- lm(Yield ~ Herbicide, data=cottonData)
CRD.eff <- allEffects(cotton.crd.lm)
plot(CRD.eff)
plotEffect(cotton.crd.lm)
library(effects)
plotEffect <- function(fit){
eff <- allEffects(fit)
# Now there are only 2 factors so we just have 2 plots
xName <- names(eff)[[1]]
yName <- eff[[xName]]$response
# Make the df of information
df <- data.frame(X=eff[[xName]]$variables[[xName]]$levels,
Y=eff[[xName]]$fit,
lower=eff[[xName]]$lower, upper=eff[[xName]]$upper,
stringsAsFactors = TRUE)
df <- setNames(df, nm=c(xName, yName, "lower", "upper"))
# Plot the data
ggplot(df, aes(x=xName, y=yName)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=0.3,size=1) +
geom_line(color="dodgerblue", aes(group=1), size=1) +
geom_point(size=5, shape=19)
}
plotEffect(cotton.crd.lm)
names(CRD.eff)
names(CRD.eff)[1]
names(CRD.eff)[[1]]
names(CRD.eff)[[[1]]]
names(CRD.eff)[[1]
]
fit = cotton.crd.lm
eff <- allEffects(fit)
xName <- names(eff)[[1]]
xName
yName <- eff[[xName]]$response
df <- data.frame(X=eff[[xName]]$variables[[xName]]$levels,
Y=eff[[xName]]$fit,
lower=eff[[xName]]$lower, upper=eff[[xName]]$upper,
stringsAsFactors = TRUE)
df <- setNames(df, nm=c(xName, yName, "lower", "upper"))
ggplot(df, aes(x=xName, y=yName)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=0.3,size=1) +
geom_line(color="dodgerblue", aes(group=1), size=1) +
geom_point(size=5, shape=19)
}
plotEffect <- function(fit){
eff <- allEffects(fit)
# Now there are only 2 factors so we just have 2 plots
xName <- names(eff)[[1]]
yName <- eff[[xName]]$response
# Make the df of information
df <- data.frame(X=eff[[xName]]$variables[[xName]]$levels,
Y=eff[[xName]]$fit,
lower=eff[[xName]]$lower, upper=eff[[xName]]$upper,
stringsAsFactors = TRUE)
df <- setNames(df, nm=c(xName, yName, "lower", "upper"))
# Plot the data
ggplot(df, aes_string(x=xName, y=yName)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width=0.3,size=1) +
geom_line(color="dodgerblue", aes(group=1), size=1) +
geom_point(size=5, shape=19)
}
fit = NULL; eff = NULL; xName=NULL; yName=NULL; df=NULL
plotEffect(cotton.crd.lm)
plot(CRD.eff)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
plotEffect<- NULL;
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
plot(CRD.eff)
g1 <- effectPlot(cotton.crd.lm)
rbind(g1, g1)
library(gtable)
e1 =allEffects(lm(Yield ~ Location, data=cottonData))
e1 = CRD.eff
e1 =allEffects(lm(Yield ~ Location, data=cottonData))
e2 = CRD.eff
cotton.rcb.lm <- lm(Yield ~ Location + Herbicide, data=cottonData)
RCB.eff <- allEffects(cotton.rcb.lm)
plot(RCB.eff)
data.frame(LocSingle=e1$Location$fit, LocSingleLower=e1$Location$lower, LocSingleUpper=e1$Location$upper, LocBoth=RCB.eff$Location$fit, LocBothLower=RCB.eff$Location$lower, LocBothUpper=RCB.eff$Location$upper)
names(RCB.eff)[["Location"]]
names(RCB.eff)[[1]]
names(RCB.eff)[[2]]
RCB.eff[["Herbicide"]]$response
RCB.eff[["Herbicide"]]$lower
library(ggplot2)
p1 <- qplot(mpg, wt, data = mtcars, colour = cyl)
p2 <- qplot(mpg, data = mtcars) + ggtitle("title")
p3 <- qplot(mpg, data = mtcars, geom = "dotplot")
p1
library(gtable)
g2 <- ggplotGrob(p2)
g3 <- ggplotGrob(p3)
g <- rbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
library(gtable)
g2 <- ggplotGrob(p2)
g3 <- ggplotGrob(p3)
g <- cbind(g2, g3, size = "first")
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
library(gtable)
g2 <- ggplotGrob(p2)
g3 <- ggplotGrob(p3)
g <- cbind(g2, g3)
g$widths <- unit.pmax(g2$widths, g3$widths)
grid.newpage()
grid.draw(g)
pushViewport(viewport(layout=grid.layout(1,1)))
effectPlot(cotton.crd.lm)
pushViewport(viewport(layout=grid.layout(1,2)))
effectPlot(cotton.crd.lm)
effectPlot(cotton.rcb.lm)
names(cotton.rcb.lm)
names(cotton.rcb.lm$model)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
require(gridExtra)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
plot(RCB.eff)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
effectPlot(cotton.crd.lm)
effectPlot(cotton.crd.lm)
effectPlot(cotton.crd.lm)
effectPlot(cotton.rcb.lm)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.rcb.lm)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
cottonData$Herbicide <- relevel(cottonData$Herbicide, ref="low")
levels(cottonData$Herbicide)
cottonData <- data.frame(Location=c(rep("1",3), rep("2",3), rep("3",3), rep("4",3)),
Herbicide=rep(c("low","between","high"), 4),
Yield=c(12.7,15.2,12.3,13,16.2,9.4,15.6,13.7,9.1,7.1,7.8,4.7),
stringsAsFactors = TRUE)
cottonData$Herbicide <- relevel(cottonData$Herbicide, ref="low")
levels(cottonData$Herbicide)
cotton.crd.lm <- lm(Yield ~ Herbicide, data=cottonData)
CRD.eff <- allEffects(cotton.crd.lm)
plot(CRD.eff)
effectPlot(cotton.crd.lm)
CRD.eff
CRD.eff$Herbicide$variables$Herbicide$levels
cottonData <- data.frame(Location=c(rep("1",3), rep("2",3), rep("3",3), rep("4",3)),
Herbicide=rep(c("low","medium","high"), 4),
Yield=c(12.7,15.2,12.3,13,16.2,9.4,15.6,13.7,9.1,7.1,7.8,4.7),
stringsAsFactors = TRUE)
cottonData <- data.frame(Location=c(rep("1",3), rep("2",3), rep("3",3), rep("4",3)),
Herbicide=rep(c("low","medium","high"), 4),
Yield=c(12.7,15.2,12.3,13,16.2,9.4,15.6,13.7,9.1,7.1,7.8,4.7),
stringsAsFactors = FALSE)
order[cottonData$Herbicide]
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
cotton.crd.lm <- lm(Yield ~ Herbicide, data=cottonData)
CRD.eff <- allEffects(cotton.crd.lm)
plot(CRD.eff)
cottonData <- data.frame(Location=c(rep("1",3), rep("2",3), rep("3",3), rep("4",3)),
Herbicide=rep(c("low","medium","high"), 4),
Yield=c(12.7,15.2,12.3,13,16.2,9.4,15.6,13.7,9.1,7.1,7.8,4.7),
stringsAsFactors = TRUE)
cottonData$Herbicide <- relevel(cottonData$Herbicide, ref="low")
cotton.crd.lm <- lm(Yield ~ Herbicide, data=cottonData)
CRD.eff <- allEffects(cotton.crd.lm)
plot(CRD.eff)
effectPlot(cotton.crd.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(cotton.crd.lm)
cottonData <- data.frame(Location=c(rep("1",3), rep("2",3), rep("3",3), rep("4",3)),
Herbicide=rep(c("low","between","high"), 4),
Yield=c(12.7,15.2,12.3,13,16.2,9.4,15.6,13.7,9.1,7.1,7.8,4.7),
stringsAsFactors = TRUE)
cottonData$Herbicide <- relevel(cottonData$Herbicide, ref="low")
cotton.crd.lm <- lm(Yield ~ Herbicide, data=cottonData)
CRD.eff <- allEffects(cotton.crd.lm)
plot(CRD.eff)
effectPlot(cotton.crd.lm)
cotton.rcb.lm <- lm(Yield ~ Location + Herbicide, data=cottonData)
RCB.eff <- allEffects(cotton.rcb.lm)
plot(RCB.eff)
effectPlot(cotton.rcb.lm)
anova(cotton.crd.lm)
NestedFTest(cotton.crd.lm)
cotton.null.lm <- lm(Yield ~ 1, data=cottonData)
NestedFTest(cotton.null.lm, cotton.crd.lm)
with(cottonData, tapply(Yield, INDEX=list(Location, Herbicide), mean))
RCB.eff$Location$fit
with(cottonData, tapply(Yield, INDEX=list(Location), mean))
RCB.eff$Herbicide$fit
with(cottonData, tapply(Yield, INDEX=list(Herbicide), mean))
CRD.eff$Herbicide$fit
plot(Yield ~ Herbicide, type="n", data=cottonData)
colour <- c("black", "red", "green", "blue")
for(i in 1:4){
points(Yield[Location == i] ~ Herbicide[Location == i], cex=1.5, col=colour[i])
}
for(i in 1:4){
points(Yield[Location == i] ~ Herbicide[Location == i], cex=1.5, col=colour[i],
data=cottonData)
}
legend(2.5, 15, cex=1.5, c("Location 1", "Location 2", "Location 3", "Location 4",
pch=1:4, col=colour))
for(i in 1:4){
points(Yield[Location == i] ~ Herbicide[Location == i], cex=1.5, col=colour[i],
data=cottonData)
}
for(i in 1:4){
points(Yield[Location == i] ~ Herbicide[Location == i], cex=1.5, col=colour[i],
data=cottonData)
}
effectPlot(cotton.rcb.lm)
for(i in 1:4){
points(Yield[Location == i] ~ Herbicide[Location == i], cex=1.5, col=colour[i],
data=cottonData)
}
plot(Herbicide, Yield, data=cottonData)
plot(cottonData$Herbicide, cottonData$Yield)
anova(cotton.rcb.lm)
summary(cotton.rcb.lm)
cottonData$Herbicide <- relevel(cottonData$Herbicide, ref="between")
cotton.rcb2.lm <- lm(Yield ~ Location + Herbicide, data=cottonData)
summary(cotton.rcb2.lm)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_7_RatsContrasts")
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Practical_7_RatsContrasts")
options(show.signif.stars = FALSE)
ratData <- read.table("ratWeights.txt", header=TRUE)
View(ratData)
is.factor(ratData$Treatment)
melonData <- data.frame(Yield=c(25.12, 17.25, 26.42, 16.08, 22.15, 15.92,
40.25, 35.25, 31.98, 36.52, 43.32, 37.10,
18.3, 22.6, 25.9, 15.05, 11.42, 23.68,
28.55, 28.05, 33.2, 31.68, 30.32, 27.58),
Variety=c(rep("A",6),rep("B",6),rep("C",6),rep("D",6)))
melonData
# Getting the means (according to variety type):
with(melonData, tapply(Yield, INDEX=list(Variety), mean))
melon.lm <- lm(Yield ~ Variety, data=melonData, x=TRUE)
summary(melon.lm)
anova(melon.lm)
# so significant difference of mean yield across different varieties?
# original contrasts
melon.lm$x
contrasts(melonData$Variety)
# new contrasts
ACvBD <- C(melonData$Variety, contr=c(1,-1,1,-1), how.many=1)
AvC <- C(melonData$Variety, contr=c(1, 0, -1, 0), 1)
BvD <- C(melonData$Variety, c(0,1,0,-1), 1)
# check they are orthogonal:
mat <- matrix(c(1,-1,1,-1, 1,0,-1,0,  0,1,0,-1), ncol=3)
rownames(mat) <- c("A", "B", "C", "D")
colnames(mat) <- c("ACvBD", "AvC", "BvD")
#  can check with transpose
t(mat) %*% mat
# refit the model with the orthogonal contrasts to partition variety SS
melon.orthog.lm <- lm(Yield ~ ACvBD + AvC + BvD, data=melonData, x=TRUE)
getContrastMatrix(melon.orthog.lm)
testContrastsOrthogonal(melon.orthog.lm)
DOCvWKY <- C(ratData$Treatment, c(2,2,-2,2), how.many = 1)
CAvNoCa <- C(ratData$Treatment, c(2,2,-2,2), how.many = 1)
DOCvWKY <- C(ratData$Treatment, c(1,-1,0,0), 1)
DOCCAvWKYCA <- c(ratData$Treatment, c(0,0,1,-1),1)
DOCCAvWKYCA <- C(ratData$Treatment, c(0,0,1,-1),1)
ratcalcium.lm <- lm(Weight ~ CAvNoCa + DOCvWKY + DOCCAvWKYCA, data=ratData)
getContrastMatrix(ratcalcium.lm)
testContrastsOrthogonal(ratcalcium.lm)
CAvNoCa <- C(ratData$Treatment, c(2,2,-2,-2), how.many = 1)
ratcalcium.lm <- lm(Weight ~ CAvNoCa + DOCvWKY + DOCCAvWKYCA, data=ratData)
getContrastMatrix(ratcalcium.lm)
testContrastsOrthogonal(ratcalcium.lm)
anova(ratcalcium.lm)
anova(melon.orthog.lm)
anova(ratcalcium.lm)
ratcalcium.lm <- lm(Weight ~ DOCvWKY + CAvNoCa + DOCCAvWKYCA, data=ratData)
getContrastMatrix(ratcalcium.lm)
testContrastsOrthogonal(ratcalcium.lm)
anova(ratcalcium.lm)
plantData <- read.table("pgr.txt", header=TRUE)
View(plantData)
pgr <- read.table("pgr.txt", header=TRUE)
lapply(pgr$Block,
function(elem){if(elem == 1) "plot1" else if(elem == 2) "plot2" else "plot3"})
sapply(pgr$Block,
function(elem){if(elem == 1) "plot1" else if(elem == 2) "plot2" else "plot3"})
sapply(pgr$P,
function(elem){if(elem == 1) "P1" else if(elem == 2) "P2" else "P3"})
sapply(pgr$N, function(e){if(e == 1) "N1" else if(e == 2) "N2"
else if(e == 3) "N3" else if(e == 4) "N4" else "N5"})
plantData <- data.frame(Block=factor(pgr$Block),
PlantRegulator=sapply(pgr$P, function(elem){if(elem == 1) "P1"
else if(elem == 2) "P2" else "P3"}),
NitrogenFertilizer=sapply(pgr$N, function(e){if(e == 1) "N1"
else if(e == 2) "N2" else if(e == 3) "N3"
else if(e == 4) "N4" else "N5"}),
stringsAsFactors = TRUE)
View(plantData)
View(pgr)
plantData <- data.frame(Block=factor(pgr$Block),
PlantRegulator=sapply(pgr$P, function(elem){if(elem == 1) "P1"
else if(elem == 2) "P2" else "P3"}),
NitrogenFertilizer=sapply(pgr$N, function(e){if(e == 1) "N1"
else if(e == 2) "N2" else if(e == 3) "N3"
else if(e == 4) "N4" else "N5"}),
stringsAsFactors = TRUE,
Yield = pgr$Yield)
View(plantData)
attach(plantData)
interaction.plot(x.factor = NitrogenFertilizer, trace.factor = PlantRegulator,
response=Yield, las=1)
View(plantData)
levels(plantData$PlantRegulator)
tapply(Yield, INDEX=list(NitrogenFertilizer, PlantRegulator), mean)
tapply(Yield, INDEX=list(NitrogenFertilizer, PlantRegulator, Block), mean)
tapply(Yield, INDEX=list(NitrogenFertilizer, PlantRegulator), mean)
interactionPlot(data=plantData, xFactor = NitrogenFertilizer,
traceFactor = PlantRegulator, response=Yield)
interactionPlot(data=plantData, xFactor = "NitrogenFertilizer",
traceFactor = "PlantRegulator", response="Yield")
interaction.plot(x.factor = NitrogenFertilizer, trace.factor = PlantRegulator,
response=Yield, las=1)
library(effects)
plantData
plant.factorial.lm <- lm(Yield ~ Block + NitrogenFertilizer*PlantRegulator,
data=plantData)
effectPlot(plant.factorial.lm)
effectPlot(plant.factorial.lm)
effectPlot(ratcalcium.lm)
effectPlot(cotton.rcb.lm)
pgr.eff <- allEffects(plant.factorial.lm)
plot(pgr.eff)
pgr.eff$`NitrogenFertilizer:PlantRegulator`
names(pgf.eff)
eff.pgr <- allEffects(plant.factorial.lm)
plot(eff.pgr)
plantData <- data.frame(Block=factor(pgr$Block),
P=sapply(pgr$P, function(elem){if(elem == 1) "P1"
else if(elem == 2) "P2" else "P3"}),
N=sapply(pgr$N, function(e){if(e == 1) "N1"
else if(e == 2) "N2" else if(e == 3) "N3"
else if(e == 4) "N4" else "N5"}),
stringsAsFactors = TRUE,
Yield = pgr$Yield)
detach(plantData)
attach(plantData)
interaction.plot(x.factor = NitrogenFertilizer, trace.factor = PlantRegulator,
response=Yield, las=1)
interaction.plot(x.factor = N, trace.factor = P,response=Yield, las=1)
tapply(Yield, INDEX=list(N, P), mean)
plant.factorial.lm <- lm(Yield ~ Block + N*P, data=plantData)
eff.pgr <- allEffects(plant.factorial.lm)
plot(eff.pgr)
names(eff.pgr)
plant.factorial.lm
effectPlot(plant.factorial.lm)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PLOTTING.R', echo=TRUE)
effectPlot(plant.factorial.lm)
block.fit = plant.factorial.lm
eff <- allEffects(block.fit)
x1Name <- names(eff)[[1]]
x2Name <- names(eff)[[2]]
yName <- eff[[x1Name]]$response
df1 <- data.frame(X1=eff[[x1Name]]$variables[[x1Name]]$levels,
Y1=eff[[x1Name]]$fit,
lower1=eff[[x1Name]]$lower, upper1=eff[[x1Name]]$upper)
df2 <- data.frame(X2=eff[[x2Name]]$variables[[x2Name]]$levels,
Y2=eff[[x2Name]]$fit,
lower2=eff[[x2Name]]$lower, upper2=eff[[x2Name]]$upper,
stringsAsFactors = TRUE)
eff[[x2Name]]$variables[[x2Name]]$levels
eff[[x1Name]]$variables[[x1Name]]$levels
x2Name
eff
eff[[x2Name]]
eff[[x2Name]]$variables[[x2Name]]
eff[[x1Name]]$variables[[x1Name]]
eff
eff[[x2Name]]$variables[[x2Name]]
eff[[x2Name]]$variables
length(eff[[x2Name]]$variables)
names(eff[[x2Name]]$variables)
eff[[x2Name]]$variables[["N"]]
eff[[x2Name]]$variables[["N"]]$levels
detach(plantData)
interaction.plot(x.factor = N, trace.factor = P,response=Yield, las=1)
attach(plantData)
interaction.plot(x.factor = N, trace.factor = P,response=Yield, las=1)
plot(eff.pgr)
detach(plantData)
summary(plant.factorial.lm)
summary(plant.factorial.lm)
print(eff.pgr)
attach(plantData)
tapply(Yield, INDEX=list(N, P), mean)
tapply(Yield, INDEX=Block, mean)
anova(plant.factorial.lm)
setwd("/datascience/projects/statisticallyfit/github/R/RStatistics/STAT210 Statistical Modelling and Experimental Design/PRACTICALS/Worksheet_Chapter12_GPA")
options(show.signif.stars = FALSE)
gpaData <- read.table("GPA3.txt", header=TRUE)
View(gpaData)
gpa.lm <- lm(GPA ~ CLASS, data=gpaData)
anova(gpa.lm)
betaCI(gpa.lm)
gpaData$CLASS <- relevel(gpaData$CLASS, ref="Middle")
gpa.mid.lm <- lm(GPA ~ CLASS, data=gpaData)
betaCI(gpa.mid.lm)
birchData <- read.table("birch.txt", header=TRUE)
View(birchData)
melonData
with(melonData, tapply(Yield, INDEX=list(Variety), mean))
m = matrix(c(3,-1,-1,-1,0,2,-1,-1,0,0,1,-1),nrow=3,byrow=TRUE)
m#
m %*% transpose(m)
m %*% t(m)
nrow(gpaData)
anova(gpa.lm)
21-3
qt(0.025, df=18)
gpaData
summary(gpa.lm)
tapply(GPA, INDEX=list(CLASS), mean)
with(gpaData, tapply(GPA, INDEX=list(CLASS), mean))
cof <- summary(gpa.lm)$coef
mu_Lower = cof[1,1]; mu_Lower
mu_Middle = mu_Lower + cof[1,2]; mu_Middle
0.72714+2.52143
cof#
cof[2,1]
mu_Middle = mu_Lower + cof[2,1]; mu_Middle
mu_Upper = mu_Lower + cof[3,1]; mu_Upper
with(gpaData, tapply(GPA, INDEX=list(CLASS), mean))
birchData
interaction.plot(response=ATP, x.factor=Species,
trace.factor=Treat, data=birchData)
with(birchData, interaction.plot(response=ATP, x.factor=Species,
trace.factor=Treat, data=birchData))
with(birchData,
interaction.plot(response=ATP, x.factor=Species, trace.factor=Treat))
warnings()
birchData <- read.table("birch.txt", header=TRUE)
with(birchData,
interaction.plot(response=ATP, x.factor=Species, trace.factor=Treat))
birch.lm <- lm(ATP ~ Species * Treat, data=birchData)
birch.lm <- lm(ATP ~ Species * Treat, data=birchData)
summary(birch.lm)
anova(birch.lm)
levels(birchData$Species)
levels(birchData$Treat)
