prob=c(prob.Head, 1 - prob.Head))
simulation
table(simulation)
table(simulation) / numTosses
simulation == "H"
sum(simulation == "H")
sum(simulation == "T")
coins <- c("H", "T")
probOneHead <- 0.5
numTosses <- c(11, 101, 1001, 100001)
allProbHeadsSim <- c()
for (toss in numTosses){
simulation <- sample(x = coins, size = numTosses, replace=TRUE,
prob=c(probOneHead, 1 - probOneHead))
probHeadSim <- sum(simulation == "H") / toss
allProbHeadsSim <- c(allProbHeadsSim, probHeadSim)
}
print(allProbHeadsSim)
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
# 0 means does not know correct answer with probability (1-p = q)
# 1 means knows correct answer with probability p
# replace = T
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Know <- sum(student.sample == 1) / n; sim.prob.Know
prob.NotKnow <- 1 - prob.Know
prob.NotKnow <- 1 - prob.Know
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(prob.Know, prob.NotKnow))
sim.prob.Correct.Given.NotKnow <- sum(student.sample == 1) / n
sim.prob.Correct.Given.NotKnow
sim.prob.Correct.GivenKnow
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Correct.GivenKnow <- sum(student.sample == 1) / n
sim.prob.Correct.GivenKnow
sim.prob.Correct = prob.Know * sim.prob.Correct.GivenKnow +
prob.NotKnow * sim.prob.Correct.Given.NotKnow
sim.prob.Correct
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Correct.GivenKnow <- sum(student.sample == 1) / n
sim.prob.Correct.GivenKnow
# now finding P(C | notK)
prob.NotKnow <- 1 - prob.Know
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(prob.Know, prob.NotKnow))
sim.prob.Correct.Given.NotKnow <- sum(student.sample == 1) / n
sim.prob.Correct.Given.NotKnow
# so now P(C) = P(K)*P(C|K) and P(notK)*P(C|notK)
sim.prob.Correct = prob.Know * sim.prob.Correct.GivenKnow +
prob.NotKnow * sim.prob.Correct.Given.NotKnow
sim.prob.Correct
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Correct.GivenKnow <- sum(student.sample == 1) / n
sim.prob.Correct.GivenKnow
# now finding P(C | notK)
prob.NotKnow <- 1 - prob.Know
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(prob.Know, prob.NotKnow))
sim.prob.Correct.Given.NotKnow <- sum(student.sample == 1) / n
sim.prob.Correct.Given.NotKnow
# so now P(C) = P(K)*P(C|K) and P(notK)*P(C|notK)
sim.prob.Correct = prob.Know * sim.prob.Correct.GivenKnow +
prob.NotKnow * sim.prob.Correct.Given.NotKnow
sim.prob.Correct
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Correct.GivenKnow <- sum(student.sample == 1) / n
sim.prob.Correct.GivenKnow
# now finding P(C | notK)
prob.NotKnow <- 1 - prob.Know
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(prob.Know, prob.NotKnow))
sim.prob.Correct.Given.NotKnow <- sum(student.sample == 1) / n
sim.prob.Correct.Given.NotKnow
# so now P(C) = P(K)*P(C|K) and P(notK)*P(C|notK)
sim.prob.Correct = prob.Know * sim.prob.Correct.GivenKnow +
prob.NotKnow * sim.prob.Correct.Given.NotKnow
sim.prob.Correct
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Correct.GivenKnow <- sum(student.sample == 1) / n
sim.prob.Correct.GivenKnow
# now finding P(C | notK)
prob.NotKnow <- 1 - prob.Know
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(prob.Know, prob.NotKnow))
sim.prob.Correct.Given.NotKnow <- sum(student.sample == 1) / n
sim.prob.Correct.Given.NotKnow
# so now P(C) = P(K)*P(C|K) and P(notK)*P(C|notK)
sim.prob.Correct = prob.Know * sim.prob.Correct.GivenKnow +
prob.NotKnow * sim.prob.Correct.Given.NotKnow
sim.prob.Correct
prob.Know <- 0.6
n <- 100 # samples ize (sample of 100 students
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(1 - prob.Know, prob.Know ))
student.sample
sim.prob.Correct.GivenKnow <- sum(student.sample == 1) / n
sim.prob.Correct.GivenKnow
# now finding P(C | notK)
prob.NotKnow <- 1 - prob.Know
student.sample <- sample(c(0, 1), size=n, replace=TRUE,
prob=c(prob.Know, prob.NotKnow))
sim.prob.Correct.Given.NotKnow <- sum(student.sample == 1) / n
sim.prob.Correct.Given.NotKnow
# so now P(C) = P(K)*P(C|K) and P(notK)*P(C|notK)
sim.prob.Correct = prob.Know * sim.prob.Correct.GivenKnow +
prob.NotKnow * sim.prob.Correct.Given.NotKnow
sim.prob.Correct
simsum<-0
for (i in 1:10000){
# set parameter values
p<-0.6 # prob that student knows answer
n<-100 # sample size
# generate sample of 100 students
st.sample<-sample(c(0,1),size=n, replace = T,prob=c((1-p),p))
SumNum1<-sum(st.sample) # total number who know the answer
pk<-0.25 # P(C | not Know) = 1/m = 1/4
guess.sample<-sample(c(0,1),size=n-SumNum1, replace = T,prob=c((1-pk),pk))
SumNum2<-sum(guess.sample) # total number who guessed correctly
simsum[i]<-SumNum1+SumNum2
}
hist(simsum)
simsum<-0
for (i in 1:10000){
# set parameter values
p<-0.6 # prob that student knows answer
n<-100 # sample size
# generate sample of 100 students
st.sample<-sample(c(0,1),size=n, replace = T,prob=c((1-p),p))
SumNum1<-sum(st.sample) # total number who know the answer
pk<-0.25 # P(C | not Know) = 1/m = 1/4
guess.sample<-sample(c(0,1),size=n-SumNum1, replace = T,prob=c((1-pk),pk))
SumNum2<-sum(guess.sample) # total number who guessed correctly
simsum[i]<-SumNum1+SumNum2
}
hist(simsum)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical1_module_exercise1.9.R', echo=TRUE)
doorsWithCarEachNight <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
sum(doorsWithCarEachNight == 'A')
sum(doorsWithCarEachNight == 'B')
sum(doorsWithCarEachNight == 'C')
# represents the contestant's first choice on each of the 100 nights
personFirstChoiceEachNight <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
sum(personFirstChoiceEachNight == 'A')
sum(personFirstChoiceEachNight == 'B')
sum(personFirstChoiceEachNight == 'C')
# The number of times the numbers in the two cols agree is the number of
# times the person will win if he doesn't change doors.
# And if the numbers in the two cols don't agree, then the contestant will
# win only if he decides to change doors (higher chance).
df <- data.frame(CarDoor=doorsWithCarEachNight, PersonChoice=personFirstChoiceEachNight)
head(df)
agreements <- doorsWithCarEachNight == personFirstChoiceEachNight
probWinIfNoSwitch <- sum(agreements) / length(agreements)
probWinIfSwitch <- (length(agreements) - sum(agreements)) / length(agreements)
probWinIfSwitch
probWinIfNoSwitch
doorsWithCarEachNight <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
sum(doorsWithCarEachNight == 'A')
sum(doorsWithCarEachNight == 'B')
sum(doorsWithCarEachNight == 'C')
# represents the contestant's first choice on each of the 100 nights
personFirstChoiceEachNight <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
sum(personFirstChoiceEachNight == 'A')
sum(personFirstChoiceEachNight == 'B')
sum(personFirstChoiceEachNight == 'C')
# The number of times the numbers in the two cols agree is the number of
# times the person will win if he doesn't change doors.
# And if the numbers in the two cols don't agree, then the contestant will
# win only if he decides to change doors (higher chance).
df <- data.frame(CarDoor=doorsWithCarEachNight, PersonChoice=personFirstChoiceEachNight)
head(df)
agreements <- doorsWithCarEachNight == personFirstChoiceEachNight
probWinIfNoSwitch <- sum(agreements) / length(agreements)
probWinIfSwitch <- (length(agreements) - sum(agreements)) / length(agreements)
probWinIfSwitch
probWinIfNoSwitch
doorsWithCarEachNight <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
sum(doorsWithCarEachNight == 'A')
sum(doorsWithCarEachNight == 'B')
sum(doorsWithCarEachNight == 'C')
# represents the contestant's first choice on each of the 100 nights
personFirstChoiceEachNight <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
sum(personFirstChoiceEachNight == 'A')
sum(personFirstChoiceEachNight == 'B')
sum(personFirstChoiceEachNight == 'C')
# The number of times the numbers in the two cols agree is the number of
# times the person will win if he doesn't change doors.
# And if the numbers in the two cols don't agree, then the contestant will
# win only if he decides to change doors (higher chance).
df <- data.frame(CarDoor=doorsWithCarEachNight, PersonChoice=personFirstChoiceEachNight)
head(df)
agreements <- doorsWithCarEachNight == personFirstChoiceEachNight
probWinIfNoSwitch <- sum(agreements) / length(agreements)
probWinIfSwitch <- (length(agreements) - sum(agreements)) / length(agreements)
probWinIfSwitch
probWinIfNoSwitch
car.door <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
# this is person's first choice on each of the 100 nights
first.choice <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
confusion.table <- table(car.door, first.choice)
confusion.table
agree <- sum(diag(confusion.table))
# would have won 30 times if they keep choice
probWinIfSwitch <- agree / sum(confusion.table); probWinIfSwitch
# would have won 70 times of 100 if they had changed.
probWinIfNoSwitch <- 1 - probWinIfSwitch; probWinIfNoSwitch
car.door <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
# this is person's first choice on each of the 100 nights
first.choice <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
confusion.table <- table(car.door, first.choice)
confusion.table
agree <- sum(diag(confusion.table))
# would have won 30 times if they keep choice
probWinIfSwitch <- agree / sum(confusion.table); probWinIfSwitch
# would have won 70 times of 100 if they had changed.
probWinIfNoSwitch <- 1 - probWinIfSwitch; probWinIfNoSwitch
agreements <- doorsWithCarEachNight == personFirstChoiceEachNight
probWinIfNoSwitch <- sum(agreements) / length(agreements)
probWinIfSwitch <- (length(agreements) - sum(agreements)) / length(agreements)
probWinIfSwitch
probWinIfNoSwitch
agree <- sum(diag(confusion.table))
# would have won 30 times if they keep choice
probWinIfSwitch <- agree / sum(confusion.table); probWinIfSwitch
# would have won 70 times of 100 if they had changed.
probWinIfNoSwitch <- 1 - probWinIfSwitch; probWinIfNoSwitch
probWinIfSwitch <- 1 - probWinIfNoSwitch; probWinIfSwitch
agree <- sum(diag(confusion.table))
# would have won 30 times if they keep choice
probWinIfNoSwitch <- agree / sum(confusion.table); probWinIfNoSwitch
# would have won 70 times of 100 if they had changed.
probWinIfSwitch <- 1 - probWinIfNoSwitch; probWinIfSwitch
agree <- sum(diag(confusion.table))
# would have won 30 times if they keep choice
probWinIfNoSwitch <- agree / sum(confusion.table); probWinIfNoSwitch
# would have won 70 times of 100 if they had changed.
probWinIfSwitch <- 1 - probWinIfNoSwitch; probWinIfSwitch
car.door <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
# this is person's first choice on each of the 100 nights
first.choice <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
confusion.table <- table(car.door, first.choice)
confusion.table
agree <- sum(diag(confusion.table))
# would have won 30 times if they keep choice
probWinIfNoSwitch <- agree / sum(confusion.table); probWinIfNoSwitch
# would have won 70 times of 100 if they had changed.
probWinIfSwitch <- 1 - probWinIfNoSwitch; probWinIfSwitch
sum(confusion.table)
listNumWinsIfNoSwitch <- 0
for(i in 1:1000){
car.door <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
# this is person's first choice on each of the 100 nights
first.choice <- sample(c('A', 'B', 'C'), size=1000, replace=TRUE)
confusion.table <- table(car.door, first.choice)
numWinIfNoSwitch <- sum(diag(confusion.table))
listNumWinsIfNoSwitch[i] <- numWinIfNoSwitch
}
hist(listNumWinsIfNoSwitch)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical2_Gameshow.R', echo=TRUE)
listNumWinsIfNoSwitch <- 0
listNumWinsIfSwitch <- 0
N = 1000
for(i in 1:1000){
car.door <- sample(c('A', 'B', 'C'), size=N, replace=TRUE)
# this is person's first choice on each of the 100 nights
first.choice <- sample(c('A', 'B', 'C'), size=N, replace=TRUE)
confusion.table <- table(car.door, first.choice)
numWinIfNoSwitch <- sum(diag(confusion.table))
listNumWinsIfNoSwitch[i] <- numWinIfNoSwitch
listNumWinsIfSwitch[i] <- N - numWinIfNoSwitch
}
par(mfrow=c(1,2))
hist(listNumWinsIfNoSwitch)
hist(listNumWinsIfSwitch)
listNumWinsIfNoSwitch <- 0
listNumWinsIfSwitch <- 0
N = 1000
for(i in 1:1000){
car.door <- sample(c('A', 'B', 'C'), size=N, replace=TRUE)
# this is person's first choice on each of the 100 nights
first.choice <- sample(c('A', 'B', 'C'), size=N, replace=TRUE)
confusion.table <- table(car.door, first.choice)
numWinIfNoSwitch <- sum(diag(confusion.table))
listNumWinsIfNoSwitch[i] <- numWinIfNoSwitch
listNumWinsIfSwitch[i] <- N - numWinIfNoSwitch
}
par(mfrow=c(1,2))
hist(listNumWinsIfNoSwitch)
hist(listNumWinsIfSwitch)
loss <- c(372,206,175,154,136,112,55,45,221,166,164,113,82,32,228,196,128,97,64,
249,219,186,155,114,341,340,283,267,215,148)
hist(loss, prob=TRUE, las=1, main="Histogram of rubber loss")
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical2_Rubber_Densities.R', echo=TRUE)
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/PRACTICALS/Practical2_Rubber_Densities.R', echo=TRUE)
lines(density(loss))
savePlot("hist", "png")
plot(ecdf(loss))
mode(loss)
which.max(c(1,1,1,1,2,3))
median(loss)
pmf.W <- function(w) {
5*w / (6 * (1 + w^2))
}
sum(pmf.W(1) + pmf.W(2) + pmf.W(3))
all(c(pmf.W(1) > 0, pmf.W(2) > 0, pmf.W(3) > 0)
all(c(pmf.W(1) > 0, pmf.W(2) > 0, pmf.W(3) > 0))
all(c(pmf.W(1) > 0, pmf.W(2) > 0, pmf.W(3) > 0))
expectation.W <- pmf.W(1) * 1 + pmf.W(2) * 2 + pmf.W(3) * 3
expectation.W
expectation2.W <- pmf.W(1) * 1^2 + pmf.W(2) * 2^2 + pmf.W(3) * 3^3
expectation2.W
variance.W <- expectation2.W - expectation.W^2
variance.W
variance.another.W <- pmf.W(1) * (1 - expectation.W)^2 +
pmf.W(2)*(2 - expectation.W)^2 + pmf.W(3) * (3 - expectation.W)^2
variance.W
variance.another.W
?sum()
sum(pmf.W(vs), vs = 1:3)
mu.W <- pmf.W(1) * 1 + pmf.W(2) * 2 + pmf.W(3) * 3
mu2.W <- pmf.W(1) * 1^2 + pmf.W(2) * 2^2 + pmf.W(3) * 3^3
mu2.W
mu.W
var.w <- mu2.W - mu.W^2
var.w
var.another.W <- pmf.W(1)*(1-mu.W)^2 + pmf.W(2)*(2-mu.W)^2 + pmf.W(3)*(3-mu.W)^2
var.another.W
pmf.W(1)*(1-mu.W)^2
(pmf.W(1))*(1-mu.W)^2
f.X <- function(x) { 2*(1 - x) }
integrate(f.X, 0, 1)
integrate(x * f.X, 0, 1)
f.ex <- function(x) {2*x*(1-x)}
integrate(f.ex, 0, 1)
EX <- integrate(f.ex, 0, 1)
EX
names(EX)
EX$value
f.var <- function(x, mu) { (x - mu)^2 * 2 * (1 - x)}
VARX <- integrate(f.var, 0, 1)
f.var <- function(x) { (x - EX)^2 * 2 * (1 - x)}
VAR.X <- integrate(f.var, 0, 1)
f.var <- function(x) { (x - EX$value)^2 * 2 * (1 - x)}
VAR.X <- integrate(f.var, 0, 1)
VAR.X
VAR.X$value
sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
sum(diceSample == 1)
sum(diceSample == 1)/120
1/6
table(diceSample)/120
mean(diceSample)
sqrt(var(diceSample))
barplot(table(x))
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
ggplot(diceSample) + geom_histogram()
df <- data.frame(diceSample)
df
ggplot(df) + geom_histogram()
head(diamonds)
head(df)
ggplot(df, aes(diceSample)) + geom_histogram()
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, color='pink')
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='pink')
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 4_5 - Discrete and Continuous Distributions/ProbabilityDistributions.R', echo=TRUE)
par(mfrow=c(1,1))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 4_5 - Discrete and Continuous Distributions/ProbabilityDistributions.R', echo=TRUE)
par (mfrow = c(1,1))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 4_5 - Discrete and Continuous Distributions/ProbabilityDistributions.R', echo=TRUE)
