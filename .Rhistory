library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 4_5 - Discrete and Continuous Distributions/ProbabilityDistributions.R', echo=TRUE)
par(mfrow=c(1,1))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 4_5 - Discrete and Continuous Distributions/ProbabilityDistributions.R', echo=TRUE)
par (mfrow = c(1,1))
source('/datascience/projects/statisticallyfit/github/R/RStatistics/MATH260 Probability and Simulation/Module 4_5 - Discrete and Continuous Distributions/ProbabilityDistributions.R', echo=TRUE)
diff(pnorm(c(0,1.2)))
diff(pnorm(c(-0.9,0)))
diff(pnorm(c(0.3, 1.56)))
diff(pnorm(c(-0.2, 0.2)))
diff(pnorm(c(-1.56, -0.2)))
qnorm(p=0.5, lower.tail=FALSE)
qnorm(p=0.4, lower.tail=FALSE)
qnorm(p=0.4, lower.tail=TRUE)
qnorm(p=0.6, lower.tail=TRUE)
qnorm(0.8643)
qnorm(0.05)
qnorm((1-0.99)/2)
qnorm(0.005)
pnorm(17, 16, 1, lower.tail = FALSE)
pnorm(450,400,20,lower.tail = F)
qnorm(0.1, 400,20,lower.tail =F)
1 - diff(pnorm(c(3-0.002, 3.002), 3.0005, 0.001))
pnorm(3, 2.4, 0.8, lower.tail = F)
pnorm(1.9, 2.4, 0.8)
pnorm(3, 2.4, 0.8/sqrt(3), lower.tail=F)
pbinom(3, size=n, prob=0.2266)
dbinom(3, size=3, prob=0.2266)
diff(pnorm(c(0.12, 0.14), 0.13, 0.005))
dbinom(4, size=4, prob=0.9544997)
qnorm(0.8531, 950,10)
qnorm(.10,78,6,lower.tail=F)
qnorm(0.281,78,6,lower.tail = F)
qnorm(0.25, 78,6)
pnorm(qnorm(0.25,78,6) + 5, 78, 6, lower.tail = F)
qnorm(0.01,lower.tail = F)
*(-0.3)+8
qnorm(0.01,lower.tail = F) * (-0.3) + 8
qnorm(0.025)
1/1.959964
pexp(1.7, rate=0.8)
pexp(1.7, rate=1/0.8)
randUnif <- runif(n=1000, min=-1, max=1)
mean(randUnif)
sd(randUnif)
# theoretical sd = (b - a)^2 / 12 = 1/3
randUnif <- runif(n=1000, min=-1, max=1)
mean(randUnif)
sd(randUnif)
randUnif <- runif(n=1000, min=-1, max=1)
mean(randUnif)
sd(randUnif)
sqrt((1+1)^2 / 12)
hist(randUnif)
?hist
seq(from=-1, to=1, by=0.2)
hist(randUnif, breaks = seq(from= -1, to=1, by=0.2))
fx <- function(x) dnorm(x, mean=0, sd=1)
curve(expr=fx, from=-4, to=4, ylab="Density of Standard Normal")
library(ggplot2)
x <- seq(-4, 4, 0.05)
x <- seq(-4, 4, 0.01)
pdf <- dnorm(x, mean=0, sd=1)
cdf <- pnorm(x, mean=0, sd=1)
df <- data.frame(x, pdf, cdf)
head(df)
ggplot(df, aex(x)) +
geom_line(aes(y=pdf), colour="blue") +
geom_line(aes(y=cdf), colour="pink")
ggplot(df, aes(x)) +
geom_line(aes(y=pdf), colour="blue") +
geom_line(aes(y=cdf), colour="pink")
ggplot(df, aes(x)) +
geom_line(aes(y=pdf), colour="blue") +
geom_line(aes(y=cdf), colour="magenta")
plot(pdf)
plot(cdf, add=TRUE)
plot(x, pdf, type="1", colour="blue")
plot(x, pdf, type="1", colour="blue")
plot(x, pdf, type="1", col="blue")
plot(x, pdf,  col="blue")
plot(x, pdf,  col="blue", lty=1)
?"plot"
plot(x, pdf,  col="blue", type="l")
lines(x, cdf, type="l", col="red")
plot(x, pdf,  col="blue", type="l", ylim=c(0,1))
lines(x, cdf, type="l", col="red")
randNorm <- rnorm(n=1000, mean=101, sd=5) # units in decibels
randNorm >= 110
probNoiseGreater110 = sum(randNorm >= 110) / 1000
probNoiseGreater110
N <- 1000
sort(randNorm)
sorted <- sort(randNorm)
sorted[N * 0.95]
sorted[N * 0.95] - 105
109.2582 - 101
p = 1/2
n = 21
dbinom(seq(1, 21, by=1), size=n, prob=p)
Px <- dbinom(seq(1, 21, by=1), size=n, prob=p)
Px[11]
Px[12]
Px[7]
xs <- seq(1, 21, by=1)
Px <- dbinom(xs, size=n, prob=p)
PGTx <- pbinom(xs, size=n, prob=p, lower.tail = FALSE)
PLTx <- 1 - PGTx
PLTx
PGTx
improve <- seq(1, 21, by=1)
results <- cbind(imporve, Px, PLTx, PGTx)
pbinom(34, size=40, prob=0.5, lower.tail=FALSE)
1 - pbinom(34, size=40, prob=0.5, lower.tail=FALSE)
pbinom(34, size=40, prob=0.5, lower.tail=FALSE)
1-pbinom(33, size=40, prob=0.5, lower.tail=FALSE)
1-pbinom(33, size=40, prob=0.5, lower.tail=TRUE)
1-pbinom(34, size=40, prob=0.5, lower.tail=TRUE)
pbinom(34, size=40, prob=0.5, lower.tail=FALSE)
PGTx.2 <- 1 - pbinom(improve, size=n, prob=p, lower.tail=TRUE) # is same as above
PGTx - PGTx.2
PLTx <- 1 - PGTx
results <- cbind(improve, Px, PLTx, PGTx)
dimnames(results) <- list(NULL, c("x", "P(X = x)", "P(X <= x)", "P(X > x)"))
results
head(results, 10)
lambda = 2
p = ppois(5-1, lambda=lambda, lower.tail=FALSE)
1 - ppois(4, lambda=lambda)
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
customers <- rpois(n = 100, lambda=lambda)
customers
mean(customers)
customers[10]
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
sim.results <- table(customers)
sim.results <- table(customers); sim.results
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
sim.results <- table(customers); sim.results
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
sim.results <- table(customers); sim.results
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
sim.results <- table(customers); sim.results
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
sim.results <- table(customers); sim.results
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
sim.results <- table(customers); sim.results
1/6
2/7
sum(sim.results >= 5)
data.frame(PSim=p.sim, P=p)
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = 100, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / 100; p.sim
p
# There are 3 intervals here where at least 5 customers entered
sim.results <- table(customers); sim.results
sum(sim.results >= 5)
data.frame(PSim=p.sim, P=p)
sum(c(13, 19, 32, 17, 10,  5,  2,  2))
N <- 1000
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = N, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / N; p.sim
p
# There are 3 intervals here where at least 5 customers entered
sim.results <- table(customers); sim.results
data.frame(PSim=p.sim, P=p)
# Unlikely P(X >= 5) can suspect that mu = 2 may be greater than 2
# if indeed we think five or more customers arrive in a half minute interval
# in our observation.
N <- 1000
# Poisson lambda = 2
lambda = 2 # 2 customers per half minute
# Probability 5 or more customers in half minute interval
# These are the same:
p = ppois(5-1, lambda=lambda, lower.tail=FALSE); p
1 - ppois(4, lambda=lambda)
# Simulating arrival of 100 customers in the half minute intervals, estimate P(X >= 5)
customers <- rpois(n = N, lambda=lambda)
customers[10] # number of customers arriving in the tenth half minute interval
mean(customers) # close to 2
hist(customers)
p.sim <- sum(customers >= 5) / N; p.sim
p
# There are 3 intervals here where at least 5 customers entered
sim.results <- table(customers); sim.results
data.frame(PSim=p.sim, P=p)
# Unlikely P(X >= 5) can suspect that mu = 2 may be greater than 2
# if indeed we think five or more customers arrive in a half minute interval
# in our observation.
w <- 1:3
rbind(w, pmf.W(w))
# Question 1
pmf.W <- function(w) {
5*w / (6 * (1 + w^2))
}
# a) is valid PDF since it sums to 1
sum(pmf.W(1) + pmf.W(2) + pmf.W(3))
# and all values are positive
all(c(pmf.W(1) > 0, pmf.W(2) > 0, pmf.W(3) > 0))
# another way to check all values are positive
w <- 1:3
rbind(w, pmf.W(w))
# b) find E(W)
mu.W <- pmf.W(1) * 1 + pmf.W(2) * 2 + pmf.W(3) * 3
mu.W
# c) var(W)
# E(W^2)
mu2.W <- pmf.W(1) * 1^2 + pmf.W(2) * 2^2 + pmf.W(3) * 3^3
mu2.W
# V(W)
var.w <- mu2.W - mu.W^2
var.w
# d) TODO why not the same as above?
var.another.W <- pmf.W(1)*(1-mu.W)^2 + pmf.W(2)*(2-mu.W)^2 + pmf.W(3)*(3-mu.W)^2
var.another.W
# NUMBER 2 Integration
f.X <- function(x) { 2*(1 - x) }
# a)
integrate(f.X, 0, 1) # so is valid prob func
# b)
f.ex <- function(x) {2*x*(1-x)}
EX <- integrate(f.ex, 0, 1)
EX
names(EX)
EX$value
# c)
f.var <- function(x) { (x - EX$value)^2 * 2 * (1 - x)}
VAR.X <- integrate(f.var, 0, 1)
VAR.X$value
# NUMBER 3 Dice
# a)
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
# c)
barplot(table(diceSample))
hist(diceSample)
library(ggplot2)
df <- data.frame(diceSample)
ggplot(df, aes(diceSample)) + geom_histogram(binwidth=1, fill='dodgerblue')
rbind(w, pmf.W(w))
pmf.W(w)
sum(pmf.W(w))
mu.W <- pmf.W(1) * 1 + pmf.W(2) * 2 + pmf.W(3) * 3
mu.W
w*pmf.W(w)
sum(w*pmf.W(w))
sum(w^2 * pmf.W(w)) - mu.W^2
var.w <- mu2.W - mu.W^2
var.w
var.W <- sum(w^2 * pmf.W(w)) - mu.W^2
var.W
var.W <- sum(w^2 * pmf.W(w)) - mu.W^2
var.W
var.another.W <- pmf.W(1)*(1-mu.W)^2 + pmf.W(2)*(2-mu.W)^2 + pmf.W(3)*(3-mu.W)^2
var.another.W
f.X <- function(x) { 2*(1 - x) }
# a)
integrate(f.X, 0, 1) # so is valid prob func
f.ex <- function(x) {2*x*(1-x)}
EX <- integrate(f.ex, 0, 1)
EX
names(EX)
EX$value
# c)
f.var <- function(x) { (x - EX$value)^2 * 2 * (1 - x)}
VAR.X <- integrate(f.var, 0, 1)
VAR.X$value
diceSample <- sample(1:6, size=120, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
table(diceSample)/120
# b)
mean(diceSample) # true = 3.5
sqrt(var(diceSample)) # true = 1.708
sd(diceSample)
barplot(table(diceSample))
dice1 <- sample(1:6, size=10^4, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
dice2 <- sample(1:6, size=10^4, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
dice3 <- sample(1:6, size=10^4, replace=TRUE, prob=c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6))
dice1
diceSum <- dice1 + dice2 + dice3
diceSum
N <- 10^4
probLessTen <- sum(diceSum < 10) / N; probLessTen
head(dice1, dice2, dice3)
head(cbind(dice1, dice2, dice3))
df <- cbind(dice1, dice2, dice3)
df[6,]
unique(df[6,])
df[6,1] == df[6,2] == df[6,3]
df[6,1] == df[6,2] || df[6,1] == df[6,3] || df[6,2] == df[6,3]
rolls <- cbind(dice1, dice2, dice3)
c = -
c = 0
c = 0
c += 1
probFaceValuesAllDifferent
probFaceValuesAllDifferent <- count / N;
probFaceValuesAllDifferent
probFaceValuesAllDifferent <- count / N;
rolls <- cbind(dice1, dice2, dice3)
#unique(df[6,])
count <- 0
for (i in 1:N){
# if all of the rolls of the 3 dice are not the same for this iteration i,
if(rolls[i, 1] != rolls[i,2] && rolls[i,1] != rolls[i, 3] &&
rolls[i,2] != rolls[i,3]){
# then we do increment the count
count = count + 1
}
}
# the probability we are finding is:
probFaceValuesAllDifferent <- count / N;
probFaceValuesAllDifferent
count <- 0
unique(rolls)
head(unique(rolls))
head(rolls)
count <- 0
for (i in 1:N){
# if all of the rolls for this row i are unique,
if(unique(rolls[i, ]) == 3){
# then we increment the count
count = count + 1
}
}
count /
count / N
count <- 0
for (i in 1:N){
# if all of the rolls for this row i are unique,
if(unique(rolls[i, ]) == 3){
# then we increment the count
count = count + 1
}
}
count / N
count <- 0
for (i in 1:N){
# if all of the rolls of the 3 dice are not the same for this iteration i,
if(rolls[i, 1] != rolls[i,2] && rolls[i,1] != rolls[i, 3] &&
rolls[i,2] != rolls[i,3]){
# then we do increment the count
count = count + 1
}
}
count
count <- 0
for (i in 1:N){
# if all of the rolls for this row i are unique,
if(unique(rolls[i, ]) == 3){
# then we increment the count
count = count + 1
}
}
warnings()
count <- 0
for (i in 1:N){
# if all of the rolls for this row i are unique,
if(length(unique(rolls[i, ])) == 3){
# then we increment the count
count = count + 1
}
}
count
count.1 <- 0
for (i in 1:N){
# if all of the rolls of the 3 dice are not the same for this iteration i,
if(rolls[i, 1] != rolls[i,2] && rolls[i,1] != rolls[i, 3] &&
rolls[i,2] != rolls[i,3]){
# then we do increment the count
count.1 = count.1 + 1
}
}
# the probability we are finding is:
probFaceValuesAllDifferent.1 <- count.1 / N;
probFaceValuesAllDifferen.1
probFaceValuesAllDifferent.1
count.2 <- 0
for (i in 1:N){
# if all of the rolls for this row i are unique,
if(length(unique(rolls[i, ])) == 3){
# then we increment the count
count.2 = count.2 + 1
}
}
probFaceValuesAllDifferent.2 <- count.2 / N
assertthat::count.1 == count.2
assertthat(count.1 == count.2)
assert_that(count.1 == count.2)
count.1 == count.2
probFaceValuesAllDifferent.2
